%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: binary-fail copy.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Joel Low
%%CreationDate: 5/5/2015
%%BoundingBox: 0 0 538 243
%%HiResBoundingBox: 0 0 537.7530 242.4668
%%CropBox: 0 0 537.7530 242.4668
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.3%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.3 x691 R agm 4.6676 ct 5.2594%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 60 8%%BeginData: 6848 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD33FF7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8FD69
%FFA8A8FD14FF7DFD6AFF7DFD06FFA87D7DA8A87D527DFD05FFA8A8FD37FF
%7D7DA8A87DA8A8A87DFF7D7DA8A87DA8FF7D7DFF7D7DA8A87DA8A8A87DFF
%7D7DA8A87DA8FF7D7DFF7D7DA8A87DA8A8A87DFF7D7DFD06FF527D525252
%7D27A8FD06FF7DFF7DA8FF7D7DFF7D7DA8A87DA8A8A87DFF7DA8FFA87DA8
%FF7D7DFF7D7DA8A87DA8A87D7DFF7DA8FFA87DA8A87D7DFF7D7DA8A87DA8
%A87DFD33FF7DFD07FFA87D7DA87DA8A8FD06FFA8FD36FFA87DFD31FFA87D
%7DA87DA87DA87DA87DA87DA8A8A87DA87DA87D7D7DFD37FFA8FD32FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD37FF7DA8FD7EFF7DFD80
%FF7DFD7EFFA8FD7FFF7DFD30FFFD1B7DFD34FFA8A8FD2FFFA8FD19FFA8A8
%FD34FF7DFD2FFF7DFD08FFA87DA8A8FD0DFF7DFD34FF7DFD2DFFA8A87DA8
%FD07FFA87DA852A87D7D7DA852A8FD07FFA87DFD33FF7D7DFD2AFFA87D7D
%7DA87DFD07FF7DA8A8FD04527D7D52A8FD07FF7DA87D7D7DA8FD30FFA8FD
%28FFA87D7DFD04FFA8FD07FFA82752527D527D7DA8527DFD07FFA8A8FFFF
%FF7DA8FD2EFFA8A8FD27FF7D7DA8FD05FF7DFFA8A8A8FFA8FFFD087D527D
%7DA8A8FFA8A8A8FF7DFD05FFA87DA8FD2CFF7DFD27FF7DA8FD07FFA87DA8
%A8A87DA87DFD0BA87DA87DA8A8A87DA8FD07FF7DA8FD2BFFA87DFD25FF7D
%A8FD2BFF7DA8FD2BFFA8FD24FF7DA8FD26FFA8FFFFFFA8FFFF7DA8FD29FF
%7DFD24FFA87DFFA852A87D7D52A8FD1EFFA8527DA852A852A8A87DFD29FF
%A8A8FD23FF7DFFFF7D5252527DA87DFD1FFF277D5252A87DA8FF7DA8FD29
%FF7DFD22FFA87DFFFFA8FD067DFD1EFFA8FD057D52FFFFFF7DFD28FFA8FD
%23FF7DFD32FFA87DFD27FF7DA8FD21FF7DA8FD33FF7DFD28FF7DFD21FFA8
%FD34FF7DA8FD26FFA87DFD20FFA87DFD34FFA87DFD26FF7DFD21FFA8FD36
%FFA8FD26FFA87DFD20FF7DA8FD35FF52A8FD26FFA8FD20FF52A8FD35FF52
%A8FD25FF7DA8FD13FF7DA87DA87DA87DA87DA87DA87D7D7DA87DA87DA87D
%A87DA87DA87DFD1CFFA87DA87DA87DA87DA87DA87DA8527D7DA87DA87DA8
%7DA87DA87DA8A8FD18FF7DFD14FFA8A8FFA8FFA8FFA8FFA8FFA8FFFFFFA8
%FFA8FFA8FFA8FFA8FFFF7DA8FD1BFF7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FF7DFD1AFF7DFD13FF7DFD19FF7DFD1CFFA8FD19
%FFA8A8FD18FFA8A8FD13FFA8FD09FFA87DA87DFF7DA8FD09FFA8A8FD1BFF
%7DFD09FFFD07A8FD09FF7DFD19FF7DFD0CFF7DA8A8A87DA8A8A87DFD09FF
%7DA8A87D527DA8FD09FF7DFD04A8FF7DFD04A8FD09FFA8A87DFFA8A8A8FF
%7D7DFD09FFA87DFF525252A8FD09FFA87DFF7DA8A8A87DFFA8FD10FFA8A8
%FD0BFFA87DFFFD04A87DA8FD09FFA8527D7D5252A8FD09FFA8A8A87DA8A8
%A87DFF7DA8FD0AFF7DA8A8A87DA8A8A87DFD09FFA8527D7D527D7DFD09FF
%7DFD04A8FF7DA8A8A87DFD10FF7DFD0BFFA8FFA8FFFD04A87DFD09FF7DFD
%05527DFD09FF7DA8A8FFFD07A8FD09FFFD05A8FFFD04A8FD09FFA827FD04
%527DFD09FFA87DFFA8A8A8FFA8A8A8FD10FFA8FD0BFFA8A8A8FFA8FFA8FF
%A87DFD19A87DA8FFA8FFA8FFA8FFA8FD0AFFA87DFFA8FFA8FFA8A87DFD19
%A87DA8A8FFA8FFA8FFA8A8A8FD0FFF7DA8FD0AFFA87DFD07A87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DFD08A87D7DFD09FF
%FD0AA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DFD08
%A8FF7DA8FD10FFA8FD0CFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0BFFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8A8A8FD0FFFA8A8FD0AFFA87DFFFD24A8A1A8A1A8
%A8A8FD0AFFA87DFD2BA8FD10FF7DFD0BFFA8A8A8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A19AA176
%A176A1A1FD06FFCAFFFF7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FD0FFFA87D
%FD0BFFFD27A8AFA8A8A8A17DA19AA1A1FF9A936FFFFD2CA87DA8FD10FFA8
%FD0AFFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFCACA9A9A68FFFFFFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FD11FF7DFD0BFFA87DFD2CA8FD05FF6F6F6F
%A17D7DA8AFA8FFA8AFA8AFFD22A87DA8FD0FFFA8A8FD0AFFA8A8A8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FF7DA8FD04FFA19ACACAA1A176FD04A1A8A1A8A8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8A87DFD10FF7DFD0BFFFD2DA8FD04FFCAA8FD04FFA87DA1769A766868FD
%25A8FD0FFFA8FD0BFFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0BFF7DFFA8
%FFA8FFA8CAA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FD11FF7DA8FD0AFFA87DFFFD29A87DA8FD09FFA8
%7DFD05A8FFFD23A8FF7DA8FD10FF7DFD0BFFA8A8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FF7DA8FD0AFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FD0FFFA87DFD0AFFA8
%7DFD2BA8FD0AFFFD2DA8FD10FF7DFD0BFFA8A8A8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FD0BFF7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FD0FFFA8A8FD0BFF7DA8
%7DA87DA8A8A87DFD05A87DA8A8A87DA8A8A87DA87DA8A8A87DFD05A87DA8
%A8A87DFD06A8FD09FFA8A87DA8A8A87DA87DA8A8A87DA8A8A87DA87DA8A8
%A87DA8A8A87DA87DA8A8A87DA8A8A87DA87DA8A8A87DA87DA8FD10FF7DFD
%0CFF7DFD04A8FFA8A8A8FF7DFFFFA8A8FFA8A8A8FF7DFD04A8FFA8A8A8FF
%7DFFFFA8A8FFA8A8A8FF7DFFA8FD0BFFA8A8A8FF7DA8FFA87DFFA8A8A8FF
%A8A8FFA87DFFA8A8A8FF7DA8FFA87DFFA8A8A8FFA8A8FFA87DFFA8A8A8FF
%A8FD0FFF7DA8FD7EFF7DFD7FFFA87DFD7FFFA8FD7EFF7DA87D7DFF7D7DA8
%A87DA8A87D7DFF7D7DA8A87DA8A87D7DFF7D7DA8A87DA8A87D7DFF7D7DA8
%A87DA8A87D7DFF7D7DA8A87DA8A87D7DFF7D7DA8A87DA8FF7D7DFF7D7DA8
%A87DA8A87D7DFF7D7DA8A87DA8FF7D7DFF7D7DA8A87DA8A87D7DFF7D7DA8
%A87DA8FF7D7DFF7D7DA8A87DA8A87D7DFF7D7DA8A87DA8FF7D7DFF7D7DA8
%A8
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2015-05-05T11:55:49+08:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>116</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAdAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9LWnmTSrtLh4TPxtkMs3&#xA;O2uIyFXc8Q8aljt0WpxVyeY9KfT5NQVpvqsT+m5NtcB+Rp0iMfqEfENwtMVdP5k0mC0gu5Gn9G55&#xA;ekVtrhm+E0PJFjLr/sgMVXz69psF3b2shl9a6CNCFgnZaSHivJ1Qom/XkRTviq5Nb099TbTVMv1t&#xA;a1BgmEey8v70p6fT/KxVStvMelXK3DQtMRaoZJuVtcJ8K1rx5xrzO3RanFXJ5j0p9Pk1BWm+qxP6&#xA;bk21wH5GnSIx+oR8Q3C0xV0/mTSYLSC7kaf0bnl6RW2uGb4TQ8kWMuv+yAxVfPr2mwXdvayGX1ro&#xA;I0IWCdlpIeK8nVCib9eRFO+Krk1vT31NtNUy/W1rUGCYR7Ly/vSnp9P8rFVK28x6VcrcNC0xFqhk&#xA;m5W1wnwrWvHnGvM7dFqcVcnmPSn0+TUFab6rE/puTbXAfkadIjH6hHxDcLTFUm866npl35ZijZXk&#xA;h1K4tY445IJeLqLuIOsiunwAj+elcVTD/Afkf/qXdM/6Q7f/AJoxVI/NGneQPL4s/U8o2l4byR1P&#xA;1eys6RRwxNNNNIZPT+FI42NFqxOwG+KsSk86/ldFBI83kMRzW9rLqV3bmy0wtFp0EME73ZZZSjAR&#xA;3cf7tGMlajjtUqss8m6R5O8xaXcX03k2w05oL+/sBDLbWchYWN3Ja+oDEHHxGI1B6NWnJaMyqe/4&#xA;D8j/APUu6Z/0h2//ADRiqA8na3p9r5V8r2MxlFxPplj6YSCaRPjhVRykRGRdx+0wpiqeprenvqba&#xA;apl+trWoMEwj2Xl/elPT6f5WKqdr5h0u6juXhaYraKXn5W9wh4ip+EPGpc/D0WpxVpPMelPp8moK&#xA;031WJ/Tcm2uA/I06RGP1CPiG4WmKun8yaTBaQXcjT+jc8vSK21wzfCaHkixl1/2QGKqlzrmnW15B&#xA;ZymX17kIYgsEzr8bcV5SKjIu435EU74q2mt6e+ptpqmX62tagwTCPZeX96U9Pp/lYqp2vmHS7qO5&#xA;eFpitopeflb3CHiKn4Q8alz8PRanFWl8y6S2ntfhp/qySekxNtcB+VAdozH6hG/ULTFXT+ZNJgtI&#xA;LuRp/RueXpFba4ZvhNDyRYy6/wCyAxVUudc062vILOUy+vchDEFgmdfjbivKRUZF3G/IinfFXR65&#xA;p0mpNpyGX60pIIMEwj+EVP70oI/+GxVZa+YdLuo7l4WmK2il5+VvcIeIqfhDxqXPw9FqcVU381aJ&#xA;HpU2qyyyx2EDFZpXt7hStFDElGjD8QDu1Ke+Kq/l+PUotB02PVGLaklrAt8xIYmcRqJTUbH469MV&#xA;R+KuxV2KuxV2KuxV2KuxV2KuxV2Kpfr2lNqulyWSTfV5GeKSObjzCtDKsq1Wq1FU8cVQf6O84f8A&#xA;V7tf+kA/9lGKqE+g+Zbh45J9VspXh5ekX07lx5qUalbj9pSQcVSVfystFtYrVYdEFtBMbmGH9DRc&#xA;UmIAMij1tmoiivgAOgGKptYeWde076x9Q1GwtRdzvd3Qh03gJJ5aepK/G4FXenxN1OKov9HecP8A&#xA;q92v/SAf+yjFUfoemLpWi6fpayGVbC2htRKRxLCGMJypU0rxriqNxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2Kpd5juWtfL2qXS263jQWk8otHHJZSkTN6bLQ1D0pTFWvLVrHaeXNKtY7lb2O3s7eJLyM1SYJ&#xA;EqiVSC1Q9OQ3xVMsVdirsVdirsVdirsVdirsVdirsVSCLzzoM0aywJqE0LiqSxaZqLow8VZbcqR7&#xA;jFV/+M9I/wCWfU/+4Tqf/ZPirv8AGekf8s+p/wDcJ1P/ALJ8Vd/jPSP+WfU/+4Tqf/ZPirv8Z6R/&#xA;yz6n/wBwnU/+yfFXf4z0j/ln1P8A7hOp/wDZPiq+1826PcXtvZKt5DPds0dv9ZsL22R3WNpSoknh&#xA;jSvCNjSvbFU5xV2KuxV2KuxV2KuxV2KuxV2KuxV2KoDzA2proOpNpVf0oLWc2FApP1j029LZ/h+3&#xA;T7W2KqflZbBfLGkLpzSPp62VuLN5qeo0IiX0y9AByK0rtiqZ4q7FXYq7FXYq7FXYq7FXYqhNT1fT&#xA;NLtxcahcpbQlgiM5oWc9FRerMewAriqVr5l1K5IOm6DeTQkVFxcmOzQj2SZhP98YxVd5DJPk3RiR&#xA;Qm1jqOtDTFU9xV5XqPn3V/0jeomu2lpeW+v2GlJ5cEcRuhZy6rZ2zzNzYyH1oJ2bkE4hXWlGHIqp&#xA;Xov59avdWVuq6FHdT/o/TJXllv44He51GGzcF4RCzrCTfU9REO6/ZFdlWYeT/Pmsa35tvtGv7Ozs&#xA;Y7SwS4EUdw8twbiPULywueHKOISQhrNTyopXkta86IqzjFWOecJrqG98tSWtv9anXU34QcxHyrp1&#xA;4D8TbCg3xVU/xfDasF1qwutHU/8AHzcKklr9NxA0qIPeTjiqexyRyxrJGweNwGR1IIIPQgjFV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxVL/ADFbT3Xl/U7a3uBaTz2k8UN0zFBE7xsqyFhuoUmtRiqzytPaXHlj&#xA;SJ7OD6raS2Vu9ta8i3pRtEpSPkevFdq4qmeKuxV2KuxV2KuxV2KuxVJte16azmg03TYBea3eAtb2&#xA;7HjHHGuzTzsK8Y1r82Pwr7Ku0jyzb2lz+kb6U6jrTgh9QmAqgPWOBN1hj/yV6/tEnfFU5xVjOm+X&#xA;fM+m2EFha63b/VrZBHEHsSzcR0qROKn6MVRX6O84f9Xu1/6QD/2UYqxa5/KC2urmW6nuLR55mLyO&#xA;ba4BLFuRO15/NviqkPyXsBSktpsAo/0a56DoP97MVR+j/llLo18L/Tby0t7tVZBL9Umc8X+0KPds&#xA;N8VT/wDR3nD/AKvdr/0gH/soxVYug65NqWnXeo6rFcQ6dO9xHDFamEs7W8tvu5mk2Czk9MVT8gMC&#xA;CKg7EHoRirF7vSL3y8z6h5dhaayrzvdAU0RgTVpLMHaOUdfTFEf2bfFWQadqNlqNlDfWUomtZ15R&#xA;SCu46EEHcEHYg7g7YqiMVdirsVdirsVdirsVdirsVSzzTFZTeWNXiv5jbWMllcLd3CqXMcTRMJHC&#xA;gEkqtTSmKqnl+5vLrQdNub6AWt7PawSXVsEaMRyvGrPHwarLxYkUO4xVH4q7FXYq7FXYq7FXYqg9&#xA;Y1SDStMuL+cM6QLURpu8jkhUjQd2dyFX3OKscu/K+pTeSvMEUoW48ya7Y3K3DAgJ60sDpFbozbCK&#xA;LlwX6WO5OKsLby1+bInMAa5XTYLxbtIbWaztqquqCYpEVb956ltIzN6oShWnx8vhVZz+X+manptt&#xA;q1te2lzbRPqVxcWJu7hbl3glIKn1BNcP1BrzNcVZVirsVdirsVdirsVdiryTzB5X/Mq382+YdX8v&#xA;oRFf3HrWrRPah5ALTS4uDNMytEjvZTKzCpX7XFtlKqtoXlXzdB5i0NtSsryZNMvdRmn1w3UEryQz&#xA;SzLbQcTNG62xjn9RxwZuSqvGg2VZgy/4f8yIyfDo+vSlJE/Zg1AiquPBbhVIb/LA7ucVZLirsVdi&#xA;rsVdirsVdirsVdiqWeaZLGPyxq8moRtNYJZXDXcMZo7wiJjIqmooStQN8VVPL8epRaDpseqMW1JL&#xA;WBb5iQxM4jUSmo2Px16Yqj8VdirsVdirsVdirsVY/q6/X/NGk6aTW3slk1S5XsXjIhtlPtzkeT5o&#xA;MVZBirsVdirsVdirsVdirsVdirsVdirsVS3zJpb6pod5ZRtwuJE5Wsv++7iMh4ZP9hIqtiqpoWpr&#xA;qui2GpBeH1yCOYp/KXUMV3/lO2Ko7FXYq7FXYq7FXYq7FXYql3mO5a18vapdLbreNBaTyi0ccllK&#xA;RM3pstDUPSlMVa8tWsdp5c0q1juVvY7ezt4kvIzVJgkSqJVILVD05DfFUyxV2KuxV2Ksds/N15e2&#xA;sV3Z+XNSmtZ15wzB9OUMp6MA92rCvuMVVv8AEWr/APUr6n/yM0z/ALLcVd/iLV/+pX1P/kZpn/Zb&#xA;irHdPHmqDzvquvzaLqkljeWtvbWll6umn0zFUvWt3sORJWh/aavbFWRf4i1f/qV9T/5GaZ/2W4q7&#xA;/EWr/wDUr6n/AMjNM/7LcVdF5nuP0hZWd5ol9YfX5WggnnayeP1Ehkn4t6FzM4qkLfs4qnmKuxV2&#xA;KuxV2KuxVB6xqkOlabPfzRvLHAATFFxLsSQoC82RaknuwxVL/wDEWr/9Svqf/IzTP+y3FXf4i1f/&#xA;AKlfU/8AkZpn/Zbiq1/MGrsjL/hjVByBFRLpoIr4H67iqQeRD5p8v+Xo9N1HRNUv7lJZn9b1dNKh&#xA;HkJRVreCnw0JHYk9sVZD/iLV/wDqV9T/AORmmf8AZbirv8Rav/1K+p/8jNM/7LcVVtK8wNfahPp8&#xA;+m3WnXUESTlLo2zBo5GZAVNvNOOsZ60xVNsVdirsVdirsVQHmBtTXQdSbSq/pQWs5sKBSfrHpt6W&#xA;z/D9un2tsVU/Ky2C+WNIXTmkfT1srcWbzU9RoREvpl6ADkVpXbFUzxVbK5SN3Clyqlgi0q1BWg5E&#xA;Cp9zirH4POPqwTyPo99A8QBjgkNoXlrWoQpcOgpTfmy4q0fOZ+qif9DX5lLcfqtbP1AP5q/WfTp/&#xA;s6+2Kq3kM18m6MaUraxmh6jb2xVPcVY15/16fQtHtNQS4FrAupWEV9Oyqyray3SJPy5Bgo9NjVu2&#xA;KsC1r80/MdpNfW+lNFdwzWmq3+n3bp9ZcfVVmmhCxwekfRMcH7tyj1YhWapXkq9Z0y5+tabaXXqx&#xA;z+vDHL68FfSfmoblHUk8WrUVPTFUTirHfNtyttqHlmZlZ1XVGBC0r8WnXi13I6VqcVVIvNqPdywN&#xA;pl5FFHy43bm2MT06cQszSfF25IPemKqI87RLY3V3PpV9b/Vl5+jIbUvIACTw9O4dNqftMMVT+zuY&#xA;7u0guowRHPGsqBtiA6hhWld98VVcVQmq6g2n2L3S2st4UKj0IDEJDyIFR6zxJtX+bFUpk84BbKK4&#xA;XSL6SWRiHs1Np6sYBPxMWuBFQ0/Zc9cVSrzl5mEuhvbJp12RciEvPW3CQkyr8MlZuZI/yFYYqzbF&#xA;XYqwnzz5vm0HzBp1s92LazvtJ1ZooyEBl1GGSxWzRHZWPPjNNxXo3cGgoqxrSPzQ8y3mqWlnL9Vt&#xA;rWO+srW6uJI3lDR3dpOwEksbKqTNcQonEolCw2KsCVXreKuxVi13qaWPna6Z4ZJeWlQMoj4VJS4n&#xA;onxsm7V27eJGKq8fnHnaSzto99HLGQEtWNp6klSAShW4aPbvycYqu/xnarHYtNYXcL3twlr6T+gW&#xA;iaV+CNJwmZeJNPsFjv064qyDFXYq7FUv8xW0915f1O2t7gWk89pPFDdMxQRO8bKshYbqFJrUYqs8&#xA;rT2lx5Y0iezg+q2ktlbvbWvIt6UbRKUj5HrxXauKpniqG1RGk0y7jSQQu8MirKTxCEoQGJ7U64qw&#xA;+xRksrdGcSssaBpAahiFA5A964qr4qgdMHmnTdPgsLXU7f6tbII4edoWbivSpEwqfoxVE/pHzl/1&#xA;dLX/AKQj/wBV8VS/W9O1PXrVLPXDpWq2kcgmS3vdLS4jWQAqHCSysoYKxFfc4qkv/Kt/L3/Vh8sf&#xA;9wC1/wCa8VZJZP5lsLSGysbywtLO3QR29tBp/pxRoooqoizBVA7ADFVb9I+cv+rpa/8ASEf+q+Ko&#xA;a5j16/urGTUr+GaGxna4SKK2MRZzBJBuxlfbjMT0xVHYqo3jTraTtAOU6xsYl61cKeP44qzDTWuH&#xA;061e5HG4aGMzLSlHKjkKfPFURiqSeb4ZJdJQRzrblbq2dmZivJVmUmMU6l+lO+KpRiqE1SxN9YS2&#xA;qyek0lOMnHlxKsGB41Fdx44qrfpHzl/1dLX/AKQj/wBV8Vd+kfOX/V0tf+kI/wDVfFUm1vy2deuI&#xA;7nXLXRNVuIk9OKa+0iK5dUqW4q0sjkLUk0xVAQ/l7ocMqTQ6J5ajljYPHImg2ysrKahlIeoIOKso&#xA;/SPnL/q6Wv8A0hH/AKr4q79I+cv+rpa/9IR/6r4qh4rfU5NUk1HUbuO5neBLdRFD6Kqsbu/d5Kms&#xA;mKo3FVjS38dzZGyTm7XUCyilaQtIBKfoSuKs1xV2KuxVLPNMVlN5Y1eK/mNtYyWVwt3cKpcxxNEw&#xA;kcKASSq1NKYqqeX7m8utB025voBa3s9rBJdWwRoxHK8as8fBqsvFiRQ7jFUfiqE1dYX0q9WdzHA0&#xA;EolkAqVQoeTUHWgxViGnrEthbLC3OJYkEbkULKFFDT3GKojFXYq7FXYq7FXYq7FXYql+p6Lbai0b&#xA;Sz3UDRVCm1uZ7cEN15LE6q3T9obdsjKNt2LOYchE+8A/ell15TnW3m+o63qdvMUb0y1wJlDU2r9Y&#xA;SbauR8PzLb+bvnCB+Ff7khlFlYfmJYWNuYtTsdZKxp6kF9E9vITxFaXVuXX6TbnGpDraePBLnGUP&#xA;cb+w/wDFMb/MH84NV8o6Za3d3oMtrc/WVjuLa4/eQTxMr1+q3kDNGrhgppKoPGvw5XlzmI5Obouy&#xA;455ECdiunMe+J/R80/uHurzyNpdxr97byX8s1pO89iOVu0zTq8ccZBkqu4TnXfrtl0Ca3dbqYxGQ&#xA;iIIiO/n8XZJodirsVdirsVdirsVdirsVdiqm8V5Lc2ItZRE63du8hLcaxLIDIu38y1FO+Ks2xV2K&#xA;uxVLPNMljH5Y1eTUI2msEsrhruGM0d4RExkVTUUJWoG+Kqnl+PUotB02PVGLaklrAt8xIYmcRqJT&#xA;UbH469MVR+KoXVmgXSrxrhDJAsEpmQGhZAh5AGo6jFWH2DQtY2zQKUhMSGJDuQpUcQevQYqiMVdi&#xA;rsVdirsVdirsVdirsVQ+oIklhcxyP6aPE6vIRUKCpBantirL9Ijji0qyjjkEsaQRKkoFAyhAA1N+&#xA;vXFUo1jyNo+s+Y7fWdV5XiWlnNZ2+nS0a2U3FRLNxI+20Z4fLK5YwTZcvFrJ48ZhHayDfXbkP0pD&#xA;5m8g+S9L0iJrG0m0w+vaQRHTppIBz9REieSMN6UhU0PJ1Y4+FEctknX5ZfXU/wCsL/aPgl40fzTD&#xA;tbeYPWA6fX7SKY/SbdrOuPDLv/H2I8bCeeOv6siPv4kJY2n5jp5iZ73UNNm0IqgMcdvLHLUfa9Nf&#xA;UfjXxaRvlgAnxbkU2ZJ6U4vTGYye8V936AynLXAdirsVdirsVdirsVdiqHubeCefT1mnFuqXtrIj&#xA;EcuTpMrLH1H2yONcVZ1irsVdiqXeY7lrXy9ql0tut40FpPKLRxyWUpEzemy0NQ9KUxVry1ax2nlz&#xA;SrWO5W9jt7O3iS8jNUmCRKolUgtUPTkN8VTLFUNqjtHpl3IkYmdIZGWIjkHIQkKR3r0xVh9i7PZW&#xA;7sgiZo0LRgUCkqDxA7UxVXxV2KuxV2KuxV2KuxV2KuxVD3/o/Ubn16mD0n9UL14cTyp9GKsw0n6u&#xA;dKszbgi39CL0Q32uHAca+9MVRWKpJ5vmki0lDHAtwWurZGVlLcVaZQZBToU617YqlGKuxV2KuxV2&#xA;KuxV2KuxV2KuxVQuDYi4sPrgcp9dtvS4dfW9VfSr7c6VxVnOKuxV2KoDzA2proOpNpVf0oLWc2FA&#xA;pP1j029LZ/h+3T7W2KqflZbBfLGkLpzSPp62VuLN5qeo0IiX0y9AByK0rtiqZ4q7FUrh8r+XYLuW&#xA;8h063S5m5erKI15NzNWr8ziq2Dyn5Zt7aa2h0y3jguABPGI1o9OlcVc3lHyw1kti2l2xtEf1Fh9N&#xA;eIehHKnjvirp/KflmeOCObTLd0tV426mNaINth92Kqknlry/LfLfyafA14lOE5jXkKdN8VWw+V/L&#xA;sF3LeQ6dbpczcvVlEa8m5mrV+ZxVbB5T8s29tNbQ6ZbxwXAAnjEa0enSuKubyj5YayWxbS7Y2iP6&#xA;iw+mvEPQjlTx3xVu48qeWrlLdJ9Mt5EtVCW4aNfgUUAC/cMVXyeWvL8t8t/Jp8DXiU4TmNeQp03x&#xA;VbF5X8uQ3M9zHptus9yHW4kEa1cSHk4bbueuKplFFHFEkUShI41Cog2AUCgAxVdiqy4t4LiB4J41&#xA;lhkUrJGwqrA9QQcVSyPyn5ZjspbJNMt1tJiGlhEa8WIIIJH+xGKuk8o+WJLSKzk0u2a1gJMMJjXi&#xA;pYkmnzJxVdN5W8uTSQSy6bbvJaqq27GNaoENVA+WKrv8NeX/ANI/pL9HwfXv+Wj015/Z4df9XbFV&#xA;lv5U8tW7zPBplvG9yrJORGvxq27A/PFWo/KflmOylsk0y3W0mIaWERrxYgggkf7EYq6Tyj5YktIr&#xA;OTS7ZrWAkwwmNeKliSafMnFV03lby5NJBLLptu8lqqrbsY1qgQ1UD5Yqu/w15f8A0j+kv0fB9e/5&#xA;aPTXn9nh1/1dsVWW/lTy1bvM8GmW8b3Ksk5Ea/GrbsD88VX2nlny/ZxiK1063hjEizBVjUUkQgq4&#xA;26gqMVTLFXYq7FUv8xW0915f1O2t7gWk89pPFDdMxQRO8bKshYbqFJrUYqk2gfpX65Z/o6n+Efq8&#xA;f6O4+nT0PQX0acv33h9rfFVaw/xl/uT+t/76k/Rv9x/eb8Ps/R9rFVOD/G/6CufV/wCOr6q/V/8A&#xA;ef8Au9uXT4PHriq69/xp+hrL6r/x06t9c/uOlTx+18H/AAOKr9R/xf8ApGx+pf7xenF9d/uPt8j6&#xA;n2vi+zT7P0YqrRf4o/xK/qf8cTfh/dfybdP3n2sVULD/ABl/uT+t/wC+pP0b/cf3m/D7P0faxVTg&#xA;/wAb/oK59X/jq+qv1f8A3n/u9uXT4PHriq69/wAafoay+q/8dOrfXP7jpU8ftfB/wOKr9R/xf+kb&#xA;H6l/vF6cX13+4+3yPqfa+L7NPs/RiqtF/ij/ABK/qf8AHE34f3X8m3T959rFVCw/xl/uT+t/76k/&#xA;Rv8Acf3m/D7P0faxVbD/AI0/w/P6v/HY9Yeh/cf3Xw16fu/5uu+Kuvf8afoay+q/8dOrfXP7jpU8&#xA;ftfB/wADiqrff4t/Sun/AFX/AI5/GH6//c/a5n1ftfF9n+X6MVVIv8Uf4lf1P+OJvw/uv5Nun7z7&#xA;WKqFh/jL/cn9b/31J+jf7j+834fZ+j7WKrYf8af4fn9X/jsesPQ/uP7r4a9P3f8AN13xV17/AI0/&#xA;Q1l9V/46dW+uf3HSp4/a+D/gcVVb7/Fv6V0/6r/xz+MP1/8Auftcz6v2vi+z/L9GKqkX+KP8Sv6n&#xA;/HE34f3X8m3T959rFVCw/wAZf7k/rf8AvqT9G/3H95vw+z9H2sVWw/40/wAPz+r/AMdj1h6H9x/d&#xA;fDXp+7/m674qtvv8b/omw+q/8dD4/r3+8/j8H2vh6fy4qr33+Lf0rp/1X/jn8Yfr/wDc/a5n1ftf&#xA;F9n+X6MVVIv8Uf4lf1P+OJvw/uv5Nun7z7WKobTP8aenqP177fov+j/7j+934/Z+j7W2Kuh/xp/h&#xA;+f1f+Ox6w9D+4/uvhr0/d/zdd8VW33+N/wBE2H1X/jofH9e/3n8fg+18PT+XFVe+/wAW/pXT/qv/&#xA;ABz+MP1/+5+1zPq/a+L7P8v0YqqRf4o/xK/qf8cTfh/dfybdP3n2sVSTUf8AEX+GfMv+Iuf6P/Rt&#xA;1x9P0OfH0n5ceH7XHpyxV//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2015-05-05T11:55:49+08:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-05-05T11:55:49+08:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>189.707284</stDim:w>
            <stDim:h>85.536898</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DerivedFrom rdf:parseType="Resource"/>
         <xmpMM:DocumentID>xmp.did:4225CD9DDAF2E4119C4EDBD9E4BCF966</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:4225CD9DDAF2E4119C4EDBD9E4BCF966</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:4225CD9DDAF2E4119C4EDBD9E4BCF966</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4225CD9DDAF2E4119C4EDBD9E4BCF966</stEvt:instanceID>
                  <stEvt:when>2015-05-05T11:55:49+08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -242.467 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 242.467 li
537.753 242.467 li
537.753 0 li
cp
clp
535.753 241.467 mo
529.953 241.467 li
529.953 240.467 li
521.952 240.467 li
521.952 241.467 li
515.953 241.467 li
515.953 240.467 li
507.953 240.467 li
507.953 241.467 li
501.952 241.467 li
501.952 240.467 li
493.953 240.467 li
493.953 241.467 li
487.953 241.467 li
487.953 240.467 li
479.952 240.467 li
479.952 241.467 li
473.953 241.467 li
473.953 240.467 li
465.953 240.467 li
465.953 241.467 li
459.953 241.467 li
459.953 240.467 li
451.953 240.467 li
451.953 241.467 li
445.953 241.467 li
445.953 240.467 li
437.953 240.467 li
437.953 241.467 li
431.952 241.467 li
431.952 240.467 li
423.953 240.467 li
423.953 241.467 li
417.953 241.467 li
417.953 240.467 li
409.953 240.467 li
409.953 241.467 li
403.953 241.467 li
403.953 240.467 li
395.953 240.467 li
395.953 241.467 li
389.953 241.467 li
389.953 240.467 li
381.953 240.467 li
381.953 241.467 li
375.953 241.467 li
375.953 240.467 li
367.953 240.467 li
367.953 241.467 li
361.953 241.467 li
361.953 240.467 li
353.953 240.467 li
353.953 241.467 li
347.953 241.467 li
347.953 240.467 li
339.953 240.467 li
339.953 241.467 li
333.953 241.467 li
333.953 240.467 li
325.953 240.467 li
325.953 241.467 li
319.953 241.467 li
319.953 240.467 li
311.953 240.467 li
311.953 241.467 li
305.953 241.467 li
305.953 240.467 li
297.953 240.467 li
297.953 241.467 li
291.953 241.467 li
291.953 240.467 li
283.953 240.467 li
283.953 241.467 li
277.953 241.467 li
277.953 240.467 li
269.953 240.467 li
269.953 241.467 li
263.953 241.467 li
263.953 240.467 li
255.953 240.467 li
255.953 241.467 li
249.953 241.467 li
249.953 240.467 li
241.953 240.467 li
241.953 241.467 li
235.953 241.467 li
235.953 240.467 li
227.953 240.467 li
227.953 241.467 li
221.953 241.467 li
221.953 240.467 li
213.953 240.467 li
213.953 241.467 li
207.953 241.467 li
207.953 240.467 li
199.953 240.467 li
199.953 241.467 li
193.953 241.467 li
193.953 240.467 li
185.953 240.467 li
185.953 241.467 li
179.953 241.467 li
179.953 240.467 li
171.953 240.467 li
171.953 241.467 li
165.953 241.467 li
165.953 240.467 li
157.953 240.467 li
157.953 241.467 li
151.953 241.467 li
151.953 240.467 li
143.953 240.467 li
143.953 241.467 li
137.953 241.467 li
137.953 240.467 li
129.953 240.467 li
129.953 241.467 li
123.953 241.467 li
123.953 240.467 li
115.953 240.467 li
115.953 241.467 li
109.953 241.467 li
109.953 240.467 li
101.953 240.467 li
101.953 241.467 li
95.9532 241.467 li
95.9532 240.467 li
87.9532 240.467 li
87.9532 241.467 li
81.9531 241.467 li
81.9531 240.467 li
73.9531 240.467 li
73.9531 241.467 li
67.9531 241.467 li
67.9531 240.467 li
59.9531 240.467 li
59.9531 241.467 li
53.9532 241.467 li
53.9532 240.467 li
45.9532 240.467 li
45.9532 241.467 li
39.9532 241.467 li
39.9532 240.467 li
31.9532 240.467 li
31.9532 241.467 li
25.9533 241.467 li
25.9533 240.467 li
17.9533 240.467 li
17.9533 241.467 li
11.9533 241.467 li
11.9533 240.467 li
3.95328 240.467 li
3.95328 241.467 li
.999964 241.467 li
.999964 238.42 li
2.00006 238.42 li
2.00006 230.42 li
.999964 230.42 li
.999964 224.42 li
2.00006 224.42 li
2.00006 216.42 li
.999964 216.42 li
.999964 210.42 li
2.00006 210.42 li
2.00006 202.42 li
.999964 202.42 li
.999964 196.42 li
2.00006 196.42 li
2.00006 188.42 li
.999964 188.42 li
.999964 182.42 li
2.00006 182.42 li
2.00006 174.42 li
.999964 174.42 li
.999964 168.42 li
2.00006 168.42 li
2.00006 160.42 li
.999964 160.42 li
.999964 154.42 li
2.00006 154.42 li
2.00006 146.42 li
.999964 146.42 li
.999964 140.42 li
2.00006 140.42 li
2.00006 132.42 li
.999964 132.42 li
.999964 126.42 li
2.00006 126.42 li
2.00006 118.42 li
.999964 118.42 li
.999964 112.42 li
2.00006 112.42 li
2.00006 104.42 li
.999964 104.42 li
.999964 98.4202 li
2.00006 98.4202 li
2.00006 90.4202 li
.999964 90.4202 li
.999964 84.4202 li
2.00006 84.4202 li
2.00006 76.4202 li
.999964 76.4202 li
.999964 70.4202 li
2.00006 70.4202 li
2.00006 62.4202 li
.999964 62.4202 li
.999964 56.4203 li
2.00006 56.4203 li
2.00006 48.4203 li
.999964 48.4203 li
.999964 42.4202 li
2.00006 42.4202 li
2.00006 34.4203 li
.999964 34.4203 li
.999964 28.4202 li
2.00006 28.4202 li
2.00006 20.4202 li
.999964 20.4202 li
.999964 14.4203 li
.999964 15.021 li
8.99994 15.021 li
8.99994 14.021 li
15 14.021 li
15 15.021 li
23 15.021 li
23 14.021 li
29 14.021 li
29 15.021 li
37 15.021 li
37 14.021 li
43 14.021 li
43 15.021 li
51 15.021 li
51 14.021 li
56.9999 14.021 li
56.9999 15.021 li
64.9999 15.021 li
64.9999 14.021 li
71 14.021 li
71 15.021 li
78.9999 15.021 li
78.9999 14.021 li
85 14.021 li
85 15.021 li
93 15.021 li
93 14.021 li
99 14.021 li
99 15.021 li
107 15.021 li
107 14.021 li
113 14.021 li
113 15.021 li
121 15.021 li
121 14.021 li
127 14.021 li
127 15.021 li
135 15.021 li
135 14.021 li
141 14.021 li
141 15.021 li
149 15.021 li
149 14.021 li
155 14.021 li
155 15.021 li
163 15.021 li
163 14.021 li
169 14.021 li
169 15.021 li
177 15.021 li
177 14.021 li
183 14.021 li
183 15.021 li
191 15.021 li
191 14.021 li
197 14.021 li
197 15.021 li
205 15.021 li
205 14.021 li
211 14.021 li
211 15.021 li
219 15.021 li
219 14.021 li
225 14.021 li
225 15.021 li
233 15.021 li
233 14.021 li
239 14.021 li
239 15.021 li
247 15.021 li
247 14.021 li
253 14.021 li
253 15.021 li
261 15.021 li
261 14.021 li
267 14.021 li
267 15.021 li
275 15.021 li
275 14.021 li
281 14.021 li
281 15.021 li
289 15.021 li
289 14.021 li
295 14.021 li
295 15.021 li
303 15.021 li
303 14.021 li
309 14.021 li
309 15.021 li
317 15.021 li
317 14.021 li
323 14.021 li
323 15.021 li
331 15.021 li
331 14.021 li
337 14.021 li
337 15.021 li
345 15.021 li
345 14.021 li
351 14.021 li
351 15.021 li
359 15.021 li
359 14.021 li
365 14.021 li
365 15.021 li
373 15.021 li
373 14.021 li
379 14.021 li
379 15.021 li
386.999 15.021 li
386.999 14.021 li
393 14.021 li
393 15.021 li
401 15.021 li
401 14.021 li
406.999 14.021 li
406.999 15.021 li
414.999 15.021 li
414.999 14.021 li
420.999 14.021 li
420.999 15.021 li
428.999 15.021 li
428.999 14.021 li
434.999 14.021 li
434.999 15.021 li
442.999 15.021 li
442.999 14.021 li
448.999 14.021 li
448.999 15.021 li
456.999 15.021 li
456.999 14.021 li
462.999 14.021 li
462.999 15.021 li
470.999 15.021 li
470.999 14.021 li
476.999 14.021 li
476.999 15.021 li
484.999 15.021 li
484.999 14.021 li
490.999 14.021 li
490.999 15.021 li
498.999 15.021 li
498.999 14.021 li
504.999 14.021 li
504.999 15.021 li
512.999 15.021 li
512.999 14.021 li
518.999 14.021 li
518.999 15.021 li
526.999 15.021 li
526.999 14.021 li
532.999 14.021 li
532.999 15.021 li
535.753 15.021 li
535.753 18.2674 li
536.753 18.2674 li
536.753 24.2673 li
535.753 24.2673 li
535.753 32.2673 li
536.753 32.2673 li
536.753 38.2673 li
535.753 38.2673 li
535.753 46.2673 li
536.753 46.2673 li
536.753 52.2673 li
535.753 52.2673 li
535.753 60.2673 li
536.753 60.2673 li
536.753 66.2674 li
535.753 66.2674 li
535.753 74.2673 li
536.753 74.2673 li
536.753 80.2673 li
535.753 80.2673 li
535.753 88.2672 li
536.753 88.2672 li
536.753 94.2673 li
535.753 94.2673 li
535.753 102.267 li
536.753 102.267 li
536.753 108.267 li
535.753 108.267 li
535.753 116.267 li
536.753 116.267 li
536.753 122.267 li
535.753 122.267 li
535.753 130.267 li
536.753 130.267 li
536.753 136.267 li
535.753 136.267 li
535.753 144.267 li
536.753 144.267 li
536.753 150.267 li
535.753 150.267 li
535.753 158.267 li
536.753 158.267 li
536.753 164.267 li
535.753 164.267 li
535.753 172.267 li
536.753 172.267 li
536.753 178.267 li
535.753 178.267 li
535.753 186.267 li
536.753 186.267 li
536.753 192.267 li
535.753 192.267 li
535.753 200.267 li
536.753 200.267 li
536.753 206.267 li
535.753 206.267 li
535.753 214.267 li
536.753 214.267 li
536.753 220.267 li
535.753 220.267 li
535.753 228.267 li
536.753 228.267 li
536.753 234.267 li
535.753 234.267 li
535.753 234.267 li
535.753 241.467 li
466.437 220.253 mo
466.437 221.253 li
466.919 221.253 li
467.182 221.253 467.44 221.146 467.626 220.96 cv
467.812 220.774 467.919 220.516 467.919 220.253 cv
467.919 212.735 li
466.919 212.735 li
466.919 206.735 li
467.919 206.735 li
467.919 198.735 li
466.919 198.735 li
466.919 192.735 li
467.919 192.735 li
467.919 184.735 li
466.919 184.735 li
466.919 178.735 li
467.919 178.735 li
467.919 170.735 li
466.919 170.735 li
466.919 164.735 li
467.919 164.735 li
467.919 156.735 li
466.919 156.735 li
466.919 150.735 li
467.919 150.735 li
467.919 145.843 li
467.919 145.579 467.812 145.322 467.626 145.136 cv
467.44 144.949 467.182 144.843 466.919 144.843 cv
463.811 144.843 li
463.811 145.843 li
457.811 145.843 li
457.811 144.843 li
449.811 144.843 li
449.811 145.843 li
443.811 145.843 li
443.811 144.843 li
435.811 144.843 li
435.811 145.843 li
429.811 145.843 li
429.811 144.843 li
421.811 144.843 li
421.811 145.843 li
415.811 145.843 li
415.811 144.843 li
407.811 144.843 li
407.811 145.843 li
401.811 145.843 li
401.811 144.843 li
393.811 144.843 li
393.811 145.843 li
387.812 145.843 li
387.812 144.843 li
379.812 144.843 li
379.812 145.843 li
373.811 145.843 li
373.811 144.843 li
365.812 144.843 li
365.812 145.843 li
359.811 145.843 li
359.811 144.843 li
351.811 144.843 li
351.811 145.843 li
345.811 145.843 li
345.811 144.843 li
337.811 144.843 li
337.811 145.843 li
331.812 145.843 li
331.812 144.843 li
323.811 144.843 li
323.811 145.843 li
317.812 145.843 li
317.812 144.843 li
309.812 144.843 li
309.812 145.843 li
303.811 145.843 li
303.811 144.843 li
295.811 144.843 li
295.811 145.843 li
289.811 145.843 li
289.811 144.843 li
281.811 144.843 li
281.548 144.843 281.291 144.949 281.104 145.136 cv
280.918 145.322 280.812 145.579 280.812 145.843 cv
280.812 146.878 li
281.811 146.878 li
281.811 152.878 li
280.812 152.878 li
280.812 160.878 li
281.811 160.878 li
281.811 166.878 li
280.812 166.878 li
280.812 174.878 li
281.811 174.878 li
281.811 180.878 li
280.812 180.878 li
280.812 185.643 li
269.468 183.375 li
269.468 179.356 li
270.709 177.703 271.828 176.26 272.825 175.026 cv
272.89 174.961 272.921 174.832 272.921 174.639 cv
272.921 174.444 272.856 174.315 272.728 174.251 cv
272.534 174.122 272.405 173.992 272.341 173.863 cv
272.341 173.842 272.333 173.831 272.319 173.831 cv
272.29 173.831 272.231 173.874 272.145 173.96 cv
272.081 174.024 271.985 174.09 271.855 174.154 cv
271.829 174.206 271.793 174.232 271.746 174.232 cv
271.677 174.232 271.584 174.173 271.468 174.057 cv
271.274 173.863 271.081 173.767 270.886 173.767 cv
270.757 173.767 270.661 173.831 270.597 173.96 cv
270.22 174.43 269.844 174.895 269.468 175.354 cv
269.468 160.846 li
247.769 160.846 li
247.769 176.501 li
244.299 175.441 240.571 174.483 236.426 173.694 cv
236.426 170.736 li
235.426 170.736 li
235.426 164.736 li
236.426 164.736 li
236.426 156.736 li
235.426 156.736 li
235.426 150.736 li
236.426 150.736 li
236.426 145.843 li
236.426 145.579 236.319 145.322 236.133 145.136 cv
235.947 144.949 235.689 144.843 235.426 144.843 cv
232.319 144.843 li
232.319 145.843 li
226.319 145.843 li
226.319 144.843 li
218.319 144.843 li
218.319 145.843 li
212.319 145.843 li
212.319 144.843 li
204.319 144.843 li
204.319 145.843 li
198.319 145.843 li
198.319 144.843 li
197.542 144.843 li
197.542 129.212 li
197.542 128.949 197.435 128.691 197.249 128.505 cv
197.062 128.319 196.805 128.212 196.541 128.212 cv
142.068 128.212 li
164.82 103.098 li
232.396 103.098 li
232.396 75.291 li
314.005 75.291 li
314.268 75.291 314.526 75.1842 314.712 74.9981 cv
314.898 74.8119 315.005 74.5544 315.005 74.291 cv
315.005 61.8663 li
325.641 74.291 li
316.896 74.291 li
316.896 103.098 li
350.301 103.098 li
372.655 129.21 li
372.655 129.21 li
372.655 126.73 372.501 124.249 372.205 121.782 cv
373.197 121.667 li
373.176 121.482 li
373.174 121.465 li
373.158 121.343 373.142 121.209 373.123 121.066 cv
373.124 121.07 li
373.124 121.07 li
373.054 120.528 372.977 119.988 372.894 119.451 cv
372.727 118.373 372.535 117.3 372.317 116.231 cv
371.445 111.954 370.167 107.749 368.543 103.682 cv
368.465 103.487 368.386 103.292 368.307 103.098 cv
390.017 103.098 li
390.017 74.291 li
348.085 74.291 li
344.309 70.9173 340.255 68.0164 336.02 65.7076 cv
329.336 62.0644 322.196 59.8964 315.005 59.7112 cv
315.005 47.105 li
315.005 46.8416 314.898 46.5841 314.712 46.3979 cv
314.526 46.2117 314.268 46.1049 314.005 46.1049 cv
203.23 46.1049 li
202.967 46.1049 202.709 46.2117 202.523 46.3979 cv
202.337 46.5841 202.231 46.8416 202.231 47.105 cv
202.231 47.105 li
202.231 59.7103 li
189.804 60.0026 177.524 65.5717 167.205 74.291 cv
159.274 74.291 li
159.274 82.043 li
153.623 88.4117 148.91 95.7778 145.576 103.663 cv
143.856 107.732 142.503 111.94 141.58 116.22 cv
141.349 117.29 141.145 118.364 140.969 119.442 cv
140.881 119.981 140.8 120.521 140.726 121.062 cv
140.726 121.063 li
140.707 121.198 140.69 121.333 140.672 121.465 cv
140.672 121.47 li
140.648 121.658 li
141.64 121.784 li
141.368 123.92 141.21 126.065 141.172 128.212 cv
85.7661 128.212 li
85.5028 128.212 85.2451 128.319 85.059 128.505 cv
84.8728 128.691 84.7662 128.949 84.7662 129.212 cv
84.7662 129.212 li
84.7662 144.843 li
78.3189 144.843 li
78.3189 145.843 li
72.3188 145.843 li
72.3188 144.843 li
64.3189 144.843 li
64.3189 145.843 li
58.3188 145.843 li
58.3188 144.843 li
50.3188 144.843 li
50.0555 144.843 49.798 144.949 49.6117 145.136 cv
49.4255 145.322 49.3189 145.579 49.3189 145.843 cv
49.3189 146.877 li
50.3188 146.877 li
50.3188 152.877 li
49.3189 152.877 li
49.3189 160.877 li
50.3188 160.877 li
50.3188 166.877 li
49.3189 166.877 li
49.3189 174.877 li
50.3188 174.877 li
50.3188 180.877 li
49.3189 180.877 li
49.3189 188.877 li
50.3188 188.877 li
50.3188 194.877 li
49.3189 194.877 li
49.3189 202.877 li
50.3188 202.877 li
50.3188 208.877 li
49.3189 208.877 li
49.3189 216.877 li
50.3188 216.877 li
50.3188 220.253 li
52.943 220.253 li
52.943 221.253 li
60.943 221.253 li
60.943 220.253 li
66.943 220.253 li
66.943 221.253 li
74.943 221.253 li
74.943 220.253 li
80.9429 220.253 li
80.9429 221.253 li
88.9429 221.253 li
88.9429 220.253 li
94.943 220.253 li
94.943 221.253 li
102.943 221.253 li
102.943 220.253 li
108.943 220.253 li
108.943 221.253 li
116.943 221.253 li
116.943 220.253 li
122.943 220.253 li
122.943 221.253 li
130.943 221.253 li
130.943 220.253 li
136.943 220.253 li
136.943 221.253 li
144.943 221.253 li
144.943 220.253 li
150.943 220.253 li
150.943 221.253 li
158.943 221.253 li
158.943 220.253 li
164.943 220.253 li
164.943 221.253 li
172.943 221.253 li
172.943 220.253 li
178.943 220.253 li
178.943 221.253 li
186.943 221.253 li
186.943 220.253 li
192.943 220.253 li
192.943 221.253 li
200.943 221.253 li
200.943 220.253 li
206.943 220.253 li
206.943 221.253 li
214.943 221.253 li
214.943 220.253 li
220.943 220.253 li
220.943 221.253 li
228.943 221.253 li
228.943 220.253 li
234.426 220.253 li
234.943 220.253 li
234.943 221.253 li
235.426 221.253 li
235.689 221.253 235.947 221.146 236.133 220.96 cv
236.319 220.774 236.426 220.516 236.426 220.253 cv
236.426 212.736 li
235.426 212.736 li
235.426 206.736 li
236.426 206.736 li
236.426 198.736 li
235.426 198.736 li
235.426 192.736 li
236.426 192.736 li
236.426 184.736 li
235.426 184.736 li
235.426 178.736 li
236.426 178.736 li
236.426 176.767 li
247.769 179.036 li
247.769 193.422 li
269.468 193.422 li
269.468 188.641 li
269.521 188.634 269.574 188.617 269.628 188.59 cv
269.692 188.525 269.821 188.429 270.015 188.3 cv
270.208 188.235 270.208 188.041 270.015 187.719 cv
270.272 187.589 270.435 187.46 270.499 187.331 cv
270.499 187.137 li
270.692 187.072 270.821 186.976 270.886 186.847 cv
270.596 186.266 270.248 185.569 269.84 184.754 cv
273.286 186.056 276.872 187.302 280.812 188.406 cv
280.812 188.878 li
281.811 188.878 li
281.811 194.878 li
280.812 194.878 li
280.812 202.878 li
281.811 202.878 li
281.811 208.878 li
280.812 208.878 li
280.812 216.878 li
281.811 216.878 li
281.811 220.253 li
284.437 220.253 li
284.437 221.253 li
292.437 221.253 li
292.437 220.253 li
298.437 220.253 li
298.437 221.253 li
306.437 221.253 li
306.437 220.253 li
312.437 220.253 li
312.437 221.253 li
320.437 221.253 li
320.437 220.253 li
326.437 220.253 li
326.437 221.253 li
334.437 221.253 li
334.437 220.253 li
340.437 220.253 li
340.437 221.253 li
348.437 221.253 li
348.437 220.253 li
354.437 220.253 li
354.437 221.253 li
362.437 221.253 li
362.437 220.253 li
368.437 220.253 li
368.437 221.253 li
376.437 221.253 li
376.437 220.253 li
382.437 220.253 li
382.437 221.253 li
390.437 221.253 li
390.437 220.253 li
396.437 220.253 li
396.437 221.253 li
404.437 221.253 li
404.437 220.253 li
410.437 220.253 li
410.437 221.253 li
418.437 221.253 li
418.437 220.253 li
424.437 220.253 li
424.437 221.253 li
432.437 221.253 li
432.437 220.253 li
438.436 220.253 li
438.436 221.253 li
446.436 221.253 li
446.436 220.253 li
452.437 220.253 li
452.437 221.253 li
460.436 221.253 li
460.436 220.253 li
465.919 220.253 li
466.437 220.253 li
202.231 74.291 mo
190.916 74.291 li
202.231 61.802 li
202.231 74.291 li
202.231 74.291 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
15 15.021 mo
23 15.021 li
23 13.0209 li
15 13.0209 li
15 15.021 li
29 15.021 mo
37 15.021 li
37 13.0209 li
29 13.0209 li
29 15.021 li
43 15.021 mo
51 15.021 li
51 13.0209 li
43 13.0209 li
43 15.021 li
56.9999 15.021 mo
64.9999 15.021 li
64.9999 13.0209 li
56.9999 13.0209 li
56.9999 15.021 li
71 15.021 mo
78.9999 15.021 li
78.9999 13.0209 li
71 13.0209 li
71 15.021 li
85 15.021 mo
93 15.021 li
93 13.0209 li
85 13.0209 li
85 15.021 li
99 15.021 mo
107 15.021 li
107 13.0209 li
99 13.0209 li
99 15.021 li
113 15.021 mo
121 15.021 li
121 13.0209 li
113 13.0209 li
113 15.021 li
127 15.021 mo
135 15.021 li
135 13.0209 li
127 13.0209 li
127 15.021 li
141 15.021 mo
149 15.021 li
149 13.0209 li
141 13.0209 li
141 15.021 li
155 15.021 mo
163 15.021 li
163 13.0209 li
155 13.0209 li
155 15.021 li
169 15.021 mo
177 15.021 li
177 13.0209 li
169 13.0209 li
169 15.021 li
183 15.021 mo
191 15.021 li
191 13.0209 li
183 13.0209 li
183 15.021 li
197 15.021 mo
205 15.021 li
205 13.0209 li
197 13.0209 li
197 15.021 li
211 15.021 mo
219 15.021 li
219 13.0209 li
211 13.0209 li
211 15.021 li
225 15.021 mo
233 15.021 li
233 13.0209 li
225 13.0209 li
225 15.021 li
239 15.021 mo
247 15.021 li
247 13.0209 li
239 13.0209 li
239 15.021 li
253 15.021 mo
261 15.021 li
261 13.0209 li
253 13.0209 li
253 15.021 li
267 15.021 mo
275 15.021 li
275 13.0209 li
267 13.0209 li
267 15.021 li
281 15.021 mo
289 15.021 li
289 13.0209 li
281 13.0209 li
281 15.021 li
295 15.021 mo
303 15.021 li
303 13.0209 li
295 13.0209 li
295 15.021 li
309 15.021 mo
317 15.021 li
317 13.0209 li
309 13.0209 li
309 15.021 li
323 15.021 mo
331 15.021 li
331 13.0209 li
323 13.0209 li
323 15.021 li
337 15.021 mo
345 15.021 li
345 13.0209 li
337 13.0209 li
337 15.021 li
351 15.021 mo
359 15.021 li
359 13.0209 li
351 13.0209 li
351 15.021 li
365 15.021 mo
373 15.021 li
373 13.0209 li
365 13.0209 li
365 15.021 li
379 15.021 mo
386.999 15.021 li
386.999 13.0209 li
379 13.0209 li
379 15.021 li
393 15.021 mo
401 15.021 li
401 13.0209 li
393 13.0209 li
393 15.021 li
406.999 15.021 mo
414.999 15.021 li
414.999 13.0209 li
406.999 13.0209 li
406.999 15.021 li
420.999 15.021 mo
428.999 15.021 li
428.999 13.0209 li
420.999 13.0209 li
420.999 15.021 li
434.999 15.021 mo
442.999 15.021 li
442.999 13.0209 li
434.999 13.0209 li
434.999 15.021 li
448.999 15.021 mo
456.999 15.021 li
456.999 13.0209 li
448.999 13.0209 li
448.999 15.021 li
462.999 15.021 mo
470.999 15.021 li
470.999 13.0209 li
462.999 13.0209 li
462.999 15.021 li
476.999 15.021 mo
484.999 15.021 li
484.999 13.0209 li
476.999 13.0209 li
476.999 15.021 li
490.999 15.021 mo
498.999 15.021 li
498.999 13.0209 li
490.999 13.0209 li
490.999 15.021 li
504.999 15.021 mo
512.999 15.021 li
512.999 13.0209 li
504.999 13.0209 li
504.999 15.021 li
518.999 15.021 mo
526.999 15.021 li
526.999 13.0209 li
518.999 13.0209 li
518.999 15.021 li
532.999 15.021 mo
535.753 15.021 li
535.753 18.2674 li
537.753 18.2674 li
537.753 14.021 li
537.753 13.7577 537.646 13.5 537.46 13.3139 cv
537.274 13.1277 537.016 13.0209 536.753 13.0209 cv
532.999 13.0209 li
532.999 15.021 li
535.753 24.2673 mo
535.753 32.2673 li
537.753 32.2673 li
537.753 24.2673 li
535.753 24.2673 li
535.753 38.2673 mo
535.753 46.2673 li
537.753 46.2673 li
537.753 38.2673 li
535.753 38.2673 li
535.753 52.2673 mo
535.753 60.2673 li
537.753 60.2673 li
537.753 52.2673 li
535.753 52.2673 li
535.753 66.2674 mo
535.753 74.2673 li
537.753 74.2673 li
537.753 66.2674 li
535.753 66.2674 li
535.753 80.2673 mo
535.753 88.2672 li
537.753 88.2672 li
537.753 80.2673 li
535.753 80.2673 li
535.753 94.2673 mo
535.753 102.267 li
537.753 102.267 li
537.753 94.2673 li
535.753 94.2673 li
535.753 108.267 mo
535.753 116.267 li
537.753 116.267 li
537.753 108.267 li
535.753 108.267 li
535.753 122.267 mo
535.753 130.267 li
537.753 130.267 li
537.753 122.267 li
535.753 122.267 li
535.753 136.267 mo
535.753 144.267 li
537.753 144.267 li
537.753 136.267 li
535.753 136.267 li
535.753 150.267 mo
535.753 158.267 li
537.753 158.267 li
537.753 150.267 li
535.753 150.267 li
535.753 164.267 mo
535.753 172.267 li
537.753 172.267 li
537.753 164.267 li
535.753 164.267 li
535.753 178.267 mo
535.753 186.267 li
537.753 186.267 li
537.753 178.267 li
535.753 178.267 li
535.753 192.267 mo
535.753 200.267 li
537.753 200.267 li
537.753 192.267 li
535.753 192.267 li
535.753 206.267 mo
535.753 214.267 li
537.753 214.267 li
537.753 206.267 li
535.753 206.267 li
535.753 220.267 mo
535.753 228.267 li
537.753 228.267 li
537.753 220.267 li
535.753 220.267 li
535.753 234.267 mo
535.753 241.467 li
536.753 241.467 li
536.753 240.467 li
535.952 240.467 li
535.952 242.467 li
536.753 242.467 li
537.016 242.467 537.274 242.36 537.46 242.174 cv
537.646 241.988 537.753 241.73 537.753 241.467 cv
537.753 234.267 li
535.753 234.267 li
535.753 234.267 li
529.953 240.467 mo
521.952 240.467 li
521.952 242.467 li
529.953 242.467 li
529.953 240.467 li
515.953 240.467 mo
507.953 240.467 li
507.953 242.467 li
515.953 242.467 li
515.953 240.467 li
501.952 240.467 mo
493.953 240.467 li
493.953 242.467 li
501.952 242.467 li
501.952 240.467 li
487.953 240.467 mo
479.952 240.467 li
479.952 242.467 li
487.953 242.467 li
487.953 240.467 li
473.953 240.467 mo
465.953 240.467 li
465.953 242.467 li
473.953 242.467 li
473.953 240.467 li
459.953 240.467 mo
451.953 240.467 li
451.953 242.467 li
459.953 242.467 li
459.953 240.467 li
445.953 240.467 mo
437.953 240.467 li
437.953 242.467 li
445.953 242.467 li
445.953 240.467 li
431.952 240.467 mo
423.953 240.467 li
423.953 242.467 li
431.952 242.467 li
431.952 240.467 li
417.953 240.467 mo
409.953 240.467 li
409.953 242.467 li
417.953 242.467 li
417.953 240.467 li
403.953 240.467 mo
395.953 240.467 li
395.953 242.467 li
403.953 242.467 li
403.953 240.467 li
389.953 240.467 mo
381.953 240.467 li
381.953 242.467 li
389.953 242.467 li
389.953 240.467 li
375.953 240.467 mo
367.953 240.467 li
367.953 242.467 li
375.953 242.467 li
375.953 240.467 li
361.953 240.467 mo
353.953 240.467 li
353.953 242.467 li
361.953 242.467 li
361.953 240.467 li
347.953 240.467 mo
339.953 240.467 li
339.953 242.467 li
347.953 242.467 li
347.953 240.467 li
333.953 240.467 mo
325.953 240.467 li
325.953 242.467 li
333.953 242.467 li
333.953 240.467 li
319.953 240.467 mo
311.953 240.467 li
311.953 242.467 li
319.953 242.467 li
319.953 240.467 li
305.953 240.467 mo
297.953 240.467 li
297.953 242.467 li
305.953 242.467 li
305.953 240.467 li
291.953 240.467 mo
283.953 240.467 li
283.953 242.467 li
291.953 242.467 li
291.953 240.467 li
277.953 240.467 mo
269.953 240.467 li
269.953 242.467 li
277.953 242.467 li
277.953 240.467 li
263.953 240.467 mo
255.953 240.467 li
255.953 242.467 li
263.953 242.467 li
263.953 240.467 li
249.953 240.467 mo
241.953 240.467 li
241.953 242.467 li
249.953 242.467 li
249.953 240.467 li
235.953 240.467 mo
227.953 240.467 li
227.953 242.467 li
235.953 242.467 li
235.953 240.467 li
221.953 240.467 mo
213.953 240.467 li
213.953 242.467 li
221.953 242.467 li
221.953 240.467 li
207.953 240.467 mo
199.953 240.467 li
199.953 242.467 li
207.953 242.467 li
207.953 240.467 li
193.953 240.467 mo
185.953 240.467 li
185.953 242.467 li
193.953 242.467 li
193.953 240.467 li
179.953 240.467 mo
171.953 240.467 li
171.953 242.467 li
179.953 242.467 li
179.953 240.467 li
165.953 240.467 mo
157.953 240.467 li
157.953 242.467 li
165.953 242.467 li
165.953 240.467 li
151.953 240.467 mo
143.953 240.467 li
143.953 242.467 li
151.953 242.467 li
151.953 240.467 li
137.953 240.467 mo
129.953 240.467 li
129.953 242.467 li
137.953 242.467 li
137.953 240.467 li
123.953 240.467 mo
115.953 240.467 li
115.953 242.467 li
123.953 242.467 li
123.953 240.467 li
109.953 240.467 mo
101.953 240.467 li
101.953 242.467 li
109.953 242.467 li
109.953 240.467 li
95.9532 240.467 mo
87.9532 240.467 li
87.9532 242.467 li
95.9532 242.467 li
95.9532 240.467 li
81.9531 240.467 mo
73.9531 240.467 li
73.9531 242.467 li
81.9531 242.467 li
81.9531 240.467 li
67.9531 240.467 mo
59.9531 240.467 li
59.9531 242.467 li
67.9531 242.467 li
67.9531 240.467 li
53.9532 240.467 mo
45.9532 240.467 li
45.9532 242.467 li
53.9532 242.467 li
53.9532 240.467 li
39.9532 240.467 mo
31.9532 240.467 li
31.9532 242.467 li
39.9532 242.467 li
39.9532 240.467 li
25.9533 240.467 mo
17.9533 240.467 li
17.9533 242.467 li
25.9533 242.467 li
25.9533 240.467 li
11.9533 240.467 mo
3.95328 240.467 li
3.95328 242.467 li
11.9533 242.467 li
11.9533 240.467 li
2.00006 238.42 mo
2.00006 230.42 li
0 230.42 li
0 238.42 li
2.00006 238.42 li
2.00006 224.42 mo
2.00006 216.42 li
0 216.42 li
0 224.42 li
2.00006 224.42 li
2.00006 210.42 mo
2.00006 202.42 li
0 202.42 li
0 210.42 li
2.00006 210.42 li
2.00006 196.42 mo
2.00006 188.42 li
0 188.42 li
0 196.42 li
2.00006 196.42 li
2.00006 182.42 mo
2.00006 174.42 li
0 174.42 li
0 182.42 li
2.00006 182.42 li
2.00006 168.42 mo
2.00006 160.42 li
0 160.42 li
0 168.42 li
2.00006 168.42 li
2.00006 154.42 mo
2.00006 146.42 li
0 146.42 li
0 154.42 li
2.00006 154.42 li
2.00006 140.42 mo
2.00006 132.42 li
0 132.42 li
0 140.42 li
2.00006 140.42 li
2.00006 126.42 mo
2.00006 118.42 li
0 118.42 li
0 126.42 li
2.00006 126.42 li
2.00006 112.42 mo
2.00006 104.42 li
0 104.42 li
0 112.42 li
2.00006 112.42 li
2.00006 98.4202 mo
2.00006 90.4202 li
0 90.4202 li
0 98.4202 li
2.00006 98.4202 li
2.00006 84.4202 mo
2.00006 76.4202 li
0 76.4202 li
0 84.4202 li
2.00006 84.4202 li
2.00006 70.4202 mo
2.00006 62.4202 li
0 62.4202 li
0 70.4202 li
2.00006 70.4202 li
2.00006 56.4203 mo
2.00006 48.4203 li
0 48.4203 li
0 56.4203 li
2.00006 56.4203 li
2.00006 42.4202 mo
2.00006 34.4203 li
0 34.4203 li
0 42.4202 li
2.00006 42.4202 li
2.00006 28.4202 mo
2.00006 20.4202 li
0 20.4202 li
0 28.4202 li
2.00006 28.4202 li
2.00006 14.4203 mo
2.00006 14.021 li
.999964 14.021 li
.999964 15.021 li
8.99994 15.021 li
8.99994 13.0209 li
.999964 13.0209 li
.736645 13.0209 .479116 13.1277 .292935 13.3139 cv
.106754 13.5 0 13.7577 0 14.021 cv
0 14.4203 li
2.00006 14.4203 li
.642481 .563256 .55819 .323766 cmyk
f
216.07 1 mo
303.585 1 li
303.585 23.5732 li
216.07 23.5732 li
216.07 1 li
cp
0 0 0 0 cmyk
f
216.07 1 mo
216.07 2 li
302.585 2 li
302.585 22.5732 li
217.07 22.5732 li
217.07 1 li
216.07 1 li
216.07 2 li
216.07 1 li
215.07 1 li
215.07 23.5732 li
215.07 23.8366 215.177 24.0941 215.363 24.2804 cv
215.549 24.4666 215.806 24.5732 216.07 24.5732 cv
303.585 24.5732 li
303.848 24.5732 304.106 24.4666 304.292 24.2803 cv
304.478 24.0941 304.585 23.8366 304.585 23.5732 cv
304.585 1 li
304.585 .736665 304.478 .479099 304.292 .292893 cv
304.106 .106687 303.848 -1.19209e-007 303.585 -1.19209e-007 cv
216.07 -1.19209e-007 li
215.806 -1.19209e-007 215.549 .106683 215.363 .292888 cv
215.177 .479092 215.07 .736661 215.07 1 cv
216.07 1 li
cp
.642481 .563256 .55819 .323766 cmyk
f
274.997 18.1021 mo
274.997 18.27 274.983 18.4058 274.958 18.5093 cv
274.938 18.606 274.903 18.6772 274.851 18.7222 cv
274.806 18.7676 274.735 18.813 274.638 18.8579 cv
274.548 18.8965 274.44 18.9292 274.319 18.9551 cv
274.202 18.9805 274.077 19 273.94 19.0132 cv
273.806 19.0322 273.669 19.042 273.534 19.042 cv
273.126 19.042 272.774 18.9902 272.478 18.8872 cv
272.187 18.7773 271.948 18.6123 271.761 18.3931 cv
271.573 18.1733 271.438 17.8955 271.354 17.5596 cv
271.271 17.2236 271.228 16.8267 271.228 16.3682 cv
271.228 11.7466 li
270.124 11.7466 li
270.032 11.7466 269.962 11.7012 269.909 11.6108 cv
269.858 11.5137 269.833 11.3623 269.833 11.1553 cv
269.833 11.0391 269.839 10.9453 269.853 10.8745 cv
269.909 10.6807 li
269.997 10.5742 li
270.134 10.5449 li
271.228 10.5449 li
271.228 8.66553 li
271.257 8.55859 li
271.372 8.46191 li
271.431 8.43604 271.505 8.4165 271.597 8.40381 cv
271.692 8.39063 271.81 8.38428 271.944 8.38428 cv
272.093 8.38428 272.212 8.39063 272.304 8.40381 cv
272.399 8.4165 272.474 8.43604 272.526 8.46191 cv
272.642 8.55859 li
272.681 8.66553 li
272.681 10.5449 li
274.706 10.5449 li
274.821 10.5742 li
274.919 10.6807 li
274.978 10.8745 li
274.989 10.9453 274.997 11.0391 274.997 11.1553 cv
274.997 11.3623 274.968 11.5137 274.909 11.6108 cv
274.858 11.7012 274.79 11.7466 274.706 11.7466 cv
272.681 11.7466 li
272.681 16.1548 li
272.681 16.7041 272.759 17.1172 272.913 17.395 cv
273.075 17.6729 273.366 17.8115 273.786 17.8115 cv
273.921 17.8115 274.04 17.7988 274.144 17.7729 cv
274.247 17.7407 274.341 17.7114 274.425 17.6855 cv
274.638 17.5986 li
274.794 17.5596 li
274.87 17.5889 li
274.938 17.666 li
274.978 17.8311 li
274.989 17.9019 274.997 17.9927 274.997 18.1021 cv
cp
267.122 14.7305 mo
267.122 14.3042 267.08 13.9004 266.996 13.5195 cv
266.918 13.1382 266.789 12.8057 266.608 12.5215 cv
266.427 12.2373 266.182 12.0112 265.872 11.8433 cv
265.562 11.6753 265.174 11.5913 264.709 11.5913 cv
264.283 11.5913 263.915 11.6689 263.604 11.8237 cv
263.301 11.9727 263.049 12.1855 262.849 12.4634 cv
262.648 12.7412 262.5 13.0703 262.403 13.4517 cv
262.306 13.8325 262.257 14.2495 262.257 14.7017 cv
262.257 15.1343 262.296 15.541 262.374 15.9224 cv
262.458 16.3032 262.59 16.6362 262.771 16.9204 cv
262.958 17.2046 263.207 17.4307 263.517 17.5986 cv
263.827 17.7598 264.215 17.8408 264.68 17.8408 cv
265.1 17.8408 265.464 17.7666 265.774 17.6177 cv
266.084 17.4629 266.34 17.2495 266.54 16.9785 cv
266.74 16.7007 266.886 16.3711 266.976 15.9902 cv
267.073 15.6089 267.122 15.189 267.122 14.7305 cv
cp
268.643 14.6338 mo
268.643 15.2798 268.559 15.874 268.391 16.4165 cv
268.223 16.959 267.967 17.4272 267.625 17.8213 cv
267.289 18.209 266.87 18.5122 266.366 18.7319 cv
265.862 18.9517 265.274 19.0615 264.602 19.0615 cv
263.957 19.0615 263.391 18.9644 262.907 18.771 cv
262.422 18.5771 262.019 18.2959 261.696 17.9277 cv
261.379 17.5596 261.14 17.1143 260.979 16.5908 cv
260.824 16.061 260.746 15.4639 260.746 14.7983 cv
260.746 14.1523 260.827 13.5581 260.988 13.0156 cv
261.156 12.4731 261.408 12.0078 261.744 11.6206 cv
262.08 11.2266 262.5 10.9229 263.003 10.71 cv
263.507 10.4902 264.099 10.3804 264.777 10.3804 cv
265.422 10.3804 265.988 10.4771 266.472 10.6709 cv
266.957 10.8647 267.357 11.1455 267.674 11.5137 cv
267.997 11.8818 268.239 12.3311 268.4 12.8604 cv
268.562 13.3838 268.643 13.9746 268.643 14.6338 cv
cp
257.531 14.7305 mo
257.531 14.3042 257.489 13.9004 257.405 13.5195 cv
257.328 13.1382 257.199 12.8057 257.018 12.5215 cv
256.837 12.2373 256.591 12.0112 256.281 11.8433 cv
255.971 11.6753 255.583 11.5913 255.119 11.5913 cv
254.692 11.5913 254.324 11.6689 254.014 11.8237 cv
253.71 11.9727 253.458 12.1855 253.258 12.4634 cv
253.058 12.7412 252.91 13.0703 252.813 13.4517 cv
252.716 13.8325 252.667 14.2495 252.667 14.7017 cv
252.667 15.1343 252.706 15.541 252.784 15.9224 cv
252.868 16.3032 253 16.6362 253.181 16.9204 cv
253.368 17.2046 253.617 17.4307 253.927 17.5986 cv
254.237 17.7598 254.625 17.8408 255.089 17.8408 cv
255.509 17.8408 255.875 17.7666 256.185 17.6177 cv
256.495 17.4629 256.75 17.2495 256.95 16.9785 cv
257.15 16.7007 257.295 16.3711 257.386 15.9902 cv
257.483 15.6089 257.531 15.189 257.531 14.7305 cv
cp
259.052 14.6338 mo
259.052 15.2798 258.968 15.874 258.8 16.4165 cv
258.632 16.959 258.377 17.4272 258.035 17.8213 cv
257.699 18.209 257.279 18.5122 256.775 18.7319 cv
256.271 18.9517 255.684 19.0615 255.012 19.0615 cv
254.366 19.0615 253.801 18.9644 253.316 18.771 cv
252.832 18.5771 252.428 18.2959 252.105 17.9277 cv
251.789 17.5596 251.55 17.1143 251.388 16.5908 cv
251.233 16.061 251.156 15.4639 251.156 14.7983 cv
251.156 14.1523 251.237 13.5581 251.398 13.0156 cv
251.566 12.4731 251.818 12.0078 252.154 11.6206 cv
252.49 11.2266 252.91 10.9229 253.414 10.71 cv
253.917 10.4902 254.508 10.3804 255.187 10.3804 cv
255.833 10.3804 256.397 10.4771 256.882 10.6709 cv
257.366 10.8647 257.767 11.1455 258.083 11.5137 cv
258.406 11.8818 258.648 12.3311 258.81 12.8604 cv
258.972 13.3838 259.052 13.9746 259.052 14.6338 cv
cp
249.98 11.291 mo
249.98 11.4204 249.977 11.5303 249.97 11.6206 cv
249.941 11.8237 li
249.873 11.9404 li
249.767 11.979 li
249.592 11.9404 li
249.528 11.9146 249.45 11.8887 249.36 11.8628 cv
249.276 11.8369 249.182 11.811 249.079 11.7852 cv
248.976 11.7593 248.862 11.7466 248.74 11.7466 cv
248.591 11.7466 248.446 11.7754 248.304 11.8335 cv
248.168 11.8916 248.02 11.9888 247.858 12.124 cv
247.703 12.2598 247.542 12.4409 247.374 12.667 cv
247.206 12.8867 247.018 13.1577 246.812 13.4805 cv
246.812 18.6738 li
246.773 18.7998 li
246.667 18.8872 li
246.615 18.9063 246.541 18.9194 246.443 18.9258 cv
246.353 18.9385 246.233 18.9453 246.085 18.9453 cv
245.943 18.9453 245.823 18.9385 245.727 18.9258 cv
245.636 18.9194 245.562 18.9063 245.503 18.8872 cv
245.397 18.7998 li
245.368 18.6738 li
245.368 10.7773 li
245.387 10.6514 li
245.494 10.5645 li
245.697 10.5161 li
245.781 10.5093 245.891 10.5063 246.027 10.5063 cv
246.156 10.5063 246.263 10.5093 246.347 10.5161 cv
246.541 10.5645 li
246.637 10.6514 li
246.676 10.7773 li
246.676 11.9209 li
246.889 11.6045 247.089 11.3491 247.277 11.1553 cv
247.47 10.9551 247.651 10.8003 247.819 10.6904 cv
247.994 10.5742 248.162 10.4932 248.323 10.4482 cv
248.491 10.4028 248.662 10.3804 248.836 10.3804 cv
248.908 10.3804 248.992 10.3867 249.088 10.3994 cv
249.186 10.4063 249.286 10.4224 249.389 10.4482 cv
249.499 10.4673 249.596 10.4932 249.68 10.5254 cv
249.854 10.6128 li
249.931 10.6904 li
249.96 10.7969 li
249.97 10.9712 li
249.977 11.0488 249.98 11.1553 249.98 11.291 cv
cp
.75021 .679683 .670222 .90164 cmyk
f
65.4058 146.443 mo
176.181 146.443 li
176.181 175.251 li
65.4058 175.251 li
65.4058 146.443 li
cp
0 0 0 0 cmyk
f
65.4058 146.443 mo
65.4058 147.443 li
175.181 147.443 li
175.181 174.251 li
66.4057 174.251 li
66.4058 146.443 li
65.4058 146.443 li
65.4058 147.443 li
65.4058 146.443 li
64.4058 146.443 li
64.4058 175.251 li
64.4058 175.514 64.5124 175.772 64.6987 175.958 cv
64.8849 176.144 65.1424 176.251 65.4058 176.251 cv
176.181 176.251 li
176.444 176.251 176.702 176.144 176.888 175.958 cv
177.074 175.772 177.181 175.514 177.181 175.251 cv
177.181 146.443 li
177.181 146.18 177.074 145.922 176.888 145.736 cv
176.702 145.55 176.444 145.443 176.181 145.443 cv
65.4058 145.443 li
65.1424 145.443 64.8848 145.55 64.6986 145.736 cv
64.5124 145.922 64.4058 146.18 64.4058 146.443 cv
65.4058 146.443 li
cp
.642481 .563256 .55819 .323766 cmyk
f
143.258 162.516 mo
143.277 161.754 143.109 161.156 142.754 160.724 cv
142.399 160.291 141.873 160.074 141.175 160.074 cv
140.819 160.074 140.506 160.143 140.235 160.277 cv
139.97 160.413 139.747 160.591 139.566 160.811 cv
139.386 161.03 139.244 161.289 139.14 161.586 cv
139.043 161.883 138.988 162.193 138.976 162.516 cv
143.258 162.516 li
cp
144.721 162.942 mo
144.721 163.175 144.663 163.34 144.546 163.437 cv
144.43 163.526 144.301 163.572 144.159 163.572 cv
138.976 163.572 li
138.976 164.011 139.018 164.408 139.102 164.764 cv
139.192 165.112 139.34 165.413 139.547 165.665 cv
139.754 165.917 140.019 166.11 140.341 166.246 cv
140.671 166.382 141.075 166.449 141.553 166.449 cv
141.927 166.449 142.26 166.421 142.55 166.362 cv
142.841 166.298 143.093 166.227 143.306 166.149 cv
143.52 166.071 143.694 166.004 143.83 165.945 cv
143.972 165.881 144.078 165.849 144.149 165.849 cv
144.256 165.878 li
144.333 165.975 li
144.372 166.149 li
144.378 166.221 144.382 166.308 144.382 166.411 cv
144.372 166.614 li
144.353 166.76 li
144.304 166.886 li
144.227 166.982 li
144.194 167.015 144.098 167.066 143.936 167.138 cv
143.781 167.209 143.578 167.279 143.326 167.351 cv
143.08 167.422 142.79 167.483 142.454 167.535 cv
142.124 167.593 141.772 167.622 141.397 167.622 cv
140.751 167.622 140.183 167.531 139.692 167.351 cv
139.202 167.17 138.788 166.901 138.452 166.547 cv
138.123 166.185 137.871 165.735 137.696 165.199 cv
137.528 164.664 137.444 164.037 137.444 163.32 cv
137.444 162.642 137.532 162.031 137.706 161.489 cv
137.887 160.946 138.142 160.487 138.472 160.113 cv
138.801 159.732 139.198 159.441 139.663 159.241 cv
140.135 159.041 140.661 158.94 141.243 158.94 cv
141.863 158.94 142.389 159.041 142.822 159.241 cv
143.261 159.441 143.62 159.709 143.897 160.045 cv
144.182 160.381 144.388 160.775 144.518 161.228 cv
144.653 161.68 144.721 162.164 144.721 162.681 cv
144.721 162.942 li
cp
135.224 167.234 mo
135.186 167.36 li
135.069 167.447 li
135.018 167.467 134.943 167.479 134.846 167.486 cv
134.756 167.499 134.643 167.506 134.507 167.506 cv
134.359 167.506 134.236 167.499 134.139 167.486 cv
134.049 167.479 133.978 167.467 133.926 167.447 cv
133.81 167.36 li
133.771 167.234 li
133.771 162.613 li
133.771 162.16 133.735 161.799 133.665 161.527 cv
133.6 161.25 133.5 161.011 133.364 160.811 cv
133.229 160.61 133.054 160.459 132.841 160.355 cv
132.627 160.252 132.379 160.2 132.095 160.2 cv
131.733 160.2 131.372 160.329 131.01 160.588 cv
130.648 160.84 130.267 161.215 129.866 161.712 cv
129.866 167.234 li
129.828 167.36 li
129.721 167.447 li
129.669 167.467 129.595 167.479 129.498 167.486 cv
129.408 167.499 129.288 167.506 129.14 167.506 cv
128.998 167.506 128.878 167.499 128.781 167.486 cv
128.691 167.479 128.617 167.467 128.559 167.447 cv
128.452 167.36 li
128.423 167.234 li
128.423 159.338 li
128.442 159.212 li
128.549 159.125 li
128.752 159.076 li
128.836 159.07 128.946 159.066 129.082 159.066 cv
129.211 159.066 129.317 159.07 129.401 159.076 cv
129.595 159.125 li
129.692 159.212 li
129.731 159.338 li
129.731 160.385 li
130.176 159.887 130.619 159.522 131.058 159.289 cv
131.498 159.057 131.943 158.94 132.395 158.94 cv
132.925 158.94 133.367 159.031 133.723 159.212 cv
134.084 159.387 134.375 159.625 134.595 159.929 cv
134.821 160.227 134.982 160.575 135.079 160.976 cv
135.176 161.376 135.224 161.857 135.224 162.419 cv
135.224 167.234 li
cp
125.857 156.664 mo
125.857 157.006 125.793 157.238 125.664 157.361 cv
125.541 157.484 125.305 157.546 124.957 157.546 cv
124.621 157.546 124.388 157.487 124.259 157.371 cv
124.136 157.248 124.075 157.02 124.075 156.684 cv
124.075 156.341 124.136 156.108 124.259 155.985 cv
124.388 155.863 124.627 155.802 124.976 155.802 cv
125.312 155.802 125.541 155.863 125.664 155.985 cv
125.793 156.108 125.857 156.334 125.857 156.664 cv
cp
125.693 167.234 mo
125.654 167.36 li
125.547 167.447 li
125.496 167.467 125.421 167.479 125.325 167.486 cv
125.234 167.499 125.115 167.506 124.966 167.506 cv
124.824 167.506 124.705 167.499 124.608 167.486 cv
124.517 167.479 124.443 167.467 124.385 167.447 cv
124.278 167.36 li
124.249 167.234 li
124.249 159.338 li
124.278 159.222 li
124.385 159.135 li
124.443 159.108 124.517 159.093 124.608 159.086 cv
124.705 159.073 124.824 159.066 124.966 159.066 cv
125.115 159.066 125.234 159.073 125.325 159.086 cv
125.421 159.093 125.496 159.108 125.547 159.135 cv
125.654 159.222 li
125.693 159.338 li
125.693 167.234 li
cp
120.756 168.038 mo
120.756 167.696 120.614 167.435 120.33 167.254 cv
120.052 167.066 119.678 166.966 119.206 166.953 cv
117.162 166.886 li
116.975 167.034 116.819 167.176 116.697 167.312 cv
116.581 167.441 116.487 167.563 116.416 167.68 cv
116.345 167.803 116.296 167.922 116.271 168.038 cv
116.245 168.154 116.231 168.274 116.231 168.397 cv
116.231 168.778 116.422 169.065 116.803 169.26 cv
117.191 169.46 117.73 169.56 118.421 169.56 cv
118.86 169.56 119.229 169.515 119.526 169.424 cv
119.823 169.34 120.062 169.227 120.243 169.085 cv
120.424 168.949 120.553 168.791 120.63 168.61 cv
120.714 168.43 120.756 168.238 120.756 168.038 cv
cp
120.02 161.779 mo
120.02 161.237 119.872 160.817 119.574 160.52 cv
119.284 160.217 118.867 160.064 118.324 160.064 cv
118.04 160.064 117.795 160.113 117.588 160.21 cv
117.381 160.301 117.207 160.43 117.065 160.598 cv
116.929 160.759 116.826 160.946 116.755 161.159 cv
116.69 161.373 116.658 161.596 116.658 161.828 cv
116.658 162.352 116.807 162.762 117.104 163.059 cv
117.401 163.355 117.814 163.504 118.344 163.504 cv
118.634 163.504 118.883 163.459 119.09 163.368 cv
119.303 163.278 119.478 163.152 119.613 162.99 cv
119.755 162.829 119.858 162.646 119.923 162.438 cv
119.988 162.226 120.02 162.006 120.02 161.779 cv
cp
122.287 159.696 mo
122.287 159.903 122.258 160.052 122.2 160.143 cv
122.148 160.232 122.077 160.277 121.987 160.277 cv
120.853 160.277 li
121.06 160.484 121.205 160.717 121.289 160.976 cv
121.373 161.228 121.415 161.492 121.415 161.77 cv
121.415 162.222 121.341 162.626 121.192 162.98 cv
121.044 163.33 120.834 163.627 120.563 163.872 cv
120.291 164.111 119.968 164.295 119.594 164.425 cv
119.219 164.554 118.802 164.618 118.344 164.618 cv
118.021 164.618 117.714 164.576 117.423 164.492 cv
117.139 164.408 116.917 164.302 116.755 164.173 cv
116.651 164.276 116.564 164.396 116.493 164.531 cv
116.429 164.667 116.396 164.822 116.396 164.996 cv
116.396 165.203 116.49 165.374 116.677 165.51 cv
116.871 165.646 117.126 165.717 117.443 165.723 cv
119.506 165.819 li
119.9 165.826 120.259 165.878 120.582 165.975 cv
120.911 166.071 121.195 166.211 121.435 166.392 cv
121.673 166.572 121.861 166.792 121.997 167.05 cv
122.132 167.309 122.2 167.612 122.2 167.961 cv
122.2 168.322 122.123 168.665 121.967 168.988 cv
121.819 169.317 121.586 169.604 121.27 169.851 cv
120.96 170.103 120.563 170.299 120.078 170.441 cv
119.594 170.59 119.019 170.664 118.354 170.664 cv
117.714 170.664 117.171 170.609 116.726 170.499 cv
116.28 170.39 115.912 170.241 115.621 170.054 cv
115.337 169.866 115.13 169.644 115.001 169.386 cv
114.872 169.127 114.807 168.843 114.807 168.532 cv
114.807 168.346 114.83 168.158 114.875 167.971 cv
114.927 167.79 114.998 167.619 115.088 167.457 cv
115.185 167.296 115.305 167.141 115.447 166.992 cv
115.595 166.837 115.763 166.688 115.951 166.547 cv
115.66 166.397 115.447 166.214 115.311 165.994 cv
115.175 165.769 115.108 165.525 115.108 165.268 cv
115.108 164.912 115.179 164.596 115.321 164.318 cv
115.469 164.034 115.653 163.782 115.873 163.563 cv
115.692 163.343 115.547 163.098 115.437 162.826 cv
115.334 162.555 115.282 162.226 115.282 161.838 cv
115.282 161.386 115.356 160.981 115.505 160.627 cv
115.66 160.271 115.87 159.971 116.135 159.726 cv
116.406 159.48 116.729 159.293 117.104 159.164 cv
117.485 159.028 117.898 158.96 118.344 158.96 cv
118.583 158.96 118.806 158.973 119.012 158.999 cv
119.226 159.024 119.422 159.061 119.604 159.105 cv
121.987 159.105 li
122.09 159.105 122.165 159.154 122.209 159.251 cv
122.261 159.348 122.287 159.496 122.287 159.696 cv
cp
112.936 167.234 mo
112.897 167.36 li
112.781 167.447 li
112.729 167.467 112.655 167.479 112.558 167.486 cv
112.468 167.499 112.354 167.506 112.219 167.506 cv
112.07 167.506 111.948 167.499 111.851 167.486 cv
111.76 167.479 111.689 167.467 111.638 167.447 cv
111.521 167.36 li
111.482 167.234 li
111.482 162.613 li
111.482 162.16 111.447 161.799 111.376 161.527 cv
111.312 161.25 111.211 161.011 111.076 160.811 cv
110.94 160.61 110.766 160.459 110.552 160.355 cv
110.339 160.252 110.091 160.2 109.807 160.2 cv
109.445 160.2 109.083 160.329 108.721 160.588 cv
108.359 160.84 107.979 161.215 107.578 161.712 cv
107.578 167.234 li
107.539 167.36 li
107.433 167.447 li
107.381 167.467 107.307 167.479 107.21 167.486 cv
107.119 167.499 107 167.506 106.851 167.506 cv
106.709 167.506 106.59 167.499 106.493 167.486 cv
106.402 167.479 106.328 167.467 106.27 167.447 cv
106.164 167.36 li
106.134 167.234 li
106.134 159.338 li
106.154 159.212 li
106.26 159.125 li
106.464 159.076 li
106.548 159.07 106.658 159.066 106.793 159.066 cv
106.922 159.066 107.029 159.07 107.113 159.076 cv
107.307 159.125 li
107.404 159.212 li
107.442 159.338 li
107.442 160.385 li
107.888 159.887 108.331 159.522 108.77 159.289 cv
109.209 159.057 109.655 158.94 110.107 158.94 cv
110.636 158.94 111.079 159.031 111.434 159.212 cv
111.796 159.387 112.086 159.625 112.306 159.929 cv
112.532 160.227 112.694 160.575 112.791 160.976 cv
112.887 161.376 112.936 161.857 112.936 162.419 cv
112.936 167.234 li
cp
103.736 166.837 mo
103.736 166.94 103.73 167.031 103.717 167.108 cv
103.659 167.312 li
103.562 167.428 li
103.436 167.457 li
97.981 167.457 li
97.8457 167.457 97.7163 167.412 97.5938 167.321 cv
97.4775 167.231 97.4194 167.073 97.4194 166.847 cv
97.4194 156.712 li
97.4194 156.479 97.4775 156.318 97.5938 156.228 cv
97.7163 156.138 97.8457 156.092 97.981 156.092 cv
103.368 156.092 li
103.494 156.131 li
103.591 156.247 li
103.649 156.441 li
103.662 156.519 103.668 156.615 103.668 156.731 cv
103.668 156.842 103.662 156.936 103.649 157.013 cv
103.591 157.206 li
103.494 157.322 li
103.368 157.352 li
98.9307 157.352 li
98.9307 160.917 li
102.738 160.917 li
102.864 160.956 li
102.961 161.063 li
103.02 161.257 li
103.032 161.34 103.039 161.438 103.039 161.547 cv
103.039 161.65 103.032 161.741 103.02 161.818 cv
102.961 162.002 li
102.864 162.109 li
102.738 162.138 li
98.9307 162.138 li
98.9307 166.197 li
103.436 166.197 li
103.562 166.236 li
103.659 166.353 li
103.717 166.547 li
103.73 166.624 103.736 166.721 103.736 166.837 cv
cp
.75021 .679683 .670222 .90164 cmyk
f
95.9077 170.477 mo
145.679 170.477 li
145.679 168.558 li
95.9077 168.558 li
f
50.3188 145.843 mo
235.426 145.843 li
235.426 220.253 li
50.3188 220.253 li
50.3188 145.843 li
.135805 .104005 .108583 0 cmyk
f
64.3189 146.843 mo
72.3188 146.843 li
72.3188 144.843 li
64.3189 144.843 li
64.3189 146.843 li
78.3189 146.843 mo
86.3189 146.843 li
86.3189 144.843 li
78.3189 144.843 li
78.3189 146.843 li
92.3188 146.843 mo
100.319 146.843 li
100.319 144.843 li
92.3188 144.843 li
92.3188 146.843 li
106.319 146.843 mo
114.319 146.843 li
114.319 144.843 li
106.319 144.843 li
106.319 146.843 li
120.319 146.843 mo
128.319 146.843 li
128.319 144.843 li
120.319 144.843 li
120.319 146.843 li
134.319 146.843 mo
142.319 146.843 li
142.319 144.843 li
134.319 144.843 li
134.319 146.843 li
148.319 146.843 mo
156.319 146.843 li
156.319 144.843 li
148.319 144.843 li
148.319 146.843 li
162.319 146.843 mo
170.319 146.843 li
170.319 144.843 li
162.319 144.843 li
162.319 146.843 li
176.319 146.843 mo
184.319 146.843 li
184.319 144.843 li
176.319 144.843 li
176.319 146.843 li
190.319 146.843 mo
198.319 146.843 li
198.319 144.843 li
190.319 144.843 li
190.319 146.843 li
204.319 146.843 mo
212.319 146.843 li
212.319 144.843 li
204.319 144.843 li
204.319 146.843 li
218.319 146.843 mo
226.319 146.843 li
226.319 144.843 li
218.319 144.843 li
218.319 146.843 li
232.319 146.843 mo
234.426 146.843 li
234.426 150.736 li
236.426 150.736 li
236.426 145.843 li
236.426 145.579 236.319 145.322 236.133 145.136 cv
235.947 144.949 235.689 144.843 235.426 144.843 cv
232.319 144.843 li
232.319 146.843 li
234.426 156.736 mo
234.426 164.736 li
236.426 164.736 li
236.426 156.736 li
234.426 156.736 li
234.426 170.736 mo
234.426 178.736 li
236.426 178.736 li
236.426 170.736 li
234.426 170.736 li
234.426 184.736 mo
234.426 192.736 li
236.426 192.736 li
236.426 184.736 li
234.426 184.736 li
234.426 198.736 mo
234.426 206.736 li
236.426 206.736 li
236.426 198.736 li
234.426 198.736 li
234.426 212.736 mo
234.426 220.253 li
235.426 220.253 li
235.426 219.253 li
234.943 219.253 li
234.943 221.253 li
235.426 221.253 li
235.689 221.253 235.947 221.146 236.133 220.96 cv
236.319 220.774 236.426 220.516 236.426 220.253 cv
236.426 212.736 li
234.426 212.736 li
228.943 219.253 mo
220.943 219.253 li
220.943 221.253 li
228.943 221.253 li
228.943 219.253 li
214.943 219.253 mo
206.943 219.253 li
206.943 221.253 li
214.943 221.253 li
214.943 219.253 li
200.943 219.253 mo
192.943 219.253 li
192.943 221.253 li
200.943 221.253 li
200.943 219.253 li
186.943 219.253 mo
178.943 219.253 li
178.943 221.253 li
186.943 221.253 li
186.943 219.253 li
172.943 219.253 mo
164.943 219.253 li
164.943 221.253 li
172.943 221.253 li
172.943 219.253 li
158.943 219.253 mo
150.943 219.253 li
150.943 221.253 li
158.943 221.253 li
158.943 219.253 li
144.943 219.253 mo
136.943 219.253 li
136.943 221.253 li
144.943 221.253 li
144.943 219.253 li
130.943 219.253 mo
122.943 219.253 li
122.943 221.253 li
130.943 221.253 li
130.943 219.253 li
116.943 219.253 mo
108.943 219.253 li
108.943 221.253 li
116.943 221.253 li
116.943 219.253 li
102.943 219.253 mo
94.943 219.253 li
94.943 221.253 li
102.943 221.253 li
102.943 219.253 li
88.9429 219.253 mo
80.9429 219.253 li
80.9429 221.253 li
88.9429 221.253 li
88.9429 219.253 li
74.943 219.253 mo
66.943 219.253 li
66.943 221.253 li
74.943 221.253 li
74.943 219.253 li
60.943 219.253 mo
52.943 219.253 li
52.943 221.253 li
60.943 221.253 li
60.943 219.253 li
51.3188 216.877 mo
51.3188 208.877 li
49.3189 208.877 li
49.3189 216.877 li
51.3188 216.877 li
51.3188 202.877 mo
51.3188 194.877 li
49.3189 194.877 li
49.3189 202.877 li
51.3188 202.877 li
51.3188 188.877 mo
51.3188 180.877 li
49.3189 180.877 li
49.3189 188.877 li
51.3188 188.877 li
51.3188 174.877 mo
51.3188 166.877 li
49.3189 166.877 li
49.3189 174.877 li
51.3188 174.877 li
51.3188 160.877 mo
51.3188 152.877 li
49.3189 152.877 li
49.3189 160.877 li
51.3188 160.877 li
51.3188 146.877 mo
51.3188 146.843 li
58.3188 146.843 li
58.3188 144.843 li
50.3188 144.843 li
50.0555 144.843 49.798 144.949 49.6117 145.136 cv
49.4255 145.322 49.3189 145.579 49.3189 145.843 cv
49.3189 146.877 li
51.3188 146.877 li
.642481 .563256 .55819 .323766 cmyk
f
85.7661 129.212 mo
196.541 129.212 li
196.541 158.02 li
85.7661 158.02 li
85.7661 129.212 li
0 0 0 0 cmyk
f
85.7661 129.212 mo
85.7661 130.212 li
195.541 130.212 li
195.541 157.019 li
86.7661 157.019 li
86.7661 129.212 li
85.7661 129.212 li
85.7661 130.212 li
85.7661 129.212 li
84.7662 129.212 li
84.7662 158.02 li
84.7662 158.283 84.8728 158.54 85.059 158.727 cv
85.2451 158.913 85.5028 159.02 85.7661 159.02 cv
196.541 159.02 li
196.805 159.02 197.062 158.913 197.249 158.727 cv
197.435 158.54 197.542 158.283 197.542 158.02 cv
197.542 129.212 li
197.542 128.949 197.435 128.691 197.249 128.505 cv
197.062 128.319 196.805 128.212 196.541 128.212 cv
85.7661 128.212 li
85.5028 128.212 85.2451 128.319 85.059 128.505 cv
84.8728 128.691 84.7662 128.949 84.7662 129.212 cv
85.7661 129.212 li
.642481 .563256 .55819 .323766 cmyk
f
153.029 149.432 mo
153.029 149.6 153.016 149.735 152.99 149.838 cv
152.971 149.936 152.935 150.006 152.883 150.052 cv
152.838 150.097 152.767 150.142 152.67 150.188 cv
152.58 150.226 152.473 150.258 152.351 150.284 cv
152.234 150.31 152.108 150.329 151.973 150.342 cv
151.837 150.361 151.701 150.371 151.565 150.371 cv
151.159 150.371 150.807 150.319 150.51 150.216 cv
150.219 150.106 149.98 149.941 149.792 149.722 cv
149.605 149.503 149.47 149.225 149.386 148.889 cv
149.302 148.553 149.26 148.155 149.26 147.697 cv
149.26 143.075 li
148.155 143.075 li
148.065 143.075 147.994 143.03 147.942 142.939 cv
147.89 142.843 147.865 142.691 147.865 142.484 cv
147.865 142.368 147.871 142.274 147.884 142.203 cv
147.942 142.01 li
148.029 141.903 li
148.165 141.874 li
149.26 141.874 li
149.26 139.994 li
149.289 139.888 li
149.405 139.791 li
149.463 139.766 149.538 139.746 149.628 139.732 cv
149.725 139.72 149.841 139.714 149.977 139.714 cv
150.125 139.714 150.245 139.72 150.335 139.732 cv
150.432 139.746 150.506 139.766 150.558 139.791 cv
150.674 139.888 li
150.713 139.994 li
150.713 141.874 li
152.738 141.874 li
152.854 141.903 li
152.951 142.01 li
153.009 142.203 li
153.022 142.274 153.029 142.368 153.029 142.484 cv
153.029 142.691 153 142.843 152.941 142.939 cv
152.89 143.03 152.822 143.075 152.738 143.075 cv
150.713 143.075 li
150.713 147.484 li
150.713 148.033 150.791 148.446 150.946 148.725 cv
151.107 149.002 151.397 149.141 151.817 149.141 cv
151.953 149.141 152.073 149.128 152.176 149.102 cv
152.279 149.069 152.373 149.041 152.457 149.015 cv
152.67 148.928 li
152.825 148.889 li
152.903 148.918 li
152.971 148.995 li
153.009 149.16 li
153.022 149.231 153.029 149.321 153.029 149.432 cv
cp
146.769 147.853 mo
146.769 148.259 146.691 148.621 146.536 148.938 cv
146.387 149.254 146.174 149.521 145.896 149.741 cv
145.625 149.955 145.299 150.116 144.918 150.226 cv
144.537 150.336 144.12 150.391 143.668 150.391 cv
143.384 150.391 143.113 150.368 142.854 150.323 cv
142.603 150.284 142.376 150.232 142.176 150.168 cv
141.976 150.097 141.805 150.025 141.663 149.955 cv
141.521 149.877 141.417 149.81 141.353 149.751 cv
141.288 149.693 141.239 149.612 141.207 149.509 cv
141.181 149.399 141.168 149.254 141.168 149.073 cv
141.168 148.963 141.175 148.869 141.188 148.792 cv
141.227 148.607 li
141.304 148.511 li
141.42 148.481 li
141.485 148.481 141.579 148.521 141.701 148.599 cv
141.831 148.676 141.985 148.763 142.167 148.859 cv
142.354 148.95 142.573 149.037 142.825 149.121 cv
143.077 149.199 143.368 149.237 143.697 149.237 cv
143.942 149.237 144.162 149.212 144.356 149.16 cv
144.556 149.102 144.73 149.024 144.879 148.928 cv
145.028 148.824 145.141 148.695 145.218 148.54 cv
145.296 148.379 145.334 148.188 145.334 147.969 cv
145.334 147.749 145.276 147.564 145.16 147.416 cv
145.05 147.261 144.902 147.125 144.714 147.009 cv
144.527 146.887 144.314 146.78 144.075 146.689 cv
143.842 146.599 143.6 146.506 143.348 146.408 cv
143.103 146.305 142.861 146.192 142.622 146.069 cv
142.389 145.94 142.179 145.785 141.992 145.604 cv
141.805 145.424 141.653 145.207 141.537 144.955 cv
141.42 144.703 141.362 144.403 141.362 144.054 cv
141.362 143.744 141.423 143.447 141.546 143.163 cv
141.669 142.879 141.85 142.63 142.089 142.417 cv
142.328 142.203 142.625 142.032 142.98 141.903 cv
143.342 141.774 143.765 141.709 144.25 141.709 cv
144.456 141.709 144.663 141.729 144.87 141.768 cv
145.083 141.8 145.273 141.842 145.441 141.894 cv
145.616 141.945 145.761 142.003 145.877 142.068 cv
146 142.126 146.09 142.181 146.148 142.232 cv
146.274 142.358 li
146.323 142.475 li
146.342 142.63 li
146.355 142.694 146.362 142.775 146.362 142.872 cv
146.362 142.969 146.355 143.057 146.342 143.134 cv
146.303 143.308 li
146.226 143.405 li
146.129 143.434 li
146.077 143.434 146 143.405 145.896 143.347 cv
145.8 143.282 145.674 143.215 145.519 143.144 cv
145.364 143.065 145.176 142.995 144.957 142.931 cv
144.744 142.865 144.501 142.833 144.23 142.833 cv
143.984 142.833 143.768 142.862 143.581 142.921 cv
143.394 142.973 143.239 143.05 143.116 143.153 cv
143 143.257 142.909 143.379 142.845 143.521 cv
142.787 143.657 142.757 143.809 142.757 143.977 cv
142.757 144.203 142.815 144.394 142.932 144.548 cv
143.048 144.703 143.2 144.839 143.387 144.955 cv
143.574 145.071 143.788 145.178 144.026 145.274 cv
144.266 145.365 144.508 145.462 144.753 145.565 cv
145.005 145.662 145.25 145.772 145.49 145.895 cv
145.735 146.018 145.952 146.17 146.139 146.351 cv
146.326 146.524 146.478 146.734 146.594 146.98 cv
146.71 147.226 146.769 147.517 146.769 147.853 cv
cp
139.243 139.433 mo
139.243 139.774 139.178 140.008 139.049 140.13 cv
138.926 140.253 138.69 140.314 138.342 140.314 cv
138.006 140.314 137.773 140.256 137.644 140.14 cv
137.521 140.018 137.46 139.788 137.46 139.452 cv
137.46 139.109 137.521 138.877 137.644 138.754 cv
137.773 138.632 138.012 138.57 138.361 138.57 cv
138.697 138.57 138.926 138.632 139.049 138.754 cv
139.178 138.877 139.243 139.104 139.243 139.433 cv
cp
139.078 150.003 mo
139.039 150.129 li
138.933 150.216 li
138.881 150.235 138.807 150.248 138.71 150.255 cv
138.619 150.268 138.5 150.274 138.351 150.274 cv
138.209 150.274 138.09 150.268 137.993 150.255 cv
137.902 150.248 137.828 150.235 137.77 150.216 cv
137.664 150.129 li
137.634 150.003 li
137.634 142.106 li
137.664 141.99 li
137.77 141.903 li
137.828 141.877 137.902 141.861 137.993 141.854 cv
138.09 141.842 138.209 141.835 138.351 141.835 cv
138.5 141.835 138.619 141.842 138.71 141.854 cv
138.807 141.861 138.881 141.877 138.933 141.903 cv
139.039 141.99 li
139.078 142.106 li
139.078 150.003 li
cp
136.044 149.567 mo
136.044 149.684 136.038 149.783 136.025 149.867 cv
135.967 150.071 li
135.87 150.188 li
135.734 150.226 li
130.715 150.226 li
130.58 150.226 130.451 150.181 130.328 150.09 cv
130.211 150 130.153 149.842 130.153 149.615 cv
130.153 139.094 li
130.183 138.978 li
130.309 138.89 li
130.367 138.864 130.444 138.845 130.541 138.832 cv
130.645 138.819 130.767 138.813 130.909 138.813 cv
131.051 138.813 131.171 138.819 131.268 138.832 cv
131.365 138.845 131.442 138.864 131.5 138.89 cv
131.626 138.978 li
131.665 139.094 li
131.665 148.918 li
135.734 148.918 li
135.87 148.957 li
135.967 149.073 li
136.025 149.276 li
136.038 149.354 136.044 149.451 136.044 149.567 cv
cp
.75021 .679683 .670222 .90164 cmyk
f
128.642 153.246 mo
153.666 153.246 li
153.666 151.326 li
128.642 151.326 li
f
203.23 47.105 mo
314.005 47.105 li
314.005 74.291 li
203.23 74.291 li
203.23 47.105 li
0 0 0 0 cmyk
f
203.23 47.105 mo
203.23 48.105 li
313.005 48.105 li
313.005 73.2909 li
204.23 73.2909 li
204.23 47.105 li
203.23 47.105 li
203.23 48.105 li
203.23 47.105 li
202.231 47.105 li
202.231 74.291 li
202.231 74.5544 202.337 74.8119 202.523 74.9981 cv
202.709 75.1844 202.967 75.291 203.23 75.291 cv
314.005 75.291 li
314.268 75.291 314.526 75.1842 314.712 74.9981 cv
314.898 74.8119 315.005 74.5544 315.005 74.291 cv
315.005 47.105 li
315.005 46.8416 314.898 46.5841 314.712 46.3979 cv
314.526 46.2117 314.268 46.1049 314.005 46.1049 cv
203.23 46.1049 li
202.967 46.1049 202.709 46.2117 202.523 46.3979 cv
202.337 46.5841 202.231 46.8416 202.231 47.105 cv
203.23 47.105 li
.642481 .563256 .55819 .323766 cmyk
f
279.351 66.5137 mo
279.351 66.6816 279.337 66.8174 279.312 66.9209 cv
279.292 67.0176 279.257 67.0879 279.206 67.1338 cv
279.159 67.1787 279.089 67.2236 278.991 67.2695 cv
278.901 67.3076 278.796 67.3398 278.673 67.3662 cv
278.556 67.3916 278.431 67.4111 278.294 67.4238 cv
278.159 67.4434 278.022 67.4531 277.888 67.4531 cv
277.481 67.4531 277.128 67.4014 276.831 67.2979 cv
276.54 67.1885 276.302 67.0234 276.114 66.8047 cv
275.927 66.585 275.792 66.3066 275.708 65.9707 cv
275.624 65.6348 275.581 65.2383 275.581 64.7793 cv
275.581 60.1572 li
274.478 60.1572 li
274.265 60.0225 li
274.212 59.9248 274.187 59.7734 274.187 59.5664 cv
274.187 59.4502 274.192 59.3564 274.206 59.2852 cv
274.265 59.0918 li
274.351 58.9854 li
274.487 58.9561 li
275.581 58.9561 li
275.581 57.0762 li
275.61 56.9697 li
275.728 56.873 li
275.95 56.8154 li
276.046 56.8018 276.163 56.7959 276.298 56.7959 cv
276.446 56.7959 276.567 56.8018 276.657 56.8154 cv
276.755 56.8281 276.829 56.8477 276.88 56.873 cv
276.997 56.9697 li
277.034 57.0762 li
277.034 58.9561 li
279.06 58.9561 li
279.177 58.9854 li
279.272 59.0918 li
279.331 59.2852 li
279.345 59.3564 279.351 59.4502 279.351 59.5664 cv
279.351 59.7734 279.321 59.9248 279.263 60.0225 cv
279.06 60.1572 li
277.034 60.1572 li
277.034 64.5664 li
277.034 65.1152 277.112 65.5283 277.267 65.8066 cv
277.429 66.084 277.72 66.2227 278.14 66.2227 cv
278.274 66.2227 278.396 66.21 278.497 66.1836 cv
278.601 66.1514 278.694 66.123 278.778 66.0967 cv
278.991 66.0098 li
279.147 65.9707 li
279.226 66 li
279.292 66.0771 li
279.331 66.2422 li
279.345 66.3135 279.351 66.4033 279.351 66.5137 cv
cp
272.489 67.085 mo
272.45 67.2109 li
272.335 67.2979 li
272.282 67.3174 272.208 67.3311 272.112 67.3369 cv
272.021 67.3496 271.907 67.3564 271.772 67.3564 cv
271.624 67.3564 271.501 67.3496 271.403 67.3369 cv
271.19 67.2979 li
271.075 67.2109 li
271.036 67.085 li
271.036 62.4639 li
271.036 62.0117 271.001 61.6494 270.929 61.3789 cv
270.864 61.1006 270.765 60.8613 270.63 60.6611 cv
270.493 60.4609 270.319 60.3096 270.106 60.2061 cv
269.894 60.1025 269.644 60.0508 269.36 60.0508 cv
268.998 60.0508 268.637 60.1807 268.275 60.4385 cv
267.913 60.6904 267.532 61.0654 267.131 61.5625 cv
267.131 67.085 li
267.093 67.2109 li
266.986 67.2979 li
266.935 67.3174 266.86 67.3311 266.763 67.3369 cv
266.673 67.3496 266.553 67.3564 266.405 67.3564 cv
266.263 67.3564 266.143 67.3496 266.046 67.3369 cv
265.956 67.3311 265.882 67.3174 265.824 67.2979 cv
265.717 67.2109 li
265.688 67.085 li
265.688 59.1885 li
265.707 59.0625 li
265.814 58.9756 li
266.017 58.9268 li
266.101 58.9209 266.211 58.918 266.347 58.918 cv
266.476 58.918 266.583 58.9209 266.667 58.9268 cv
266.86 58.9756 li
266.957 59.0625 li
266.996 59.1885 li
266.996 60.2354 li
267.441 59.7383 267.884 59.373 268.323 59.1406 cv
268.762 58.9082 269.208 58.792 269.661 58.792 cv
270.19 58.792 270.632 58.8818 270.987 59.0625 cv
271.349 59.2373 271.64 59.4766 271.86 59.7793 cv
272.085 60.0771 272.247 60.4258 272.345 60.8262 cv
272.44 61.2266 272.489 61.708 272.489 62.2695 cv
272.489 67.085 li
cp
261.92 62.3672 mo
261.939 61.6045 261.771 61.0068 261.416 60.5742 cv
261.061 60.1416 260.534 59.9248 259.836 59.9248 cv
259.481 59.9248 259.168 59.9932 258.897 60.1289 cv
258.632 60.2646 258.409 60.4414 258.229 60.6611 cv
258.047 60.8809 257.905 61.1396 257.802 61.4365 cv
257.705 61.7334 257.65 62.0439 257.637 62.3672 cv
261.92 62.3672 li
cp
263.383 62.793 mo
263.383 63.0254 263.325 63.1904 263.208 63.2871 cv
263.092 63.3779 262.963 63.4229 262.821 63.4229 cv
257.637 63.4229 li
257.637 63.8623 257.679 64.2598 257.763 64.6143 cv
257.854 64.9629 258.002 65.2637 258.209 65.5156 cv
258.416 65.7676 258.681 65.9609 259.003 66.0967 cv
259.333 66.2324 259.736 66.3008 260.214 66.3008 cv
260.589 66.3008 260.922 66.2715 261.212 66.2129 cv
261.503 66.1484 261.755 66.0771 261.968 66 cv
262.181 65.9229 262.356 65.8545 262.491 65.7969 cv
262.633 65.7324 262.74 65.6992 262.811 65.6992 cv
262.917 65.7285 li
262.995 65.8252 li
263.034 66 li
263.041 66.0713 263.043 66.1582 263.043 66.2617 cv
263.034 66.4648 li
263.015 66.6104 li
262.966 66.7363 li
262.889 66.833 li
262.856 66.8652 262.759 66.917 262.598 66.9883 cv
262.443 67.0596 262.239 67.1309 261.988 67.2012 cv
261.742 67.2725 261.452 67.334 261.116 67.3857 cv
260.786 67.4434 260.434 67.4727 260.06 67.4727 cv
259.414 67.4727 258.845 67.3818 258.354 67.2012 cv
257.863 67.0205 257.45 66.7529 257.114 66.3975 cv
256.785 66.0352 256.533 65.5869 256.358 65.0508 cv
256.19 64.5146 256.106 63.8877 256.106 63.1709 cv
256.106 62.4922 256.194 61.8818 256.368 61.3398 cv
256.549 60.7969 256.804 60.3389 257.133 59.9639 cv
257.463 59.583 257.86 59.292 258.325 59.0918 cv
258.797 58.8916 259.323 58.792 259.904 58.792 cv
260.524 58.792 261.051 58.8916 261.484 59.0918 cv
261.923 59.292 262.281 59.5605 262.559 59.8965 cv
262.843 60.2324 263.05 60.626 263.179 61.0781 cv
263.315 61.5303 263.383 62.0146 263.383 62.5313 cv
263.383 62.793 li
cp
254.074 56.5146 mo
254.074 56.8574 254.01 57.0898 253.88 57.2119 cv
253.758 57.335 253.522 57.3965 253.173 57.3965 cv
252.837 57.3965 252.604 57.3379 252.476 57.2217 cv
252.353 57.0996 252.292 56.8701 252.292 56.5342 cv
252.292 56.1914 252.353 55.959 252.476 55.8369 cv
252.604 55.7139 252.844 55.6523 253.192 55.6523 cv
253.528 55.6523 253.758 55.7139 253.88 55.8369 cv
254.01 55.959 254.074 56.1855 254.074 56.5146 cv
cp
253.91 67.085 mo
253.871 67.2109 li
253.764 67.2979 li
253.712 67.3174 253.638 67.3311 253.542 67.3369 cv
253.451 67.3496 253.332 67.3564 253.183 67.3564 cv
253.041 67.3564 252.921 67.3496 252.824 67.3369 cv
252.734 67.3311 252.66 67.3174 252.602 67.2979 cv
252.495 67.2109 li
252.466 67.085 li
252.466 59.1885 li
252.495 59.0723 li
252.602 58.9854 li
252.66 58.959 252.734 58.9434 252.824 58.9365 cv
252.921 58.9238 253.041 58.918 253.183 58.918 cv
253.332 58.918 253.451 58.9238 253.542 58.9365 cv
253.638 58.9434 253.712 58.959 253.764 58.9854 cv
253.871 59.0723 li
253.91 59.1885 li
253.91 67.085 li
cp
249.736 67.085 mo
249.697 67.2109 li
249.59 67.2979 li
249.539 67.3174 249.465 67.3311 249.368 67.3369 cv
249.277 67.3496 249.158 67.3564 249.009 67.3564 cv
248.867 67.3564 248.748 67.3496 248.651 67.3369 cv
248.561 67.3311 248.486 67.3174 248.428 67.2979 cv
248.321 67.2109 li
248.292 67.085 li
248.292 55.3613 li
248.321 55.2354 li
248.428 55.1484 li
248.486 55.123 248.561 55.1064 248.651 55.0996 cv
248.748 55.0869 248.867 55.0811 249.009 55.0811 cv
249.158 55.0811 249.277 55.0869 249.368 55.0996 cv
249.465 55.1064 249.539 55.123 249.59 55.1484 cv
249.697 55.2354 li
249.736 55.3613 li
249.736 67.085 li
cp
246.347 65.6992 mo
246.347 65.7969 246.343 65.8809 246.337 65.9512 cv
246.308 66.1357 li
246.25 66.2715 li
246.124 66.4268 li
246.065 66.4844 245.943 66.5752 245.755 66.6973 cv
245.568 66.8135 245.335 66.9297 245.058 67.0469 cv
244.78 67.1563 244.46 67.25 244.099 67.3271 cv
243.744 67.4111 243.35 67.4531 242.917 67.4531 cv
242.18 67.4531 241.515 67.3311 240.921 67.085 cv
240.327 66.833 239.819 66.4688 239.4 65.9902 cv
238.986 65.5127 238.667 64.9209 238.44 64.2168 cv
238.214 63.5068 238.102 62.6934 238.102 61.7754 cv
238.102 60.833 238.221 59.9932 238.46 59.2568 cv
238.706 58.5205 239.048 57.8965 239.487 57.3867 cv
239.926 56.8701 240.449 56.4795 241.057 56.2139 cv
241.67 55.9434 242.352 55.8076 243.101 55.8076 cv
243.424 55.8076 243.74 55.8398 244.05 55.9043 cv
244.36 55.9629 244.648 56.04 244.913 56.1367 cv
245.177 56.2275 245.41 56.334 245.61 56.457 cv
245.817 56.5791 245.959 56.6797 246.037 56.7568 cv
246.191 56.9414 li
246.25 57.0859 li
246.289 57.2803 li
246.295 57.3574 246.298 57.4482 246.298 57.5518 cv
246.298 57.668 246.292 57.7676 246.279 57.8516 cv
246.23 58.0645 li
246.143 58.1816 li
246.027 58.2197 li
245.949 58.2197 245.836 58.165 245.688 58.0547 cv
245.539 57.9385 245.349 57.8125 245.116 57.6777 cv
244.89 57.5352 244.609 57.4092 244.273 57.2998 cv
243.944 57.1836 243.55 57.125 243.091 57.125 cv
242.587 57.125 242.129 57.2256 241.715 57.4258 cv
241.302 57.626 240.947 57.9229 240.649 58.3164 cv
240.359 58.7109 240.133 59.1924 239.971 59.7607 cv
239.81 60.3223 239.729 60.9648 239.729 61.6885 cv
239.729 62.4053 239.807 63.042 239.961 63.5977 cv
240.123 64.1523 240.346 64.6182 240.63 64.9922 cv
240.921 65.3604 241.276 65.6416 241.696 65.835 cv
242.122 66.0225 242.6 66.1162 243.13 66.1162 cv
243.582 66.1162 243.976 66.0615 244.312 65.9512 cv
244.648 65.835 244.935 65.709 245.174 65.5732 cv
245.413 65.4385 245.607 65.3154 245.755 65.2051 cv
245.911 65.0889 246.03 65.0313 246.114 65.0313 cv
246.221 65.0605 li
246.289 65.167 li
246.327 65.3701 li
246.34 65.4541 246.347 65.5645 246.347 65.6992 cv
cp
.75021 .679683 .670222 .90164 cmyk
f
237.249 70.3278 mo
279.987 70.3278 li
279.987 68.4085 li
237.249 68.4085 li
f
142.068 128.212 mo
141.172 128.212 li
141.21 126.065 141.368 123.92 141.64 121.784 cv
142.632 121.911 li
142.656 121.723 li
142.655 121.728 li
142.673 121.594 142.69 121.462 142.708 121.332 cv
142.708 121.333 li
142.779 120.81 142.858 120.287 142.943 119.764 cv
143.114 118.72 143.311 117.679 143.535 116.642 cv
144.43 112.491 145.744 108.402 147.419 104.442 cv
150.364 97.4731 154.427 90.9049 159.274 85.107 cv
159.274 103.098 li
164.82 103.098 li
142.068 128.212 li
190.916 74.291 mo
170.366 74.291 li
179.984 66.7071 191.126 61.9731 202.231 61.7098 cv
202.231 61.802 li
190.916 74.291 li
0 0 0 0 cmyk
f
141.164 129.21 mo
141.164 128.878 141.166 128.544 141.172 128.212 cv
142.068 128.212 li
141.164 129.21 li
.642481 .563256 .55819 .323766 cmyk
f
202.231 61.802 mo
202.231 61.7098 li
202.258 61.7091 202.288 61.7084 202.316 61.7078 cv
202.231 61.802 li
f
203.23 59.6983 mo
187.337 59.7077 171.602 68.4354 159.818 81.436 cv
153.926 87.9419 149.017 95.526 145.576 103.663 cv
143.856 107.732 142.503 111.94 141.58 116.22 cv
141.349 117.29 141.145 118.364 140.969 119.442 cv
140.881 119.981 140.8 120.521 140.726 121.062 cv
140.726 121.063 li
140.707 121.198 140.69 121.333 140.672 121.465 cv
140.672 121.47 li
140.648 121.658 li
142.632 121.911 li
142.656 121.723 li
142.655 121.728 li
142.673 121.594 142.69 121.462 142.708 121.332 cv
142.708 121.333 li
142.779 120.81 142.858 120.287 142.943 119.764 cv
143.114 118.72 143.311 117.679 143.535 116.642 cv
144.43 112.491 145.744 108.402 147.419 104.442 cv
150.766 96.5229 155.556 89.1206 161.301 82.7788 cv
172.792 70.0879 188.091 61.6888 203.23 61.6982 cv
203.23 59.6983 li
f
139.596 121.653 mo
141.28 127.4 li
143.684 121.915 li
139.596 121.653 li
cp
f
139.596 121.653 mo
138.636 121.935 li
141.093 130.318 li
145.173 121.008 li
138.234 120.564 li
138.636 121.935 li
139.596 121.653 li
139.532 122.651 li
142.195 122.822 li
141.467 124.483 li
140.555 121.372 li
139.596 121.653 li
139.532 122.651 li
139.596 121.653 li
cp
f
372.655 129.21 mo
350.301 103.098 li
366.141 103.098 li
366.327 103.538 366.508 103.98 366.686 104.424 cv
368.268 108.386 369.51 112.477 370.357 116.63 cv
370.569 117.669 370.755 118.711 370.917 119.756 cv
370.998 120.279 371.073 120.802 371.14 121.325 cv
371.14 121.329 li
371.156 121.449 371.172 121.58 371.19 121.72 cv
371.211 121.897 li
372.205 121.782 li
372.501 124.249 372.655 126.73 372.655 129.21 cv
345.026 74.291 mo
325.641 74.291 li
315.005 61.8663 li
315.005 61.7118 li
321.809 61.896 328.626 63.9547 335.063 67.4637 cv
338.516 69.3458 341.859 71.6454 345.026 74.291 cv
0 0 0 0 cmyk
f
315.005 61.8663 mo
314.87 61.7083 li
314.914 61.7094 314.96 61.7105 315.005 61.7118 cv
315.005 61.8663 li
.642481 .563256 .55819 .323766 cmyk
f
314.005 61.6982 mo
321.141 61.6978 328.31 63.7828 335.063 67.4637 cv
341.814 71.1433 348.141 76.4178 353.567 82.7578 cv
358.994 89.098 363.521 96.5009 366.686 104.424 cv
368.268 108.386 369.51 112.477 370.357 116.63 cv
370.569 117.669 370.755 118.711 370.917 119.756 cv
370.998 120.279 371.073 120.802 371.14 121.325 cv
371.14 121.329 li
371.157 121.451 371.172 121.585 371.191 121.728 cv
372.183 121.597 li
371.189 121.712 li
371.211 121.897 li
373.197 121.667 li
373.176 121.482 li
373.174 121.465 li
373.158 121.343 373.142 121.209 373.123 121.066 cv
373.124 121.07 li
373.054 120.528 372.977 119.988 372.894 119.451 cv
372.727 118.373 372.535 117.3 372.317 116.231 cv
371.445 111.954 370.167 107.749 368.543 103.682 cv
365.293 95.5478 360.656 87.9645 355.087 81.4572 cv
349.517 74.9512 343.015 69.5212 336.02 65.7076 cv
329.027 61.8954 321.533 59.6986 314.005 59.6983 cv
314.005 61.6982 li
f
370.159 121.906 mo
372.546 127.4 li
374.249 121.658 li
370.159 121.906 li
cp
f
370.159 121.906 mo
369.242 122.305 li
372.723 130.319 li
375.614 120.574 li
368.673 120.995 li
369.242 122.305 li
370.159 121.906 li
370.22 122.904 li
372.884 122.743 li
372.368 124.482 li
371.076 121.508 li
370.159 121.906 li
370.22 122.904 li
370.159 121.906 li
cp
f
281.811 145.843 mo
466.919 145.843 li
466.919 220.253 li
281.811 220.253 li
281.811 145.843 li
.135805 .104005 .108583 0 cmyk
f
295.811 146.843 mo
303.811 146.843 li
303.811 144.843 li
295.811 144.843 li
295.811 146.843 li
309.812 146.843 mo
317.812 146.843 li
317.812 144.843 li
309.812 144.843 li
309.812 146.843 li
323.811 146.843 mo
331.812 146.843 li
331.812 144.843 li
323.811 144.843 li
323.811 146.843 li
337.811 146.843 mo
345.811 146.843 li
345.811 144.843 li
337.811 144.843 li
337.811 146.843 li
351.811 146.843 mo
359.811 146.843 li
359.811 144.843 li
351.811 144.843 li
351.811 146.843 li
365.812 146.843 mo
373.811 146.843 li
373.811 144.843 li
365.812 144.843 li
365.812 146.843 li
379.812 146.843 mo
387.812 146.843 li
387.812 144.843 li
379.812 144.843 li
379.812 146.843 li
393.811 146.843 mo
401.811 146.843 li
401.811 144.843 li
393.811 144.843 li
393.811 146.843 li
407.811 146.843 mo
415.811 146.843 li
415.811 144.843 li
407.811 144.843 li
407.811 146.843 li
421.811 146.843 mo
429.811 146.843 li
429.811 144.843 li
421.811 144.843 li
421.811 146.843 li
435.811 146.843 mo
443.811 146.843 li
443.811 144.843 li
435.811 144.843 li
435.811 146.843 li
449.811 146.843 mo
457.811 146.843 li
457.811 144.843 li
449.811 144.843 li
449.811 146.843 li
463.811 146.843 mo
465.919 146.843 li
465.919 150.735 li
467.919 150.735 li
467.919 145.843 li
467.919 145.579 467.812 145.322 467.626 145.136 cv
467.44 144.949 467.182 144.843 466.919 144.843 cv
463.811 144.843 li
463.811 146.843 li
465.919 156.735 mo
465.919 164.735 li
467.919 164.735 li
467.919 156.735 li
465.919 156.735 li
465.919 170.735 mo
465.919 178.735 li
467.919 178.735 li
467.919 170.735 li
465.919 170.735 li
465.919 184.735 mo
465.919 192.735 li
467.919 192.735 li
467.919 184.735 li
465.919 184.735 li
465.919 198.735 mo
465.919 206.735 li
467.919 206.735 li
467.919 198.735 li
465.919 198.735 li
465.919 212.735 mo
465.919 220.253 li
466.919 220.253 li
466.919 219.253 li
466.437 219.253 li
466.437 221.253 li
466.919 221.253 li
467.182 221.253 467.44 221.146 467.626 220.96 cv
467.812 220.774 467.919 220.516 467.919 220.253 cv
467.919 212.735 li
465.919 212.735 li
460.436 219.253 mo
452.437 219.253 li
452.437 221.253 li
460.436 221.253 li
460.436 219.253 li
446.436 219.253 mo
438.436 219.253 li
438.436 221.253 li
446.436 221.253 li
446.436 219.253 li
432.437 219.253 mo
424.437 219.253 li
424.437 221.253 li
432.437 221.253 li
432.437 219.253 li
418.437 219.253 mo
410.437 219.253 li
410.437 221.253 li
418.437 221.253 li
418.437 219.253 li
404.437 219.253 mo
396.437 219.253 li
396.437 221.253 li
404.437 221.253 li
404.437 219.253 li
390.437 219.253 mo
382.437 219.253 li
382.437 221.253 li
390.437 221.253 li
390.437 219.253 li
376.437 219.253 mo
368.437 219.253 li
368.437 221.253 li
376.437 221.253 li
376.437 219.253 li
362.437 219.253 mo
354.437 219.253 li
354.437 221.253 li
362.437 221.253 li
362.437 219.253 li
348.437 219.253 mo
340.437 219.253 li
340.437 221.253 li
348.437 221.253 li
348.437 219.253 li
334.437 219.253 mo
326.437 219.253 li
326.437 221.253 li
334.437 221.253 li
334.437 219.253 li
320.437 219.253 mo
312.437 219.253 li
312.437 221.253 li
320.437 221.253 li
320.437 219.253 li
306.437 219.253 mo
298.437 219.253 li
298.437 221.253 li
306.437 221.253 li
306.437 219.253 li
292.437 219.253 mo
284.437 219.253 li
284.437 221.253 li
292.437 221.253 li
292.437 219.253 li
282.811 216.878 mo
282.811 208.878 li
280.812 208.878 li
280.812 216.878 li
282.811 216.878 li
282.811 202.878 mo
282.811 194.878 li
280.812 194.878 li
280.812 202.878 li
282.811 202.878 li
282.811 188.878 mo
282.811 180.878 li
280.812 180.878 li
280.812 188.878 li
282.811 188.878 li
282.811 174.878 mo
282.811 166.878 li
280.812 166.878 li
280.812 174.878 li
282.811 174.878 li
282.811 160.878 mo
282.811 152.878 li
280.812 152.878 li
280.812 160.878 li
282.811 160.878 li
282.811 146.878 mo
282.811 146.843 li
289.811 146.843 li
289.811 144.843 li
281.811 144.843 li
281.548 144.843 281.291 144.949 281.104 145.136 cv
280.918 145.322 280.812 145.579 280.812 145.843 cv
280.812 146.878 li
282.812 146.878 li
282.811 146.878 li
.642481 .563256 .55819 .323766 cmyk
f
317.259 129.212 mo
428.034 129.212 li
428.034 158.02 li
317.259 158.02 li
317.259 129.212 li
cp
0 0 0 0 cmyk
f
317.259 129.212 mo
317.259 130.212 li
427.034 130.212 li
427.034 157.02 li
318.259 157.02 li
318.259 129.212 li
317.259 129.212 li
317.259 130.212 li
317.259 129.212 li
316.259 129.212 li
316.259 158.02 li
316.259 158.283 316.365 158.54 316.552 158.727 cv
316.738 158.913 316.995 159.02 317.259 159.02 cv
428.034 159.02 li
428.297 159.02 428.555 158.913 428.741 158.727 cv
428.927 158.54 429.034 158.283 429.034 158.02 cv
429.034 129.212 li
429.034 128.949 428.927 128.691 428.741 128.505 cv
428.555 128.319 428.298 128.212 428.034 128.212 cv
317.259 128.212 li
316.995 128.212 316.738 128.319 316.552 128.505 cv
316.365 128.691 316.259 128.949 316.259 129.212 cv
317.259 129.212 li
cp
.642481 .563256 .55819 .323766 cmyk
f
384.522 149.432 mo
384.522 149.6 384.509 149.735 384.483 149.838 cv
384.464 149.936 384.429 150.006 384.376 150.052 cv
384.331 150.097 384.261 150.142 384.163 150.188 cv
384.073 150.226 383.966 150.258 383.843 150.284 cv
383.728 150.31 383.601 150.329 383.466 150.342 cv
383.329 150.361 383.194 150.371 383.06 150.371 cv
382.651 150.371 382.3 150.319 382.003 150.216 cv
381.712 150.106 381.474 149.941 381.286 149.722 cv
381.099 149.503 380.962 149.225 380.878 148.889 cv
380.794 148.553 380.753 148.155 380.753 147.697 cv
380.753 143.075 li
379.647 143.075 li
379.558 143.075 379.487 143.03 379.435 142.939 cv
379.384 142.843 379.358 142.691 379.358 142.484 cv
379.358 142.368 379.364 142.274 379.376 142.203 cv
379.435 142.01 li
379.522 141.903 li
379.657 141.874 li
380.753 141.874 li
380.753 139.994 li
380.782 139.888 li
380.897 139.791 li
381.12 139.732 li
381.218 139.72 381.335 139.714 381.47 139.714 cv
381.618 139.714 381.737 139.72 381.829 139.732 cv
381.925 139.746 381.999 139.766 382.052 139.791 cv
382.167 139.888 li
382.206 139.994 li
382.206 141.874 li
384.231 141.874 li
384.347 141.903 li
384.444 142.01 li
384.503 142.203 li
384.515 142.274 384.522 142.368 384.522 142.484 cv
384.522 142.691 384.493 142.843 384.435 142.939 cv
384.382 143.03 384.315 143.075 384.231 143.075 cv
382.206 143.075 li
382.206 147.484 li
382.206 148.033 382.284 148.446 382.438 148.725 cv
382.601 149.002 382.892 149.141 383.312 149.141 cv
383.446 149.141 383.565 149.128 383.669 149.102 cv
383.772 149.069 383.866 149.041 383.95 149.015 cv
384.163 148.928 li
384.317 148.889 li
384.396 148.918 li
384.464 148.995 li
384.503 149.16 li
384.515 149.231 384.522 149.321 384.522 149.432 cv
cp
378.261 147.853 mo
378.261 148.259 378.185 148.621 378.028 148.938 cv
377.88 149.254 377.667 149.521 377.39 149.741 cv
377.118 149.955 376.792 150.116 376.411 150.226 cv
376.03 150.336 375.614 150.391 375.161 150.391 cv
374.876 150.391 374.606 150.368 374.347 150.323 cv
374.095 150.284 373.87 150.232 373.669 150.168 cv
373.47 150.097 373.298 150.025 373.155 149.955 cv
373.013 149.877 372.909 149.81 372.845 149.751 cv
372.78 149.693 372.733 149.612 372.7 149.509 cv
372.675 149.399 372.661 149.254 372.661 149.073 cv
372.661 148.963 372.667 148.869 372.681 148.792 cv
372.72 148.607 li
372.798 148.511 li
372.913 148.481 li
372.978 148.481 373.071 148.521 373.194 148.599 cv
373.323 148.676 373.478 148.763 373.659 148.859 cv
373.847 148.95 374.065 149.037 374.317 149.121 cv
374.569 149.199 374.86 149.237 375.19 149.237 cv
375.437 149.237 375.655 149.212 375.849 149.16 cv
376.05 149.102 376.224 149.024 376.372 148.928 cv
376.521 148.824 376.634 148.695 376.712 148.54 cv
376.788 148.379 376.827 148.188 376.827 147.969 cv
376.827 147.749 376.769 147.564 376.653 147.416 cv
376.544 147.261 376.396 147.125 376.208 147.009 cv
376.021 146.887 375.808 146.78 375.567 146.689 cv
375.335 146.599 375.093 146.506 374.841 146.408 cv
374.597 146.305 374.354 146.192 374.114 146.069 cv
373.882 145.94 373.673 145.785 373.485 145.604 cv
373.298 145.424 373.146 145.207 373.03 144.955 cv
372.913 144.703 372.854 144.403 372.854 144.054 cv
372.854 143.744 372.917 143.447 373.04 143.163 cv
373.161 142.879 373.343 142.63 373.581 142.417 cv
373.821 142.203 374.118 142.032 374.474 141.903 cv
374.835 141.774 375.259 141.709 375.743 141.709 cv
375.948 141.709 376.155 141.729 376.362 141.768 cv
376.575 141.8 376.767 141.842 376.935 141.894 cv
377.108 141.945 377.255 142.003 377.37 142.068 cv
377.493 142.126 377.583 142.181 377.642 142.232 cv
377.767 142.358 li
377.815 142.475 li
377.835 142.63 li
377.849 142.694 377.854 142.775 377.854 142.872 cv
377.854 142.969 377.849 143.057 377.835 143.134 cv
377.796 143.308 li
377.72 143.405 li
377.622 143.434 li
377.571 143.434 377.493 143.405 377.39 143.347 cv
377.292 143.282 377.167 143.215 377.011 143.144 cv
376.856 143.065 376.669 142.995 376.45 142.931 cv
376.237 142.865 375.995 142.833 375.724 142.833 cv
375.478 142.833 375.261 142.862 375.073 142.921 cv
374.886 142.973 374.731 143.05 374.608 143.153 cv
374.493 143.257 374.401 143.379 374.337 143.521 cv
374.28 143.657 374.251 143.809 374.251 143.977 cv
374.251 144.203 374.308 144.394 374.425 144.548 cv
374.542 144.703 374.692 144.839 374.88 144.955 cv
375.067 145.071 375.28 145.178 375.521 145.274 cv
375.759 145.365 376.001 145.462 376.247 145.565 cv
376.499 145.662 376.743 145.772 376.983 145.895 cv
377.228 146.018 377.444 146.17 377.632 146.351 cv
377.819 146.524 377.972 146.734 378.087 146.98 cv
378.204 147.226 378.261 147.517 378.261 147.853 cv
cp
370.735 139.433 mo
370.735 139.774 370.671 140.008 370.542 140.13 cv
370.419 140.253 370.183 140.314 369.835 140.314 cv
369.499 140.314 369.267 140.256 369.138 140.14 cv
369.015 140.018 368.952 139.788 368.952 139.452 cv
368.952 139.109 369.015 138.877 369.138 138.754 cv
369.267 138.632 369.505 138.57 369.854 138.57 cv
370.19 138.57 370.419 138.632 370.542 138.754 cv
370.671 138.877 370.735 139.104 370.735 139.433 cv
cp
370.571 150.003 mo
370.532 150.129 li
370.425 150.216 li
370.374 150.235 370.3 150.248 370.202 150.255 cv
370.112 150.268 369.993 150.274 369.845 150.274 cv
369.702 150.274 369.583 150.268 369.485 150.255 cv
369.263 150.216 li
369.157 150.129 li
369.128 150.003 li
369.128 142.106 li
369.157 141.99 li
369.263 141.903 li
369.485 141.854 li
369.583 141.842 369.702 141.835 369.845 141.835 cv
369.993 141.835 370.112 141.842 370.202 141.854 cv
370.3 141.861 370.374 141.877 370.425 141.903 cv
370.532 141.99 li
370.571 142.106 li
370.571 150.003 li
cp
367.538 149.567 mo
367.538 149.684 367.53 149.783 367.519 149.867 cv
367.46 150.071 li
367.362 150.188 li
367.228 150.226 li
362.208 150.226 li
362.073 150.226 361.944 150.181 361.821 150.09 cv
361.704 150 361.647 149.842 361.647 149.615 cv
361.647 139.094 li
361.675 138.978 li
361.802 138.89 li
361.86 138.864 361.937 138.845 362.034 138.832 cv
362.138 138.819 362.261 138.813 362.401 138.813 cv
362.544 138.813 362.663 138.819 362.761 138.832 cv
362.858 138.845 362.935 138.864 362.993 138.89 cv
363.12 138.978 li
363.157 139.094 li
363.157 148.918 li
367.228 148.918 li
367.362 148.957 li
367.46 149.073 li
367.519 149.276 li
367.53 149.354 367.538 149.451 367.538 149.567 cv
cp
.75021 .679683 .670222 .90164 cmyk
f
360.136 153.246 mo
385.159 153.246 li
385.159 151.326 li
360.136 151.326 li
f
269.468 193.422 mo
247.769 193.422 li
247.769 179.036 li
263.062 182.094 li
263.063 182.094 263.064 182.094 263.064 182.095 cv
263.308 182.192 263.55 182.289 263.793 182.386 cv
261.211 185.766 259.57 188.125 258.872 189.462 cv
259.163 189.947 li
259.099 190.205 259.034 190.432 258.969 190.625 cv
258.969 190.818 259.034 190.981 259.163 191.109 cv
259.293 191.368 259.389 191.562 259.454 191.69 cv
259.502 191.836 259.623 191.909 259.817 191.909 cv
259.882 191.909 259.954 191.901 260.035 191.885 cv
260.164 191.906 260.283 191.917 260.39 191.917 cv
260.606 191.917 260.778 191.874 260.907 191.788 cv
261.036 191.723 261.262 191.433 261.585 190.916 cv
262.877 188.784 264.363 186.459 266.042 183.939 cv
266.946 185.555 267.883 187.008 268.852 188.3 cv
269.036 188.53 269.22 188.646 269.405 188.646 cv
269.426 188.646 269.447 188.644 269.468 188.641 cv
269.468 193.422 li
269.468 183.375 mo
269.116 183.304 li
268.796 182.665 268.45 181.973 268.077 181.227 cv
268.556 180.576 269.02 179.952 269.468 179.356 cv
269.468 183.375 li
263.89 182.259 mo
263.062 182.094 li
258.182 180.142 253.303 178.191 247.769 176.501 cv
247.769 160.846 li
269.468 160.846 li
269.468 175.354 li
268.552 176.472 267.636 177.558 266.72 178.611 cv
265.751 176.803 265.105 175.511 264.783 174.735 cv
264.718 174.606 264.589 174.51 264.395 174.444 cv
264.266 174.444 264.169 174.477 264.105 174.542 cv
264.04 174.671 263.911 174.768 263.717 174.832 cv
263.652 174.854 263.595 174.864 263.545 174.864 cv
263.444 174.864 263.372 174.821 263.329 174.735 cv
263.278 174.684 263.221 174.658 263.159 174.658 cv
263.066 174.658 262.961 174.716 262.845 174.832 cv
262.522 175.091 262.36 175.316 262.36 175.511 cv
263.006 177.448 263.781 179.353 264.686 181.227 cv
264.411 181.581 264.146 181.925 263.89 182.259 cv
0 0 0 0 cmyk
f
272.728 174.251 mo
272.856 174.315 272.921 174.444 272.921 174.639 cv
272.921 174.832 272.89 174.961 272.825 175.026 cv
271.468 176.705 269.886 178.772 268.077 181.227 cv
269.304 183.682 270.241 185.555 270.886 186.847 cv
270.821 186.976 270.692 187.072 270.499 187.137 cv
270.499 187.331 li
270.435 187.46 270.272 187.589 270.015 187.719 cv
270.208 188.041 270.208 188.235 270.015 188.3 cv
269.821 188.429 269.692 188.525 269.628 188.59 cv
269.369 188.72 269.11 188.623 268.852 188.3 cv
267.883 187.008 266.946 185.555 266.042 183.939 cv
264.363 186.459 262.877 188.784 261.585 190.916 cv
261.262 191.433 261.036 191.723 260.907 191.788 cv
260.713 191.917 260.423 191.949 260.035 191.885 cv
259.712 191.949 259.519 191.885 259.454 191.69 cv
259.389 191.562 259.293 191.368 259.163 191.109 cv
259.034 190.981 258.969 190.818 258.969 190.625 cv
259.034 190.432 259.099 190.205 259.163 189.947 cv
258.872 189.462 li
259.647 187.977 261.585 185.231 264.686 181.227 cv
263.781 179.353 263.006 177.448 262.36 175.511 cv
262.36 175.316 262.522 175.091 262.845 174.832 cv
263.039 174.639 263.2 174.606 263.329 174.735 cv
263.394 174.864 263.523 174.896 263.717 174.832 cv
263.911 174.768 264.04 174.671 264.105 174.542 cv
264.169 174.477 264.266 174.444 264.395 174.444 cv
264.589 174.51 264.718 174.606 264.783 174.735 cv
265.105 175.511 265.751 176.803 266.72 178.611 cv
268.012 177.125 269.304 175.575 270.597 173.96 cv
270.661 173.831 270.757 173.767 270.886 173.767 cv
271.081 173.767 271.274 173.863 271.468 174.057 cv
271.661 174.251 271.79 174.283 271.855 174.154 cv
271.985 174.09 272.081 174.024 272.145 173.96 cv
272.274 173.831 272.341 173.799 272.341 173.863 cv
272.405 173.992 272.534 174.122 272.728 174.251 cv
.245212 1 1 .254002 cmyk
f
280.812 188.406 mo
276.872 187.302 273.286 186.056 269.84 184.754 cv
269.721 184.516 269.597 184.267 269.468 184.009 cv
269.468 183.375 li
280.812 185.643 li
280.812 188.406 li
0 0 0 0 cmyk
f
316.392 192.758 mo
301.876 192.758 291.313 191.178 282.549 188.878 cv
282.811 188.878 li
282.811 186.043 li
316.392 192.758 li
.135805 .104005 .108583 0 cmyk
f
282.811 188.878 mo
282.549 188.878 li
281.962 188.724 281.383 188.567 280.812 188.406 cv
280.812 185.643 li
282.811 186.043 li
282.811 188.878 li
.642481 .563256 .55819 .323766 cmyk
f
269.468 184.009 mo
269.354 183.782 269.237 183.547 269.116 183.304 cv
269.468 183.375 li
269.468 184.009 li
263.793 182.386 mo
263.55 182.289 263.308 182.192 263.064 182.095 cv
263.064 182.094 263.063 182.094 263.062 182.094 cv
263.89 182.259 li
263.858 182.302 263.826 182.344 263.793 182.386 cv
0 0 0 0 cmyk
f
269.84 184.754 mo
267.79 183.979 265.788 183.183 263.793 182.386 cv
263.826 182.344 263.858 182.302 263.89 182.259 cv
269.116 183.304 li
269.237 183.547 269.354 183.782 269.468 184.009 cv
269.597 184.267 269.721 184.516 269.84 184.754 cv
.245212 1 1 .254002 cmyk
f
247.769 179.036 mo
236.426 176.767 li
236.426 173.694 li
240.571 174.483 244.299 175.441 247.769 176.501 cv
247.769 179.036 li
0 0 0 0 cmyk
f
234.426 176.367 mo
209.737 171.431 li
219.551 171.431 227.56 172.153 234.426 173.332 cv
234.426 176.367 li
.135805 .104005 .108583 0 cmyk
f
236.426 176.767 mo
234.426 176.367 li
234.426 173.332 li
235.104 173.448 235.769 173.569 236.426 173.694 cv
236.426 176.767 li
.642481 .563256 .55819 .323766 cmyk
f
263.062 182.094 mo
247.769 179.036 li
247.769 176.501 li
253.303 178.191 258.182 180.142 263.062 182.094 cv
0 0 0 0 cmyk
f
209.737 172.431 mo
236.276 172.442 249.358 177.697 262.693 183.023 cv
269.357 185.688 276.083 188.379 284.496 190.398 cv
288.701 191.407 293.326 192.247 298.573 192.836 cv
301.199 193.129 303.978 193.36 306.938 193.517 cv
307.309 193.537 307.681 193.555 308.06 193.572 cv
308.062 193.572 li
308.91 193.608 li
308.995 191.61 li
308.147 191.574 li
308.149 191.574 li
307.778 191.558 307.411 191.539 307.044 191.52 cv
304.122 191.365 301.381 191.137 298.796 190.848 cv
293.629 190.268 289.09 189.443 284.963 188.453 cv
276.708 186.472 270.102 183.832 263.436 181.166 cv
250.107 175.828 236.526 170.419 209.737 170.431 cv
209.737 172.431 li
cp
.245212 1 1 .254002 cmyk
f
308.911 194.657 mo
314.579 192.722 li
308.993 190.562 li
308.911 194.657 li
cp
f
308.911 194.657 mo
309.234 195.604 li
317.503 192.78 li
308.022 189.114 li
307.883 196.065 li
309.234 195.604 li
308.911 194.657 li
309.911 194.677 li
309.964 192.009 li
311.656 192.663 li
308.588 193.711 li
308.911 194.657 li
309.911 194.677 li
308.911 194.657 li
cp
f
232.396 103.098 mo
164.82 103.098 li
190.916 74.291 li
202.231 74.291 li
202.231 74.5544 202.337 74.8119 202.523 74.9981 cv
202.709 75.1844 202.967 75.291 203.23 75.291 cv
232.396 75.291 li
232.396 103.098 li
159.274 82.043 mo
159.274 74.291 li
167.205 74.291 li
164.609 76.4845 162.137 78.8778 159.818 81.436 cv
159.636 81.6374 159.455 81.8396 159.274 82.043 cv
0 0 0 0 cmyk
f
232.396 75.291 mo
203.23 75.291 li
202.967 75.291 202.709 75.1844 202.523 74.9981 cv
202.337 74.8119 202.231 74.5544 202.231 74.291 cv
232.396 74.291 li
232.396 75.291 li
.642481 .563256 .55819 .323766 cmyk
f
164.82 103.098 mo
159.274 103.098 li
159.274 85.107 li
159.935 84.3164 160.611 83.5397 161.301 82.7788 cv
164.113 79.6727 167.155 76.8226 170.366 74.291 cv
190.916 74.291 li
164.82 103.098 li
0 0 0 0 cmyk
f
159.274 85.107 mo
159.274 82.043 li
159.455 81.8396 159.636 81.6374 159.818 81.436 cv
162.137 78.8778 164.609 76.4845 167.205 74.291 cv
170.366 74.291 li
167.155 76.8226 164.113 79.6727 161.301 82.7788 cv
160.611 83.5397 159.935 84.3164 159.274 85.107 cv
.642481 .563256 .55819 .323766 cmyk
f
192.02 95.1934 mo
192.02 95.2969 192.01 95.3838 191.991 95.4551 cv
191.933 95.6299 li
191.836 95.7168 li
191.729 95.7461 li
186.197 95.7461 li
186.09 95.7168 li
185.994 95.6299 li
185.926 95.4551 li
185.913 95.3838 185.906 95.2969 185.906 95.1934 cv
185.906 95.0898 185.913 95.0029 185.926 94.9316 cv
185.994 94.7578 li
186.081 94.6602 li
186.197 94.6221 li
188.406 94.6221 li
188.406 86.5703 li
186.362 87.791 li
186.258 87.8428 186.174 87.875 186.11 87.8887 cv
185.964 87.8594 li
185.887 87.6846 li
185.874 87.6006 185.868 87.4941 185.868 87.3652 cv
185.868 87.2744 185.871 87.1973 185.877 87.1328 cv
185.906 86.9678 li
185.984 86.8516 li
186.1 86.7549 li
188.542 85.1943 li
188.619 85.1563 li
188.735 85.1172 li
188.91 85.0977 li
188.981 85.0977 189.065 85.0977 189.162 85.0977 cv
189.291 85.0977 189.397 85.1045 189.481 85.1172 cv
189.572 85.124 189.64 85.1367 189.685 85.1563 cv
189.782 85.2334 li
189.811 85.3203 li
189.811 94.6221 li
191.729 94.6221 li
191.845 94.6602 li
191.942 94.7578 li
192 94.9316 li
192.013 95.0029 192.02 95.0898 192.02 95.1934 cv
cp
183.983 95 mo
183.983 95.1611 183.971 95.2871 183.945 95.3779 cv
183.848 95.5811 li
183.809 95.626 183.745 95.668 183.654 95.707 cv
183.57 95.7461 183.47 95.7744 183.354 95.7939 cv
183.244 95.8203 183.125 95.8398 182.995 95.8525 cv
182.873 95.8721 182.75 95.8818 182.627 95.8818 cv
182.246 95.8818 181.917 95.833 181.639 95.7363 cv
181.368 95.6328 181.145 95.4805 180.97 95.2803 cv
180.796 95.0742 180.67 94.8154 180.592 94.5059 cv
180.515 94.1895 180.476 93.8174 180.476 93.3916 cv
180.476 89.0898 li
179.449 89.0898 li
179.246 88.9639 li
179.201 88.873 179.178 88.7314 179.178 88.5371 cv
179.178 88.4336 179.185 88.3467 179.197 88.2754 cv
179.246 88.1016 li
179.333 88.0049 li
179.459 87.9756 li
180.476 87.9756 li
180.476 86.2217 li
180.505 86.1152 li
180.612 86.0283 li
180.815 85.9795 li
180.906 85.9668 181.016 85.96 181.145 85.96 cv
181.28 85.96 181.39 85.9668 181.474 85.9795 cv
181.564 85.9863 181.632 86.002 181.678 86.0283 cv
181.784 86.1152 li
181.823 86.2217 li
181.823 87.9756 li
183.712 87.9756 li
183.829 88.0049 li
183.916 88.1016 li
183.964 88.2754 li
183.977 88.3467 183.983 88.4336 183.983 88.5371 cv
183.983 88.7314 183.958 88.873 183.906 88.9639 cv
183.712 89.0898 li
181.823 89.0898 li
181.823 93.1973 li
181.823 93.7012 181.897 94.083 182.046 94.3408 cv
182.201 94.5996 182.472 94.7285 182.86 94.7285 cv
182.982 94.7285 183.092 94.7188 183.189 94.6992 cv
183.286 94.6738 183.373 94.6475 183.451 94.6221 cv
183.645 94.5439 li
183.799 94.5059 li
183.867 94.5254 li
183.925 94.6025 li
183.964 94.7578 li
183.977 94.8223 183.983 94.9033 183.983 95 cv
cp
178.313 93.5371 mo
178.313 93.9111 178.242 94.2471 178.1 94.5439 cv
177.964 94.8418 177.768 95.0898 177.509 95.29 cv
177.25 95.4902 176.944 95.6426 176.589 95.7461 cv
176.24 95.8496 175.852 95.9004 175.426 95.9004 cv
175.161 95.9004 174.909 95.8779 174.67 95.833 cv
174.438 95.7939 174.228 95.7461 174.041 95.6875 cv
173.853 95.623 173.692 95.5586 173.556 95.4941 cv
173.427 95.4229 173.333 95.3613 173.275 95.3096 cv
173.217 95.252 173.172 95.1738 173.14 95.0771 cv
173.114 94.9805 173.101 94.8447 173.101 94.6699 cv
173.101 94.5674 173.107 94.4795 173.12 94.4092 cv
173.159 94.2441 li
173.227 94.1475 li
173.333 94.1182 li
173.391 94.1182 173.479 94.1572 173.595 94.2344 cv
173.717 94.3057 173.863 94.3857 174.031 94.4766 cv
174.205 94.5605 174.409 94.6416 174.641 94.7188 cv
174.874 94.79 175.145 94.8252 175.455 94.8252 cv
175.681 94.8252 175.885 94.7998 176.065 94.748 cv
176.253 94.6963 176.414 94.625 176.55 94.5352 cv
176.692 94.4375 176.798 94.3154 176.87 94.167 cv
176.941 94.0176 176.976 93.8438 176.976 93.6436 cv
176.976 93.4365 176.921 93.2627 176.812 93.1201 cv
176.708 92.9785 176.569 92.8516 176.395 92.7422 cv
176.221 92.6328 176.023 92.5352 175.804 92.4512 cv
175.591 92.3672 175.368 92.2803 175.135 92.1904 cv
174.903 92.0996 174.677 91.9961 174.457 91.8799 cv
174.237 91.7568 174.041 91.6123 173.866 91.4443 cv
173.692 91.2764 173.55 91.0762 173.44 90.8438 cv
173.336 90.6045 173.285 90.3232 173.285 90 cv
173.285 89.71 173.34 89.4316 173.45 89.167 cv
173.566 88.9023 173.734 88.6729 173.953 88.4795 cv
174.179 88.2793 174.457 88.1211 174.787 88.0049 cv
175.123 87.8818 175.517 87.8203 175.969 87.8203 cv
176.162 87.8203 176.356 87.8369 176.55 87.8691 cv
176.75 87.9014 176.928 87.9434 177.083 87.9951 cv
177.244 88.04 177.38 88.0918 177.49 88.1494 cv
177.6 88.208 177.684 88.2598 177.742 88.3047 cv
177.858 88.4111 li
177.896 88.5273 li
177.916 88.6729 li
177.936 88.8955 li
177.936 88.9863 177.929 89.0674 177.916 89.1377 cv
177.877 89.3027 li
177.81 89.3994 li
177.722 89.4287 li
177.67 89.4287 177.6 89.3994 177.509 89.3418 cv
177.418 89.2773 177.299 89.2119 177.15 89.1475 cv
177.002 89.0762 176.828 89.0117 176.627 88.9541 cv
176.434 88.8955 176.208 88.8672 175.949 88.8672 cv
175.723 88.8672 175.523 88.8926 175.349 88.9443 cv
175.174 88.9961 175.029 89.0703 174.913 89.167 cv
174.803 89.2578 174.719 89.3701 174.661 89.5059 cv
174.603 89.6357 174.573 89.7744 174.573 89.9229 cv
174.573 90.1357 174.628 90.3164 174.738 90.4658 cv
174.848 90.6074 174.99 90.7334 175.165 90.8438 cv
175.339 90.9531 175.536 91.0527 175.755 91.1436 cv
175.981 91.2275 176.211 91.3145 176.443 91.4053 cv
176.676 91.4961 176.905 91.5986 177.131 91.7148 cv
177.357 91.8311 177.558 91.9707 177.732 92.1318 cv
177.906 92.293 178.045 92.4902 178.148 92.7227 cv
178.258 92.9492 178.313 93.2207 178.313 93.5371 cv
cp
171.4 85.6982 mo
171.4 86.0146 171.339 86.2314 171.216 86.3477 cv
171.1 86.457 170.88 86.5127 170.557 86.5127 cv
170.247 86.5127 170.031 86.457 169.908 86.3477 cv
169.792 86.2383 169.734 86.0283 169.734 85.7178 cv
169.734 85.4014 169.792 85.1846 169.908 85.0684 cv
170.031 84.9521 170.253 84.8945 170.577 84.8945 cv
170.893 84.8945 171.109 84.9521 171.226 85.0684 cv
171.342 85.1787 171.4 85.3887 171.4 85.6982 cv
cp
171.245 95.542 mo
171.216 95.6582 li
171.109 95.7363 li
171.058 95.7559 170.987 95.7686 170.896 95.7744 cv
170.813 95.7881 170.703 95.7939 170.567 95.7939 cv
170.438 95.7939 170.328 95.7881 170.237 95.7744 cv
170.034 95.7363 li
169.927 95.6582 li
169.898 95.542 li
169.898 88.1885 li
169.927 88.082 li
170.034 87.9951 li
170.237 87.9463 li
170.328 87.9336 170.438 87.9268 170.567 87.9268 cv
170.703 87.9268 170.813 87.9336 170.896 87.9463 cv
170.987 87.959 171.058 87.9756 171.109 87.9951 cv
171.216 88.082 li
171.245 88.1885 li
171.245 95.542 li
cp
167.452 95.542 mo
167.423 95.6582 li
167.316 95.7363 li
167.265 95.7559 167.193 95.7686 167.103 95.7744 cv
167.019 95.7881 166.909 95.7939 166.773 95.7939 cv
166.645 95.7939 166.535 95.7881 166.444 95.7744 cv
166.241 95.7363 li
166.134 95.6582 li
166.105 95.542 li
166.105 84.623 li
166.134 84.5068 li
166.241 84.4297 li
166.444 84.3809 li
166.535 84.3682 166.645 84.3613 166.773 84.3613 cv
166.909 84.3613 167.019 84.3682 167.103 84.3809 cv
167.193 84.3877 167.265 84.4033 167.316 84.4297 cv
167.423 84.5068 li
167.452 84.623 li
167.452 95.542 li
cp
.75021 .679683 .670222 .90164 cmyk
f
390.017 103.098 mo
368.307 103.098 li
365.07 95.1847 360.522 87.8084 355.087 81.4572 cv
352.889 78.89 350.546 76.49 348.085 74.291 cv
390.017 74.291 li
390.017 103.098 li
350.301 103.098 mo
316.896 103.098 li
316.896 74.291 li
325.641 74.291 li
350.301 103.098 li
0 0 0 0 cmyk
f
366.141 103.098 mo
350.301 103.098 li
325.641 74.291 li
345.026 74.291 li
348.051 76.818 350.916 79.6605 353.567 82.7578 cv
358.691 88.7431 363.011 95.6749 366.141 103.098 cv
f
368.307 103.098 mo
366.141 103.098 li
363.011 95.6749 358.691 88.7431 353.567 82.7578 cv
350.916 79.6605 348.051 76.818 345.026 74.291 cv
348.085 74.291 li
350.546 76.49 352.889 78.89 355.087 81.4572 cv
360.522 87.8084 365.07 95.1847 368.307 103.098 cv
.642481 .563256 .55819 .323766 cmyk
f
349.622 95.1455 mo
349.622 95.2422 349.612 95.3291 349.593 95.4063 cv
349.534 95.5908 li
349.438 95.707 li
349.312 95.7461 li
343.46 95.7461 li
343.257 95.7168 li
343.11 95.6299 li
343.024 95.4355 li
343.005 95.3516 342.995 95.252 342.995 95.1357 cv
342.995 95.0254 342.999 94.9316 343.005 94.8545 cv
343.063 94.6318 li
343.159 94.4473 li
343.325 94.2441 li
345.378 92.0645 li
345.851 91.5664 346.228 91.1182 346.513 90.7178 cv
346.802 90.3164 347.026 89.9551 347.181 89.6318 cv
347.335 89.3027 347.437 89.0059 347.481 88.7412 cv
347.532 88.4756 347.558 88.2236 347.558 87.9854 cv
347.558 87.7529 347.521 87.5332 347.442 87.3262 cv
347.364 87.1133 347.255 86.9287 347.112 86.7744 cv
346.97 86.6123 346.79 86.4863 346.569 86.3965 cv
346.351 86.2988 346.099 86.251 345.815 86.251 cv
345.485 86.251 345.188 86.2988 344.923 86.3965 cv
344.659 86.4863 344.425 86.5869 344.226 86.6963 cv
344.024 86.8066 343.856 86.9092 343.722 87.0068 cv
343.593 87.0967 343.495 87.1426 343.431 87.1426 cv
343.325 87.1133 li
343.257 87.0068 li
343.208 86.8027 li
343.194 86.7188 343.188 86.6221 343.188 86.5127 cv
343.198 86.2988 li
343.228 86.1445 li
343.276 86.0186 li
343.411 85.873 li
343.476 85.8145 343.589 85.7373 343.751 85.6406 cv
343.913 85.543 344.112 85.4463 344.351 85.3496 cv
344.597 85.2529 344.864 85.1719 345.155 85.1074 cv
345.452 85.043 345.759 85.0107 346.075 85.0107 cv
346.593 85.0107 347.042 85.085 347.423 85.2334 cv
347.81 85.376 348.13 85.5723 348.382 85.8242 cv
348.634 86.0703 348.821 86.3604 348.944 86.6963 cv
349.073 87.0254 349.138 87.3809 349.138 87.7627 cv
349.138 88.0977 349.104 88.4336 349.04 88.7695 cv
348.983 89.1055 348.856 89.4678 348.663 89.8555 cv
348.47 90.2422 348.188 90.6758 347.819 91.1533 cv
347.458 91.6309 346.978 92.1807 346.376 92.8008 cv
344.7 94.5537 li
349.302 94.5537 li
349.419 94.5928 li
349.524 94.6992 li
349.593 94.8838 li
349.612 94.9541 349.622 95.042 349.622 95.1455 cv
cp
341.604 95 mo
341.604 95.1611 341.593 95.2871 341.567 95.3779 cv
341.47 95.5811 li
341.276 95.707 li
341.192 95.7461 341.091 95.7744 340.976 95.7939 cv
340.866 95.8203 340.747 95.8398 340.616 95.8525 cv
340.495 95.8721 340.372 95.8818 340.249 95.8818 cv
339.868 95.8818 339.538 95.833 339.261 95.7363 cv
338.989 95.6328 338.767 95.4805 338.593 95.2803 cv
338.417 95.0742 338.292 94.8154 338.214 94.5059 cv
338.136 94.1895 338.099 93.8174 338.099 93.3916 cv
338.099 89.0898 li
337.071 89.0898 li
336.868 88.9639 li
336.821 88.873 336.8 88.7314 336.8 88.5371 cv
336.8 88.4336 336.806 88.3467 336.819 88.2754 cv
336.868 88.1016 li
336.954 88.0049 li
337.081 87.9756 li
338.099 87.9756 li
338.099 86.2217 li
338.128 86.1152 li
338.233 86.0283 li
338.437 85.9795 li
338.528 85.9668 338.638 85.96 338.767 85.96 cv
338.901 85.96 339.013 85.9668 339.097 85.9795 cv
339.3 86.0283 li
339.405 86.1152 li
339.444 86.2217 li
339.444 87.9756 li
341.333 87.9756 li
341.45 88.0049 li
341.538 88.1016 li
341.585 88.2754 li
341.599 88.3467 341.604 88.4336 341.604 88.5371 cv
341.604 88.7314 341.579 88.873 341.528 88.9639 cv
341.333 89.0898 li
339.444 89.0898 li
339.444 93.1973 li
339.444 93.7012 339.519 94.083 339.667 94.3408 cv
339.823 94.5996 340.095 94.7285 340.481 94.7285 cv
340.604 94.7285 340.714 94.7188 340.812 94.6992 cv
340.907 94.6738 340.995 94.6475 341.073 94.6221 cv
341.267 94.5439 li
341.421 94.5059 li
341.489 94.5254 li
341.548 94.6025 li
341.585 94.7578 li
341.599 94.8223 341.604 94.9033 341.604 95 cv
cp
335.935 93.5371 mo
335.935 93.9111 335.864 94.2471 335.722 94.5439 cv
335.587 94.8418 335.39 95.0898 335.13 95.29 cv
334.872 95.4902 334.565 95.6426 334.21 95.7461 cv
333.862 95.8496 333.474 95.9004 333.048 95.9004 cv
332.782 95.9004 332.53 95.8779 332.292 95.833 cv
332.06 95.7939 331.849 95.7461 331.663 95.6875 cv
331.476 95.623 331.313 95.5586 331.179 95.4941 cv
331.048 95.4229 330.954 95.3613 330.897 95.3096 cv
330.839 95.252 330.794 95.1738 330.761 95.0771 cv
330.735 94.9805 330.722 94.8447 330.722 94.6699 cv
330.722 94.5674 330.729 94.4795 330.741 94.4092 cv
330.78 94.2441 li
330.849 94.1475 li
330.954 94.1182 li
331.013 94.1182 331.101 94.1572 331.216 94.2344 cv
331.339 94.3057 331.485 94.3857 331.653 94.4766 cv
331.827 94.5605 332.03 94.6416 332.263 94.7188 cv
332.495 94.79 332.767 94.8252 333.077 94.8252 cv
333.304 94.8252 333.507 94.7998 333.687 94.748 cv
333.874 94.6963 334.036 94.625 334.171 94.5352 cv
334.313 94.4375 334.421 94.3154 334.491 94.167 cv
334.562 94.0176 334.599 93.8438 334.599 93.6436 cv
334.599 93.4365 334.542 93.2627 334.433 93.1201 cv
334.329 92.9785 334.19 92.8516 334.017 92.7422 cv
333.843 92.6328 333.646 92.5352 333.425 92.4512 cv
333.212 92.3672 332.989 92.2803 332.757 92.1904 cv
332.524 92.0996 332.298 91.9961 332.079 91.8799 cv
331.858 91.7568 331.663 91.6123 331.487 91.4443 cv
331.313 91.2764 331.171 91.0762 331.062 90.8438 cv
330.958 90.6045 330.907 90.3232 330.907 90 cv
330.907 89.71 330.962 89.4316 331.071 89.167 cv
331.187 88.9023 331.354 88.6729 331.575 88.4795 cv
331.802 88.2793 332.079 88.1211 332.409 88.0049 cv
332.743 87.8818 333.138 87.8203 333.591 87.8203 cv
333.784 87.8203 333.978 87.8369 334.171 87.8691 cv
334.372 87.9014 334.55 87.9434 334.704 87.9951 cv
334.866 88.04 335.001 88.0918 335.112 88.1494 cv
335.222 88.208 335.306 88.2598 335.364 88.3047 cv
335.479 88.4111 li
335.519 88.5273 li
335.538 88.6729 li
335.558 88.8955 li
335.558 88.9863 335.55 89.0674 335.538 89.1377 cv
335.499 89.3027 li
335.431 89.3994 li
335.345 89.4287 li
335.292 89.4287 335.222 89.3994 335.13 89.3418 cv
335.04 89.2773 334.921 89.2119 334.772 89.1475 cv
334.624 89.0762 334.45 89.0117 334.249 88.9541 cv
334.056 88.8955 333.829 88.8672 333.571 88.8672 cv
333.345 88.8672 333.146 88.8926 332.97 88.9443 cv
332.796 88.9961 332.651 89.0703 332.534 89.167 cv
332.425 89.2578 332.341 89.3701 332.282 89.5059 cv
332.224 89.6357 332.194 89.7744 332.194 89.9229 cv
332.194 90.1357 332.249 90.3164 332.36 90.4658 cv
332.47 90.6074 332.612 90.7334 332.786 90.8438 cv
332.96 90.9531 333.157 91.0527 333.378 91.1436 cv
333.603 91.2275 333.833 91.3145 334.065 91.4053 cv
334.298 91.4961 334.526 91.5986 334.753 91.7148 cv
334.979 91.8311 335.179 91.9707 335.354 92.1318 cv
335.528 92.293 335.667 92.4902 335.771 92.7227 cv
335.88 92.9492 335.935 93.2207 335.935 93.5371 cv
cp
329.022 85.6982 mo
329.022 86.0146 328.96 86.2314 328.837 86.3477 cv
328.722 86.457 328.501 86.5127 328.179 86.5127 cv
327.868 86.5127 327.653 86.457 327.53 86.3477 cv
327.413 86.2383 327.354 86.0283 327.354 85.7178 cv
327.354 85.4014 327.413 85.1846 327.53 85.0684 cv
327.653 84.9521 327.876 84.8945 328.198 84.8945 cv
328.515 84.8945 328.731 84.9521 328.847 85.0684 cv
328.964 85.1787 329.022 85.3887 329.022 85.6982 cv
cp
328.866 95.542 mo
328.837 95.6582 li
328.731 95.7363 li
328.519 95.7744 li
328.435 95.7881 328.325 95.7939 328.188 95.7939 cv
328.06 95.7939 327.95 95.7881 327.858 95.7744 cv
327.655 95.7363 li
327.55 95.6582 li
327.521 95.542 li
327.521 88.1885 li
327.55 88.082 li
327.655 87.9951 li
327.858 87.9463 li
327.95 87.9336 328.06 87.9268 328.188 87.9268 cv
328.325 87.9268 328.435 87.9336 328.519 87.9463 cv
328.731 87.9951 li
328.837 88.082 li
328.866 88.1885 li
328.866 95.542 li
cp
325.073 95.542 mo
325.044 95.6582 li
324.938 95.7363 li
324.726 95.7744 li
324.642 95.7881 324.53 95.7939 324.396 95.7939 cv
324.267 95.7939 324.157 95.7881 324.065 95.7744 cv
323.862 95.7363 li
323.755 95.6582 li
323.728 95.542 li
323.728 84.623 li
323.755 84.5068 li
323.862 84.4297 li
324.065 84.3809 li
324.157 84.3682 324.267 84.3613 324.396 84.3613 cv
324.53 84.3613 324.642 84.3682 324.726 84.3809 cv
324.938 84.4297 li
325.044 84.5068 li
325.073 84.623 li
325.073 95.542 li
cp
.75021 .679683 .670222 .90164 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 16.0.3
%%For: (Joel Low) ()
%%Title: (binary-fail copy.eps)
%%CreationDate: 5/5/2015 11:55 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B6PQAdNH2pk8aF*O@9YE2tFi-HdhP#,`kD%!<P*%k5"NGp,=0i<E;s,1O!JU]C-aC;/%8mB1D"4<3H&QW72`(\`R8B.E+n.
%Wg(p@1SpMnfH4$j412D0a&aU'.#NreZ_hH;:tj!jV@GK5XJ-Rf<\$"6^-AZXmRb%d;XJSsc$H_P=\e)Y/iQ[`jYqE^:>Jn8p#^a%
%\U+)5"6s^il;+6[]io0Z5KhlIXCNUYQ'J9&GHG13qYklF[[0pI/JGYj6s@:j5]b:-IOB++C%i9+kLFGdL('V^1K4+eRsf91!7%%E
%"S7_\L1qTm9"miRU;.RLOps".\N?k+eN2N0\Q`i-*bK],m:P[jh#?L__Za)OW.)2?j_g>-co/4,6BU2)ps+d!$:qEj=gG?A->P'J
%b$)*FVbB\,g8_!I$rtV'Z=:-i0!_O-euJaQ:@2$(Q"lfIFK=4\YPf!)8CfUhU7^f"flt-`^22<10GQWJRj.O0=fKt4N&4D3QO,:d
%s((kfQ+/6Ohl9s)Q"Kt6OgU^bS6fU^%a'9&gHm:.X_QmjGsqqLW*36Ed\4@UAAdnQ4_;O,AW(Y>.4JCXSUP/EPI6EF@7.[8'3G&6
%#iN3uH`K#iq&%ASm<5Vk;MD*G/G_ZpOgTlBD#PLq/kj"6XZ#tLJKj]@!e!Yn_fODL`B-n1UKg1I!AbTI!?=lFkbq?,GKW7cQ=dr7
%rKYP(h5tkYT`kBp'gE-05A_?(o6CgG<W&ntpf(8`WN+CEV%Tb&Wu2*W1CX1m(g,!9YaAj`9"\$U`\Ou^ASh-3WnTEIZY_7Jhs_;;
%jmuS*T?!u-4?gmMYtV-M:J3"O+Os+2/5RhD8p&F%aE0hW:\kd+o&m"[eaX.c_g12g(;kFfg!XLm.K%+>3%=bNF6Db[Q#U.*M8+"-
%pk_^BAC78o;YWiGNaE?Vo>4f_:?`%g(etN)YtV-M0YU.in.a=cQP<Hp8ZU:mdg=C[e'ZSBal)tmnKRTI(;i/l-T4C0P0TR]@ge'!
%YSbZJY;AZWXc.>>:],n[Ui_-ZD"%_I:Fq6A`)!t3P[#VWkm4Lh:((V%S<EZqd32EC@kij'NZ1$+3WV!\3],PHD4<0t/].Nr)4VhI
%;4Jc.:1m<DiuIS&Mc!Zu3E!N:b4pg)E.UoW;`X"dME]`!V0#JXS7jn<OhjtZTgZ_bKWcuH4rk`a4meX]NsqU5%%eU^4r32We)k?H
%oJulj##?,%;Dqg-MBLV@M>X-EluG=m"4]F+\pVM[jmiGKFNst@-'IOG20$oc=.A7(>n%be7jk;(U4a&D&"3/c)l?VH=X*n80,'U+
%qkkk7Oo(LE6hQ36gqWJ'<7c7"ErXR;VFc9LJ*B2@U;&;'l.ohK[^PBEpFlK3bL,58?ht;5(CCl;rh]XP7Jbd;9E.T/5:5Q5%IoXb
%0E'.FdD%Y27E]ImWIWVX$X6Z[s%3HIY4%[15@b5(")s1tPmi%L(9f4deJ//9H$Rpc]t4I;'E;Na(Iin"@D&,6H;mc4KT$5XTe#n&
%;I)"s0_g/6Me`Nh;](pL:f.^DMn1UO*3+L)PMmP%@(HW=`AeL($pu@hPNb"]pu$kb4ja5mbZ0iaUl`>;dQ@CGo,jr(f@qk)O]iBe
%3sCa:-2Lh7\gkc]nm19k%@rY[Z:uKESNOo$$EGW_k^m.FefZVGTN+#7*HZ.$]#*W%^UqfOE_-@;*5)jIBL/Od%7pYYK/_a5OPiF!
%PCVqU`S87E'MSC'9Va43m;tJYdNV!ajuGVjU4XSP'*i(\PKfDs"(I$Dap(W`d(_2?Z"ES9A^80'\0C7a8HU$pHHF0t4#E)[LfDHo
%.+o09=9/>8%`DaB0(H[bDDR$DKdf6sMat$)(Fb:r-2ts][i*SV[OB=\[OEm$#m#77'U(jhWBg?)LfRAts(pp.;O*BMUgnO.!E.Wl
%f:B1HW]4[3;'kgPS=p\+2@<kqJ`^5pOiNVPXI95I`2^oY9[`bfZ6".QCBF4O1CBi%pql:.MB")4>q&2AA&?A7*')=o.d0)lrVSmP
%YTj$%jN(Rs"Nhgt6@A487r0A0c7WQ*"]jfF,;XHgZUI4nj\?A:M`T.(^8[&nC_mTl\(ONUS3ulR7*acq`4i$0QU2a16cqFe:>'!U
%/nkgiCLY&Qn6d`o*@MO&AI];!l8UP<8J'Aa(BPo:P;l2f1;sIRBlG*5&[N39:U_cs]Gu&4k@.a`QIrik!^3cm\bJH(87r"VG3$;K
%'p.2+b'YJMeF8rp7UFTT,+5Pd;[IOc?8?]r]52OSjO^K]QJ4+nO4SA2c<H.)Wfi09Y0%q*2XWfZ09/AoR)cZ4BgQWn=Vm#_3Kiri
%m#<EJNVH;BKgD`Zp[2L^I<-/7'cOkuqOaOYgndkg*"O[LL<7(/#JUFA[O%EA-L_NS7&JOFIZ*Hq6k(G$$NmV"W/f0,7-s1j<WGTg
%TEBjEQ0^),,q^,R.U8?;)IZS]Kq=Eg%Ik.Anlmf2/]3Iq18F*I+Nrcu':R!\0jDsHs.]rlr<&'anfO;NNm./nT8TP[(G9me=c]MQ
%@He>/\9t/>6m\W$;>/isg!T$H@t<G3BFkt6%XZAU%*N%5RI6dsNl)&J)f\.ia6F59P<k4bC`(91q'D$fd"9NB;tHX.2&O@$deW"L
%W93NO/e2o8WXJgP.qNs<gmcCTr].gmUQX28>p+huXF%n0h9J+u[:;Yi?9_0n"8L%F*%)UV22,'&_Z]!FY,M6R>o,?AntHRDGd;^o
%,0X,GY'Wu2B0BK:/`ALBGsr;b<&CNno;#V)N(6<1LHJ9XLZfC`=#'_]5[@@U-k+[NF`3'cZ?gULb>UR<BP?kE\Q*HFE,1A[br7k,
%0='VSH_%O5p#[3?lM_pPcE#di(>HnTJ>].h<2_ZnCMiF!,PoW13iRVH_sMX=]=$C<D3"RWfr?m$X/W/b9=NTWrD0ha3e%&35A!h3
%ZMU-&BU<)!%J]=Tad-_EfpDt:ol@[5U/.I8q$DOXnSaTeL$EH[rTQ4*TuG$DeU"PJ2!dKMNCrJ+\_Tm+pdr0S.(<.9J^a<Ym8%t)
%#*c[#]<F]J<nj/\+Gj&AAUIcO'G)<3lDiWf:Z^ll7]#.P:4N*E:Ou*+4TG<M\QQ+Y5+MmHM"<dgkdo;fj1%C1g&CEPV_4F_\r-ht
%J3@oh\_X*)r\^6+KnDF:L]?5NoAt;3p=:k*hJ4c1m0>at3XVjULl,LEeq8;@5&r^MXmp>pLD*Oi;?Pko_Uai\cMpi2^:])CH#Au'
%[;$+'ipsh7)AO+Qq0/rFFk<\iftu3*WUok)$c,rN,a<E*eXo)mL^IO00ig0aoGO6?l2Fu/o+XjpNTP^/jB$(6n^2"O)OHK,T@MEm
%4Ph:!b'C_>#?\"V&^=E(rskbZ7>k"3/3/0b`6(>$Ebaj=eu:gaBqk]gS9N.0++6#0.sG_]Seg&)O(pmR.-+8(\BV$_X+f78*loe>
%s%Y-J)OfKgl:\Hh!KDq3BgII_k@BX<])I'C%k4mkhgPUm5:K`-*N&6GUf:n6*hM=XpfkT.X08LfeCYkBN6p-,2SP=uSYoNHiR1:8
%"@LNeo?B`.kTJO]]hOJsl29R-"SUA2,_D_!%TkWS\a3:RIo[N/PmY>:=XP$Qa&"Pb3#Z"h1:GoW3m%ADEk:[KQ&%UF*Enb"Hg^g.
%UsfpQiAM93O747km2=o8.K@U#Thb-]l3fUr7j!m@Jjj)T.-\3#r%/D.Mo4H3n@(AFEN&mQLVLgeDfPPV*<$_/-k;6oipaE:r%/D.
%Mo4H3&B1@=>9*VXLVLgeDfPPV*25F"IZ),$ipaE:r%/D.MaJ26p2=sG>9*VXLVLges5W,.%cHI;HM9^iLZc(k<o'$rPSVqmaQ.i8
%im.BCdB1,R<9>GucUWjK+D6IeNJ_[q./jM#8\&0pG,o^'-dToTm=1<2_8,aD+QiU*(clqns)RO@S3Hg3$$?6-H5<B%b-]6?#HqZp
%5,8E7Z)RcBiR!r6)V,!01k1&g4%B.T_uWCfpf$)U!k:EV3,2Ko+cf]&RD1rO%4JG_mWR?mkO3;r6O4\>Dme?]s(X>7l:!,qnm8@u
%g=6BX"hJsq:usgZO7(o-.XR\RDKMKL/@R\k^mq&h!W1`ZJ!TEX:18Os#q=L,c=Z1jBKG"Bs2UlAXL`-Z/Cg4C+4Wt-2"@:Js,%+H
%f>rm*j<TolRQ7QpO2u,M9N3Q,8tm.D.<77CP+eUN#47q:1Qnj3s)p`m?RRK*R9V:Nfma7Cj#g\_45K&^^Hh_qUEmG+.AOS13Y_?C
%3Ml^6p]^rpD]@%&?*)h,rQi6/^Ae_*jILVajo6AVY%UF.1CPeAFB1!F,GtEGXhDCqi^'L+^I!D8WX1;D@`M755IF,X4jj10aa_;%
%q"nR]B(o@^QMn;:MSBTZDH_N;Rb$BrP%i$#iYFSIk@PM=NJ$M3QbIi*dI_`8rG-3V+tV'0hsHa[Gm3iT_l*Q@pTGFSB=1sHJ@.7d
%_:V*cAtm./-AcD2-r$`q8m,;\ACX@VR[hnb?'SE`V=Ua)o%ND7o<7I!?:W/df2JRA(LI>n/$i>D@["`b[bB7eh(K'i,Q+W[g583#
%V'W/X-j5eaKTg#Md3TXPOEXiS3/I<1W-);:o&#5ap'2]9<kJ7a/@R,YFG):d[26Ui+1gCH3eI0<l\m>>p4@4dN$I@BX4AqmB64E$
%9IJ([%4=I`.mBBI?P/mB"kbPbFut'q/Bi;P7!$!L_(\Bg+2t7rkLqCe.P:p>8"\ngLVNFUX4d0`b4Q[>;6%S)?YS&r^*S&=f%Vf7
%DXF=0^:VY>=h3"`@]$lSqlO.,:2uFkI5IBG+3j7llA_[@7[:)uReYb4e2%<Aanl)9V<q6_go@e]S_E7NSO?n7!Wn:E3PE)`gX1H7
%!Xj,)j[Q.J#*+0.)obmY5^Ud=F>21Fd+2)%N:&cIfsc.T&KA!/gJ6hOcui>!0.MliLb1-;+h"U:#2)g)eLAXN]_QU.cZ84(7@3@D
%b*."V;f2P;9jL`ulB5E6noLp>lZ,U`*BM*rF6]%)WZ;k^9rMdr:\+@;e8r0,DS.sgo'W_cWI98ngc*eKoL]25^CuJOn#ApDSG((?
%\g^K]kRqMP`5H)loBss^Te)m!O\=IZa5>\g&9^_n=`\621VeW`j6[fCJ8s"R$/Deao:?)Q.D3=p?]P-hnu%F29(cf&I8t173q%S)
%;Lp]9Br[]R;jJmPn0bY-oH`q.("I]>?8)<.FYsY9[.#PU6]A,=H+2Sj34<?:#@Q8Sgt)NYROuiJBJYt*B/;PWXEdu)9[XPj0MtJo
%Qo/`o&'UcYfI(-6rOCU\<<#"_^,-do4tDn5m7pnVKQn\A0W^j%V,8eVe(@L_m^1ESm%u6+Z0^+>i2V^@:)%"d0(kZ_<nf4]2!`*0
%GcB:u+EK7?p_V$,2\6dr?>\l)!]m\pCK+5<OK;\@!qf,fdId=gg+@a)lWhS;_9AQdGfh>"@N&hm1N*ZD,*M85_&=`+m$XVJ>aZO5
%n@2JIEKu6T7i!_B?`I=i[sBp?3%el?Be+9RBF4i"_%Q,B>,XYp6tYACTL0*-I'o;]4c]4)$5efKn4=0*H"9W;@763TXJT4!(*t_(
%3f,%1;HTTWfWn(^KbX1-MIIuSfRRsbicoUh[cE7M515H>R:NNI<o=j2be.7h4&q&J6>7?<8KQZ7?;_5L'h\l<Rh@p7*IRHZZ`tap
%'U=dE?apTL.'X1H@[.ng=pgdYE`1<9+Xb<TkmTV^Q7Wu3*ph[.`gP4k4f_\J@YVD05D2Se$=^e6UuV'NH4KHN,DQKN[&'rsndB_f
%Lp#-S[I"d(n>+QMFG#YZO06YhNY+NPhHg;Wr,Sgo%LO!UhjOSMfDllDFepqh#ru!0$qRJlq-:$uZ^+OVq[b=CQWg<=o3tW\BYFWF
%AI$R#GAVR"3("+$_4k"/i,2"enQsp:h\:ob$]30"[A\dNMg8::H)?&:4R0DRlnKa1Et<7_@Dsj(ok_42(+hmN\jYFqQcaTD*8+Ee
%fPaC#,>1cH:X8jQ(7'tJ(MtrO^1cJMKR(ap@#PjnLbdOjK_]2W)GSgI9@Xs!r5*uD'@_o%!A:OAg_fM.YNBo7"Wgnf4?<GWHHK[J
%ja'(e=QcI1HA79*pitS$Y$HbGFK.==G"bbPmffDIl1LYH'mO,ZT5!gV_F>dY$6[@_Ra:d*YnUY-+iZYm'dEpAZ`B7T]]$Ytd<<+o
%CkXc=#4:>#"s[62<=hL'8Lh+tTCBAI83X1W-$f+SXFse(B_bl72CfRu!%c%m^^V2]Vqb,<(DV/U:eSEIRf8JArCL/8C1.9]p`e($
%*K6i5KtC'^2SlcFL(8bMD@>L/'Jlf.Pc#H`HmsRU5u^i^c[Vi"D(pOpd;+BZ1d#6V\#U<0,/['!O;QAI;`#L>Re)m3+U:o(6qLnL
%8u:7@]er33Y=&\RB=9H.fd80$I'*'$6G[]?o3CU13X/ObdH4`%hRV7m=le8'+tq1FO?j]Cl;853U5mfM`lh;kW`&tW[jtT8_XYWG
%!N0?P?U69Y2r"AM\KI\MMeu*T&dIUq/K7ECX:RTL-;1&O3p=XGXi2(R1M3MTQWF(Hmg&q`$b\BC!abjmh-/X@ZOelb=L*7`PlMi+
%@+5<_DkA-)C'0MP71*c\eo?`Ga3l^l:F3Wg/4h;l(NaFuQbTh`*[hH%/8,3odX6WrGjmE'p_gfQS#s1UBMd6p=GSKZ(67Fqp5;!P
%cfK<tC.[5qJ;b2M;1d5%EF*X=7<N-o(+0n7qaQaAZoaERKuK/WERnp#S#t1M,U+hiC;2YGOl?qqFhXIg/ldO)WrpiLZPmC$6]pOM
%RZ11&hT7[UDe3A/3i!Jd!T5DL@V?#TJmN31ZrWNu]s8TC#ptC%[e#O25$+M`Kr(eTN0?)+HnISag[c.9K=&I%XfQ_^c/&-e'l1:*
%p9F7OU2N1`6OGT6.0Ql-f%)ED_a-"G5m9aPMG^=Xf>.nFfke>i8K:X&'=Ib67--Ma@?1uF:d;rZ!Jdb?5a@F?YMY>+.%6i`=L>l;
%Ri))i.[:q^k;5K/=%nLjH6"Z2U8=-cbarHG5H<&/HkUnX9'ST]ro<e7IQ$ks'''"?Jh8BSN'To]'LE&MZ^VV-Li;FgI/Y/JJ.!Zm
%h=k"VS/S@mS.__K4H;r6H1!+'-p0Z;Is7oHk"?26#5ddl]Vao'MpWO#h:+WfrDftl<84V,Q`__ppmsJTD/Hc*'f9pPFUE6J4`[Hk
%eiLTK&\bIjCQ[W\]j'lq^1^3=n'5US"MKXh=n;E2$pJc:jdu5]Mi=6[hP8]LqkI(Q]0MA4J8e;PpZ?sKC6a=jhKeqCl6/.X[8suP
%eJ",1NNricQ+ka3`!4K^6O`I>Qokli6kDh+[a+KV]9Zd%,+"IYkL]C!k5<6Lo9-I;J%.JQn_R:9S"d$V0!!9M;s,*FYbH#?FE<.;
%Hi%;cibY`%Ga30tSYsX.g6qK&SlL!cdYgaSB@'A!If3b64aV9dV\e3*nEf=R2Eh)RI%FY(]IourV*d[T>._n<rq1A^p/L?+SO46"
%iBu?Zrjf2o/CcLnNR-A0`Lj!(q*UDsmSdi_WJYn>\(g4acW^dZUV4p#]<cDBXT$;,R^_!NZ$h*P'lHZ'(T"OA[24++bA=D#eB.\:
%LIe33CU^_D_U[[aHI5p'ddo-FF.ASNY[Vq;WM6;'CEN6ACc>G5aj#^,dh^6u>7O,C^I9KTDXU9uEi0&rOBH_S%l4B#Apq>M/!XE*
%=PM!<`6KV*goa;8l'haHa?c`[?Kk_&n*AQ=[%s6k]Xk%nRT%i'k%Q/ph,L7_JrF2`n_+NL\]q4%@"$A)Dl9Mh`?;j/c*R"2=KdeQ
%LSslf?a%akXR3EfqU\tF$LIH5\31/aF_@HJ]Q>+JlY?:!1N@PYK&$Q)pN17aI5ued(Y%dKb)<\Hd]5)WEHQW(qg'REOH-`<>H*iC
%NWXVK0E&1')sYR;:p3d]ojoMXf4d[c.8ojJR'(U2Og_aR2o0PeI9e>uMe?9rXkC%`1S;jlf9;U?dOX^>/Zma@>'_R0!bFP3]h<_(
%IOJHl@'?oM"Jn7ph<a64E3HC74m9o;Z.l=!,csanp%m*c[,gQ2?B9tb'48cRU"_)>j*'4GB]Vip^$]\b%J_ol=)IYCI\hL='\M_r
%WN8HG^5g1/h*9/<oP.&nl'B$qdd,/A<,,`E\@pm<KT<Mhf;9(Yn!AU=DP(*6TlZc29P<%i(@OI[*p+?\<;+V]k!B;7T'Mg4cI4.R
%=gR5YojIOXJb=>qR.8GOe?dh4[o]@^EOrV>l/;0_%.87^r7a9BH*IEt4g%k16@4E(p9S,.L#D31GOs8Y_:NmMYP[VF6)h5R%d`jt
%\$kVrMJM8>q#&LKp_hXu6+W4#mGM:](+1^a:NJ$P]qVaAH<fch:A65:I;4K/H78_ogrP3A>+GVtBsmQ.=6RXgh:mXAa3\.BNF*[d
%6@-=(UkeNeq4M&Vd`.>#CEL_u7gjl=IXJeW$LP6(h8m6_om/%b/05KrYCt@%>^Io\?[#:iK6hCDNts*FYKuL8O*TmT\Y;]C/WY+b
%h-Pr[Z'o!:J#di$4'q.8olr([oiSl`KO39aIa,4S]NJXUIb8_U?Dh,u`a;<@d#F4#Oa"LEi_1gCh/-Z*MnO0$BT[)%I+OG<@e!Nc
%p:?A80"AThKO3s-mk^5S-DAr2jnuho/lq/eXJ7lDFfDiO@qpDYAnM?ph+RWk9e3d7GLA!ES)r,#Dn<]PCW-h<lc/&&JQKMeRX`"0
%M8#0sI\,W>Vb6\>XXlE&I8=,pXaEpBe]MMT\@OR+bd4HR_k+;f+qAB3:T;H5>Wj^f!^3"KG"k$M<#+u2=5MhP8-`cH>1h:Ul(G>#
%OJgH"5_6RiR/UNJ<A-tb0=tk*:S4HSr(#B5<3U3,(8UQ&M0);]]<$+ZH'enbW_8]CYAE^We[1!Wo:7dBJR5=`,@+TPfB?-da5PK1
%l0<,*,OFZGoOH>+EfejVi(3]Q'_>b`:Sc_Oo-*Jb0BqHlG0]h]5h`n#4oBV3#cW8k995DiC=q!0l,e1U6_6KLEAlL\I6FAk3@!9C
%Q,A]]cP(>:qQUb.oN^6;*T%5pg.P@.qG:oMeLRusc*.*1i2?E]j'lT-HQ.i!V/qfkRGB*r<X([Wb`7Ij4'Ut9cK709lBd)p\"6pV
%p3m00eRn8IfW6Q@VdT`Mk#YVJc\/4l`ORee'S:F2De1C7o=8JrLe=uG[FUT#]G9n93A*@@rYlH+mIl8s[COeXad4V<bT#Pl(2f&2
%=b')?HnP;Zcf^VfkFpUTMcKX7<QF'sZpUPQ$$Cukl?f/Q+1c:=mp%$IFD*OD^sB[m-N4R4g=K?FZ(5!sXZau3.ukF^)-T5oM!juH
%1:)/0aIT$b6a&(l*V3V1pUR9RF>LF.mH-IBfC;aMak&&C25ar`FHJWoknT0>j4[p%XOj'V]l#LW?<a'X4[%ctg?pN<GFVu>:Tr?0
%G5Zlo_L(+AHS@RR&UW'R-_VKgj7`4C3?-[&Tt-7k_;b[5i]akRmH0G?;.@Qe,_%;;]b8p@ZrclM.W2FL)c+N)n6W5le*HL0d7=S_
%0Q_qjb#?r7:OACN@X3Ot:VJQ(?]Ha/KFKHCP,Lt>rZG@Sfb7O!jTbA`%Ld8<ahu&nDfFlPmdc;Eb%E_D(fEB3OmDT;VS$js0/t%t
%Hu57E_;\$<Og0A\2mA8t+a1>D1>TkLU8<@R.EX(*Inu]*+s4=j5CD<+lf$J6;$"AR&h1d]gtQ51WU7kBpc1LV50DI\f*1XIoq:e[
%5qY?C[TUh/buknUH?"gj/0$PsJuD2TKsNiGTYnDILEc#)9CLEJ'G<8#"j5V^G,'iS'F>Z+6?.R*0U0^H-rFr'.H8)U+J*tb)%tOa
%E/#`SGD9(Dp.Wp13"p_9J2IK,q_2msT>$.$`J./o-==EMP*WH&K<?AS%amqObkHstE/Ib#n29;3;kh>sR-(kr>1*!(&f2eVE;G`(
%jmefCfT/KbYlt.)ER^GEK3"cjeFU))a-Tj7AXbh\k[pOMl+rcP1lpJbYp)W,aL9HM1MDg`R[ke4)9SO0$f0/AZ&sR8-Q`bF,ZG_5
%^>f*VT05V'*mC5*1CBN)L:i"t?ug@+`;+[*[l=s_3VlT9a\K%KAli3QB\krK7,p0n5IpBSVXk.lq8]4/m<nhfSe@GcmumJpM!,7[
%&8Eo0DspL!%!`A[_.j^N7Y.&,E5dgCWHKq](^2o&9c]nBet+ssXbAYZ.VUO<b,l]hHrdrobW:RW]H.*4W.Yb`h1u5_qOR^4n8Q2U
%:P!k>:q0b.*kl]+Rn@8.qiFgs%lSeRrU(sCR%[S&HCA$YA]U7;ius@u5'1VhCHd(]1<nk.+R@6W@>6W-Z=mT.bOT)LUQo/m'_81[
%R+HI.9N)*uP?q29?/]XmLo'J&ePqAA\[!fR-YIT8(fc10+U;l3,/3Dc*5:!q1XT\V%Qb(lakbZt_8C<;]J*R94/Ri_mHLc]!bDE]
%rKrPN2C@EG!c])fCqW$`ON=g"e)b7HPH)Bt=$]R.[HY:\YC_TQQmb"B>'lh9\fMm?@LTu"VYRfn\K)^=I+#-8Up3H-O4eX,^O4n?
%P.Q/OPt-;Hfeo7ekk'o0D9&^TUMSaoS\9Zf4$1hF9shV:%1&?La7uUcEsMGIpA8j-B1#_k%>-+pjN@J<:^DsQ%-^oTBEUJ0'?;%9
%AeQX;qH0bq5d/0J$$SM+#88Hq@Ribnn?/CJU!XK&!6@\Z62UT#jf`'_eQqW3W4sJ<O_g"t2i<:/#oPb$a)G-u*#qH?CDZ%t\X:#7
%:\_hCffX?pl$amL(o.#_p":NQV_E9rShY@8P)9=uELn6.gDu8%TSh[ZDK8Sc4i?^c9[F2f2LQf6c?etYY1@\0JX:U?152knQhsc$
%_$iEoMI:QR$]p+Qmbe[ohg^>X":IOCa&aOm#N:TJ6K6A*q!+'r4o"SgHBtTh&$pcRH'ph6NJicbWKYNcj,&@:O[4cK]a.]D2ioP]
%K^:!DR77nM!XA1G>b\$\jd@8:.\D(Q`mr%:ki@Q(M2d4fPP1>"9H]![JN`5ZW]B^9r*!-[gd]?W4A3*Vm1o,IK1$c/K=K>+$^ZOb
%G4p<gSHsh=#S'FNc0UGOPHN6U<];Y/dQ[Rj-Qs]dmG;u!mIq?*F+oU?Zo0Pukcgc<8e0=.qa<)Xm26WN9jf9Vp:Ycl5ebp]>alag
%gaPOupAG=Q@2N2opZ9l2<tPd<EbCSH8lOGoU-PN]r>lD-J1(E9pbX(QM'#\,;19[#/gAB;q-rt/l%WER!Qo<b\t59$2Kdt_*akD^
%pfS![(ES%84s+`f6_)d%aeuWfPsb^DKX\0C-V>?&2[Q4ccrr7B-Blft4S#^bHsF58N3AM.S\k/Vk5#ukn.%NoBRV5u&hTTH)Hofg
%*-M</=r3@QZ9tQj#AMs;St57k40L;lhOY:3%CG9hbQ_*43&&[];8Sm@:i'10PpAFo4NcXSj+F-H\2O2b:V$RC3IuH75rMbQb_tf1
%Tqr]2)_a8KZL=Qa)`/9Ph:Nm/IeTM.[D&G@L]N21D09M@JG]1aUQ>Pj#:dS>/[h>uiZu)MH6.AYM'Rp"c;LV0:E9)jr#2K0Sk)u!
%U<Q3q.Bsmar)dtK(N5OjW]\Q^kS2;;c\qlUa^QMVd?TK"]:g1s#q`UO.p(^kg2l18@;%6!ijuD?32(\aoKYj,`,VWhp.['kktYVu
%PEk_\QjOWfYmlC*rh6Ih[&;C"Ybrsa.ur@)]oaDk:sq-ocH2;IIO)$)(?BY(UDP,F!F<?$n(3W^nUgs.:Q4a:S\j\7UTjad_p:WY
%VKu_M#d$O!s$=d^/96ZN%;>]ulRIt],>i7<n\`bQ2/$ZJD+'R@%Ym6<7"u?rg%1`BMf2,reW8,#0hBs<j,<m%`sCe:S0=fBrVCLo
%e#/BAEmQKN,J!,$EIjLP=mj[t:jKF<$$TMY2@4a,3AYIZ%t'37NSo=M!n(90Hlb=&_W9,'LFC:17@Fh%Rbh?*8='VuoI>^r)70i'
%3ec1J1%4TFHXUCsaMJn^N9@Mi2bqJ#h^nWRPj^:qU,[7n)g;slVSo6L.+85ma8&So]70KEYkqlbDp7?$T8di^P+K\1VY$gpl"g/$
%>Do3:5(Y4UmUgjX+1oF?cqu(P)\SN2g0+d:5Bh]Sq?l&7PS&9AP)LhPRd=ZB^,E]]OiSU4pj/FX;]o)HFWbsVlc8JKorIX^@A<<u
%/D65VO/7d-P9S-1K5O/Bc8Qi5b;Uan/Iduj-_A]Mc/flX?Xkc`3aZt]hjBnE3*\M:ctbm!T6O1XW-#c;>eVpIF`Edj^?AfcY5pLK
%3aZt]hjBeB3(uA?F=uI<2g'-0FM?sD5,Qnc:ZmY]jWamkMKHSr>Wt'8rmLVT#G<:Sn=99)Z\93.n:g%VI3f_/OoR3F/+0M6@5HVX
%B?(Vlr`t&*&)Q.X]S<[H9RunKVQ]UW&Nb\j"`HY@!*&Ld[[o=JhP4m.V^s;>0_3:li(d]KCN68b6>"l6Z'$5d0C]Ht!aS/9r[BmJ
%Q&\EqT,'/_\3O-6Qs)Zm]&3G!5/b_k^=[8cJ0PL&\/Tk1KK1([NgLN9g#2H=:h5#BLUUZ3pCk9_"Wuoa9tT`cHq@.>!7UB4N\pK*
%WK9j<7`D4[,sP`L/ij"l!Coffnko`Z-VY:JEklJh=_[`V$5-bgMb1i\-GQ.;n(;#?ik3n6psXKc@K\$kp.4CFF@KhKJMmp@.T$4U
%:IHKSd,p<FU(P&rNMpY<@Z%lE,=CP5Kr[6h4YBSqRamD(1&B!@I/NC_i?]\Gcsr.@jko!Q/g84LSg.;G9u?Fifl8D.\"c^T+.kP*
%l'O=J@l]6_-h!8^'F#UN*tpI$qoC5Y76TZZJf_3'D_3<R-gAFF-[c`D"lK&2j'Q<C:M\p9++k[f-NBu>UoD8=k)C2+QXtIQ;:-)Z
%R.Qq;B't[D<#h",jKa3>e@c-u&^gY^RlGnZn@9MhX5A)Pr5#$^[gDuKmRBn@M/-2)%>]AZUlFX<g[I&(hN7lrj5P-"S`L>K93fVG
%a=<%dm7u!I8q`rTRe@Q=[lu5PMikr/LsW)H>f'g.^'h2YE(ZR;9"h-%]ae.D$:1Q9p1NYSFPaSp=<A23]t>+m#XO(um45t,/"2)F
%\U#t3-p0)^kA\kbG1s.U:u6DAhN7lEW(P:C5t@FJ9)H$N?S!TLK?_"9"E`#NHR>P@p`)HCR)YY_S-BJ(YNS^!R)gG/d83hBoOc<m
%j&iTqobY=3]2@FpnQONd]tq(S@A5[^V1%b@*PG;tQSXgkSt8I),kNS[qN'Kd`s"[$L5t-+jKqV!Oce`#E!`9u@o;]G,5H2q7W0su
%:)/ABK:Y`i9+\dFHkVu"(`p@^PTAge2Me$?&qhG>?7bm\kqSdo'pBQ*aH56h4``@/:PRs$C!8nuH4IV9]$u^41I3d3K%HU]];Ka<
%:CnnBgh]k<-1S?M6JYF^(a:Sl%1bgNA"<_!pr,m2l?gOHpa+$qNT=K9L`$f&960Ae5YtS8e47koSEr<I#Qf(e^EEuhE/G2;Nl>pB
%%%NaKo@A/,hP`7%U5rT@/2JrFdRKFg8#(]"aa*hD'V1ZDa'mV/1@mmQ>"HpXF_4s`;jd2bA7(aM;+Iau&NYNf]J8qCVZ;/c;.^k2
%H1+PS)g,b!aP)S61G?aP$elKO^1rZPnK1b;bk^qM7k^Pb3MFuki92JoVMmhK!7&n(CjH8R#3(3Wb>Hn/Um7Nma9-5oPD6_&G3j/L
%@lC-VTjIgc>%,W'C/89)Vlq>rTeAA84F*R_Lc&<!lZ7N(/DfQbEQHE8-K)q6TjDp.`&_7<inj3gr$_3]Q_/mCaL'<hcnf$c'3lbU
%omG,#M8%+!C.,6d-4Rr-$R^dh9,d)Z++r+teO]K*.TAEc0q3iN5ABMqY89ROqdMIt,82cKSc_UkleCeB]CG#LSV=eM3@PGfN&4-"
%a%2D)IuGdIpASh18[@p^ib4KcTqTjZa^RWT-cogJ,>"';1qNGu?2MqXL8L(6UI;a%2UV=Hmr9D5'tsP?e/gXZ`e9>5QT+P>TqJ2D
%O'51s<ldAIUu&eh2PCW[#a4`]p1/Gos%$&Ei4`i28U9:2qiN5eYsT9]l'asejc,B]_`gQUQ@p=7F!jpV;<(]=$d#]X]OrkVhgRfP
%g`@99aSlu'&,]$ZL:"/"/Yp)_cT&.HT\VP_ATQm]Kl[+:`)p]Q4JpRRfE7"Wo.UOF-)(L^_K'YVZ`\^do"EB)9,?NllfdB3Xu2gr
%miVr#:qTUgF#Ia0(Z'Y4j)+@S=c=0#5GdQ:=60!?iTpeU]RGkWY@"*g0")2dG(N0Sl,ETK?!=i=0UZrbCOV(lk4'nh'm_\]9_:J2
%Bm1ptP)*gJ!aKAMZ70*7lV5"74AVPsKI6S1ZhI=2GE7ZU]onl+6[CU:88d!\Gd?4:<8(V]&+:6O,'S?5"7@TH:OlYD5=Aa,GIi&H
%o]j%T%r^VP$Vg?DhrcnIbdG;cd;G],mbT3rY@HF9$6OH.PPq@BQEHgsH7_YZ\h,L\X\O@`j4iEYBWp[t$0*cL_[DUKIcI9\C#@>_
%h_()kaZ#e*pg$HjmWbJk4$aieFSpA8SY4*upX=om[W.hFCSJE11sX$9I3IY"Yu*7=q")24`pLn?VuM.Y57TbOEmY`;e#O3%V[<p<
%K\u%%)>GiLn.T*da[NI9eF`1$"\&`P]3`fFVJlJ8s&!(*(USQ]_fdC`j23-T$3B.u6Mt[NT!O%]GJ![SeOpI^lf2Tjcl%k_hh;kj
%d7TQ>NWm**DW%VK7!G^X7=<>P'7KA0oQm1d-UO(8-OmhUcZKRbQIm#7IInJb8W_R@j<Xqam=n7"$d.`B[@mh$ljJ[pZ2jDC'DmBe
%q?Yu;2R+okI%7mXd3\L?LV$'FfGAWl7?Glk9'hI!#s"Hm^7]nGOBpXM')T?-9!e@<2HC#VljMLc*Hbgu7)m@t'Dms,UMIrh52j/h
%PLUJ^]fK,%?]]<&&ZCg=p'$FIh"i'h@UDr4TC52"-kcE/f$NBFd3\Ji28qM48!qpFPgpS7Yqfj!hnVeK0<m/?Bd67:$d.c#(MO0g
%qgu-M`^2GoL.LY=Z:W+7=l7+Ep'&PZ5tR+eYqKdsL&.Ac:$hI00HKK=%[blb[+=1T.g%0mM6"R=AtnqBJ;J[t^1Si`##+@sd,EWE
%A)R`*K-p9q9kd:GF&JC=MSg@\8#5;OQ9.7o6^^9Bh%>pN`Wu$LQhZB2)`;m6<NP!FR2i!3`@oNt(sspalN()^"e$FQ:_e<^YX#3F
%#T8(o?>QWj1-.Z5W5dZH4-sdZhS[l^n,`Qf/,/&kl4"_3mu\2%<YEDI1a_XE-5AENW&"2\2PDae3ba'pH!R:1^WY,RYfRtC$h6B.
%p\t\i4QhHe6dOF2[+>strl6H>H3o>?r/X<-ipQh>R+"!O=+h*,q4D&m7GRp04B3llo"TX+O98hg(EA,#huD;@^/XR_Iq(Vp4:f%'
%Dh&KHTI,>-m!4U]kb6dfjLN\"GdR07o1j>32Tr!cB+sZ&TC6_0>fPpu"eBW!pN/>Hr6VnUm>%8imPt7\HYm-bacOI*ETG-RQihHP
%%]LUpb[^hsHJb*&s("%:lV:qfTL\U!]X>I3N%h9(357$083@;\MiOY.F4?(l"J[tl7G^`m4J`)(PFSpNP)),MSJ9M0a-7#WJV4L*
%UBACENaY9WZ!pKZi9,F^VXI3*Z*j(f,UU(7hOj34X.&:ppAJ!Nhi17"JG-%4k^MRm].`(R3OC]28?`EC//4T:%>)h-CEkm0;4CKl
%`Ut;*^7qh&NSaD''J.K&S4=GN1$3MPQTJN6mW-?@?OFcF;W+S.QZ4,,7Zk=HL9WJg<hbY9p=%@o?=Q5>)XN2sYCD067@Zj4moV+p
%8jEa&0Up$hPP+Jk^]IC^"ps,sE:7/laV=:1^B+.-BPN3EIE11@QdA\Rp>/#OWeXpZf4XAEaM!*%]!qk!q\PpV]N>+B1U!C;9n/N&
%q-/clpWjWuNm.2;kha(mYA`=4ru*r5$qUH#^6git,gZ1L`rfU?LS4Ofp6E\q]3d`]R"@<$-HQ(?9uQ+lpT@"?BL@W.?SNq>841:+
%qiY!Yp)H9NpIF;Vm5BgplmM\EkL<8$>6I*TNB`c0pXB\MO^1Fl[(n@tcoE&4I0;e.R7MHpp8Z![>&Z)o<4:S'GdNN/>%.^Y>'j%a
%-IM;<LTi/5p5skg'-pI]',Q-d^?8EVg<]6X4[YI`E[D`F@PZMDoS4Mr=HU-nrE>0+FQ:s0%=gt=qDh66WsEWqp[7#NOE[2?L*,Mu
%Ku05GSbE_aBu@S`Wu#Ip]+";Aj)3t5mRAM1D":^bJK>h)G_+fG;t>iE6[,<H4aeQe$kpVpq3I/]H+,CFYNpt'^^f$A*-BnOV2Ml]
%/7EMD^;3dd$iJXNcbF#b0Z>_AndMkiJN`6Khm<o.m$f@mY2,5<g2=*ITY4FUN@W1qE+[tlpiL1]?MjV42EW&m]3/.jr&=/j]3!Gb
%gcFY0X5-6V+o[XQrf&QCnb)*.[+B#;n*)."f1K_:*-BZ7NcO="FM0\TSVd)U=D"/4Zi2iXl-.\ER5ZYW"-,CN`sG:C;aPhr9"&gU
%d]5)WH1n4"#5&>Zi,g3l+3."p/\K^&KqDG?^!9S5k.;2gntuV&UO#(j$15.V\Qho8oa9O%7)[?*`=(#?<c-\Xq8O1[2Les,9N(<K
%qm55n2BbMKM6FtZol4f3qE(H9VDp;!kC1TeNXCOm17p]AR*p1?>\?'c0>ZmHk-,*W.,>V-EpZ0oS[">rdjsiC;T,\b*cj=1>.:<F
%8p]F%GH]5c#[m0pdI.W=C'5?#6/]"uMeNgESaHii2o#\(/u):ocbZ`noXMG.#HY]4\?M0iA%m-u-_dV)c[^_A)T!B3*e[=X!!kK.
%1uBQS!/roja6^0D_[:l^:VV:`&q5e*%B&q?Y1E[bGe#38#]19I7PXa&]1F6V2[eGM@UWT=(%8?#O4Y`6">>dIS*4I(@Kc5.i[A,"
%M>;stNQ8nBCmHUu0kh2`KiCE<&n>66ROfO8H/;_p=&Y&?"-tL0junSGpMLI(.pp]1:+U5(V%J%%cg#b<`CQ)e?QMEGjAt_hSj$N2
%"o*t"nNRQHN7#TDA.b1>X6%)t`ugKR0iH$TCNEtVm(fD)d/f(:g4TpWb'(-`f1//sp$G[*A&Di'4ib3m_%!SFd2ANg(]Gn="K&cN
%JEhuSp7%BsXJ'Q61@Y5DM/u="DuJp'_pD=L+'(H]<@BRj[!QV?TiqguTcJ4B>O/2p^'R"2BsH>ZI3EH,mmhr[6?b["6<Zch>Yc-A
%GI)P0Pf0A0UR6Ne5Y@c;4i?k'`r]TId76g'G7`a/Lh"0rV#*hW9U_$`'g\dZ'\5a'(C^T9Xn@g>(aA["ne$Kop-)@ej&Jh+l%cuN
%&joLLPE4o`T__AS9]R8k[o^7Al76p)-6FttP<Q\hT%?5o'oGoI+2"[OFJF/&)b5*T@9iS97$eY"MBH5S$uoFD?`*chQPHfflC\pq
%-G?M-$/>EbQPC-*_dWMMQPGB*n,L5I$A65,336lQ[A1[CVSe7;X-IqaTlUW[fF&3MW<V7'f^EOdcjL?hH)oHq(ES<+DA7#sE\BNp
%l3pY_$P0!G!67Ru<\&4Li<\:TQ/og"AGMfa?[1cY-n+9k7*l$AGdnf?gS*PM%!UZ=T*](]??kZ]$h%qf4U5@!^$m_%Eat7+HhMI<
%@J"Dl&[BX\/j,)a&iJ30E8b6l@G&t4GSkiX(mA[O?[*F4`f@%d:P%g*_S^'3kI8nE^@9Kjr2Jkf_a+66O:)SocXdF'Y(sXY0L721
%-n[W@^?s:p2oAsHf]PDOK3ifdD8h"Z@;g[@^^C[jO/oO'7W[NsoR744Bu=;&(muC3c`3$U>:oc]6d[+qlGCI&I3)i*N8h^lkTerX
%OkY=<4:FkP'=T0?9Y#])@`4'm$H/`F<22'.lpD*gF5`f[DLo8;p;CbO^$m_eQ*J\_$AVEf&8jQL/sYKQe3iut2CCT?S)D0$kVKSU
%cMIbbIN7^k_rs%?\;nUk(EPVo?\'*L@q*kaneA%Z$P*olZr((Q(k(/tn>87Yn8JNpfL[\X9]G&li5.k<9!H@lUXo:Tn1aQn_?aR+
%^kIP@M&uCubkE+V_S\V_F)F&Z:8[t\CA`nbSjQe.(iB0VV]UZ*nBaUK:hjsadD=0;&,X\l*U(AX^fDFP*1a@_a+];$TBHWln8Q`R
%r@sT]3V8#\*e*Idm>uKIJdW*7<aG33LJ4QSJ)Oi.+Y%6^No7dlB^_N;D.JK)_7(HY&aT'5c%"^2i4`i2(ES=Q6[IMGW/`:gUMi46
%o=\=Wi!U'jD`_JVa7'ld7ORF)/*R'e4H.#A0[<EdStm<NgS#I;*9tDY5qJK+/j'PJ9sOf\h>3.H/`spf7-?Ud^[Np\=-/ND?X6XC
%]s\lq_K?#\'0XB,S8^0kCo#\+jX#CE(gmsH55Mq,2i3]pOpG%;nqF_aJPPd=!:]@(c8S-:OSf5/&$%hLa>9&I;ng.@:Xsj)]ma#:
%>jAK[D9:@iF(Js3]Kh?^<nGXp`C[V2T":Pd:1Md%4nH2TT$FM;g6uAOs0Cfh=3b^G05;S'WEB)+,Sbe\/k`&>dk+N%V.T*[g-2n\
%V1[U!-gBR\oh@KM=5TkG6e.JTG&(1-A`s"l\rsXIl0<9U>PbULQ'#r#/n_#9kOE'HnaZHUH9,!:dSKO^7f%Ct3Gl7[`MIb@^:D\k
%Q5`oP:&Fh0b&h7>Bs\Q!\sR=qZWO9p*:Fm#YFAT([r:NAl)F!48Sb/oRlWRehOAuoQl7'UQ]<g7op;X`c(7+JrcMLKS`<:ul0j=l
%G4^tL$V>o%DUMacMi0#uZ<@:u8Ma25YdGW'YFQ.M\/qF^F#TP,5pj3PEB34"(I8f\D>SEX",qVW8O$8uBA;gK`Hc[=4`f.cYNK!;
%R8'ZFgWrHff9\X7qtTB]1\#-@@kqniFh%ENS6rU_m\H]-;gOC78=iGm/+\VQIjclh<u66RR$Wdp<uM"]I(E0Y@</M/EbtiGs#ZdC
%>s6WaMb>j-Qj-ed:DU%.oYTtW-GoK)o;CV=Qj\:p%lVjo>A>ItE-T'[T)4t,\X'u]7b[K`;.Uf&kbL>-QWKiLI'(%,j4'YY<t<Yq
%Z9Y7\EbN:uo9R&Yp9kIgY.f_h0.hU2B1[5gdf/T*;C9"DI\MM>Y]%:VF&6@ZQ?N$ao/0>>AnR]$Q8=HoF-6D`cr_50&%]`HO"X^@
%dW_OicfRN+C]DG9#ET0rRuMLFS95p83Ud8hfT#C%4IKR:cgm"^"!r/<\\TBS0"DM.-@=M,%ut5a_':Mb<*`\]?CN/nlit:8n([XA
%\%LAdp21Xb^+]f'm=$)pR[@(r3krDf_3p8QHX>R^3)]huVfVH`KrON=AnQ<hIX[d4;P]j9&1kpVPNFW)7M*.135$lGa]N)1>l?(c
%D!^/US]\%Rkp:$['4P#jYj6R.LaFTn;OLh?E"O]<YoBTNAThR)"hRo72_M[S\U*sdDX6BFoq8P(Rm)%e&W,CWRJ/1Uha*-i1:pIg
%-1-hCcd=RpHEcN?0rK4k-EGl3\(9<bq=eD/\gcK::*c?u4C>b4hSBs&$'tJK-<lV%8!VQtKdKL,Y[P7b(AL10;^n7!nK>Z/-0e=D
%2e`$_@@"(@&"-Sbq@CHX:&LkLh_a%VETPZ"T=:oDVjA#KbO#qGHRh,6A77G^Pt.>R+472?4tD"S1.M*7V=WBq)H>]eZ]g]NeBb%M
%$hirIk)+7<.;CF^H^IQb\[_8:F']j2qN,iH<MsJj&[)`7EUs;(K-+XeRj+.[I+&Y(q1aN;"!]iYrOf_`(ZqjQ;Q4ncAMHL'rR@\/
%o<Nq#RT1_:=+?O-B('V+]oRoA.jim">-80q;fXhg75o&'otIB(2p@]Ol)(0iJ)n>H5\JCXk&"C.-/*]eWRKRO#D[Y[n++RT4BU>d
%fop'6r57@oajNCmFZU(Q`]Z)OmsS*[#__CmQ*'0<]ii3l]ElSST^OG+)=_k,_5Bp9J_n:?'4eL'B?9KRI&sa6V`@8Vn0[Wf?fr=@
%PKT@I/g`Ln8X;IGd9D\@=)BFaX!d$Z[B)Wjh?CKgYE,1I!@33AjFs"G,l@OC5pS&7h0F[u4+d_L420GndM7P)!Q"L-OfOO%9(Kio
%=lkm[&+j=;mGrbGCfQ9*\8(-8E*T!R"Zccbn\>81=Y`G'p14GNf%VoY5@O\5qb>Q0B9rPPRG;$sm&`/lB]W>?K%6.D7!ifY.L;Ve
%/3MNBc&7l9aEBimK19&O;TOkV2U\p%[l3MU4KFKlF6Nk)6o=B[C?fBCn9YsOo,4RjBmb5e>'XCMc![%mU_hHDB@$^i&hF4GDH0K`
%k,"o^)gWec)Rm]_d[+Gp&BVCa/H78MCc9"nIVrK:SDA!eXSg3TG41AQ&;6JAc..eOf!.WX8@uee?$`,X/pP'dBc\)[FWAnH^/g\?
%6\j9#S'@Mt:$HA#B4C3%D=q<&U7b3r?;EXqK\\]RLRE`nR;*GimBt[T@LalAQfF'sPP9WL%d<brn2fBo=B>$IB:/P=;tPaR\&RUd
%BLA!HRc!Dk2UMq]SHO:^`*ibYE)D^(;Q%m_*M7.3PR>#$e*S&jJN.b8Y4(aD]2i70k(k4kIt&qYc[N=oYA9-\^(@Jc[F9g4=<B,k
%X^=9:'n)[a.lt06kDAD5mf4e"bnG_n0Vt5E<6LY24uh;%/llbuO%e]C\8tQ32nuee[L0X=[8*\tQZJ*7[6i,\?aAD2egFVdJ5`KH
%i&iI*Tc4U,)p>/C4H.UiInutpAj>5'OT^inIUI1`.F?E-"/il<Z9Bj$6fkL?hf+7D<]spB02q%G-<AS'?`aEpW<_VgmDFRq2G2D=
%l3GSZjVH:&f&C1c[T3VngGlme]$_FDF4(8@2j.i9%*/'*_B1!URL*I#@3j,uFn9?tD7B/e]grrh)TVX8Ur7(6KUd[4'$PW73CdR;
%EH;V\0Tt/sXK2"gh":6o>:5NgkoR[><gj?'X3#sSkG[Sa:<FsB3FWI..HM5AomS=6dHpgUc()Y5Rki+8g+]Bt&?`RcOT=599\<-Y
%-u?8]grsG43_HLXZIk8'k-s?sJ/V\2["rMZL44PtVPIBZQ^(D)J9Q3Y['e8D2Rd!fO%P+cH$sUHTt*9a\1MhF[W[V%8"6[uXd*Am
%iV?TZ5<hmU=)`5[h4;dg4AsHtp4U0J3e]*ADsIeAXOb*`AiAe[K`dYY/CMg"r;C2"PK<W(&u=J]jA0aINJUDM^39CfF`I)L]i)8m
%+#*`e]D8jUG#0`VB<oM2b4n%a]s%c@bm1QC$"eek:9V=rR<[/_-RZaCpq"Lg!(/gIGTUI&\Nrd&`onDIf<c"6lOThRc*%$Gl2DfD
%Y3^S,-+7V\Y?oDH?_[t>):G<S,i,F68>OT/0WKF1cHb)OMY!XM*`fE9B0ZW8efjo,Z&V^i,Xt4Ef=3_e]+OuLgX/(K(`tgOS2Uk%
%&_%?M7eK.?<8[J+E&[&a6*S8@ZbDsEgZ'9_G32:W`f.uCL4-AJ'4-&BQQJs4D9sO4L5+XTC(:ru`"@R%XtFm!6)/6<J0I$=fNd]Z
%lu2:TQW[-L=6K'O.P4FT$d46\MBVpSqIVuicoFGdr$QmG`;4)uY$:^LmUN,6?c\Zl\:;to[f%lFRm'gmZNXh#*'I^A2Qb*b^^Z>l
%O#1g.]?Q=(X6uuKLXLoRoIKg&L&8a\p=]b-)"fCml?&LDGe&U:X@+B[@Cn_uCd:T7@nB=GLWpHS9eDjqHo<+23CcP.:2[m'D$Wa,
%0OYKg-/c*1B8ta>_e0'Hh*Yl_padkXiSNFNHY-'0%eA*4Uuk#&9Yhk0;0r4"Z^IDgCSg[?;e6JhcJXhI#C6khrcEMk_h#kmfq5G`
%m`-$HS4[.]mK<nP3p;P>%M^N'ZhD`](ic34aNu/E3CXt8801IhDf`q=!^RIn^Yh\YL!@<=&OnU/VTrc,5NUr[-O[h8K7tt6NSG#V
%A^G4.%h_YWK^a9=(khg"=5W?'7XH'RAE5Yu`Uh'tJ@.-o"3/e.X`ir<6b=Zt9?A7T2O!tm60q>W_Zk,Y9I=+>hp!KZG,k#PH+qgt
%nUhi"\Lr*>Br+B]:7eG.oC(g/25-Q;ifo0^5(D?n9V:@5LLld9f=1>.31IP;]"%\2R+.*>hb$[YppRInj%2SuZqm.F.Qr40EDO0Q
%<A4AE^hi'N1c/S)Ut6[_dDtfZ2M$QVUqf4+qTaiV5J-c&l(OSrGkK2,do3:HjQ_r*:UWtSbj(Cg-W8kE?2]4q$AV`3ZLm2XbWi]8
%AAMu1pn(giAB&KYl8->m].kCQ3(o@[,U]$*br^\`%me;hEIC(<3TmUh\iU/.hnp"'Y\*%2f`Uk#s4Vb'_N![oc^A[F>?CQK\@P\^
%?T`,l3!jE\bP47H%1r5<q`3bVj88Z59/'2?Dj<Io%Kr)(]D6Q=fLsP%87^[tKGZK@2q*)ZjDREA]lVpfVerYs%6t:]?8o?)2NVTa
%PhFBQM+?>Wo(M+5KZ#Rf@-+RP![C85(n\k?J%B\^YgVPt+m-Lg0$Ek3XZ(<j5N^+A2X$E'GkRXiR*BI&eHOgFZb\&`.2/n4SiM!?
%4UBiV;SP?2ToT"&:VnF&\8-/VDCuZ<\jAK&F6BdjHffVE$ssAlQcHLN(m40M:t[0cg3;8q%nLK,]4oPtZe+t[_B"Y-K$R&Q,@OO4
%_%_c^WR^W:NX'FC`<2.a_o2_k>`p;)coH<3E%`EoqsN*&_DR<n#^BHBJ-U5g1m;?=-uU)POKdM[Z7#'G,iEM&ZGbd36f.,_2Tj;4
%4%S"LaH$;3N$\bs7\Lrf(bM5t*t/\&[k-OtjnLNg(hT_NV2/+-:4:XQ:g.r[jM6(D)[REjDUe#,D:!K67'[!A-AjV3'uE<HJrlhP
%SqFF:;DR;.Rg>Lf2F%7RLDbb+Bn%ZoU2r$:lAIR"S^o$d7.O$kkPbYgg4TY9de[fJUs/po9h$C(Z&PP0OqDDl2o(OK&2k#J)m7[!
%?]g?0Ns9N1Nm9s"6=rXV*/([STsX(&U#XmHaYO!f+e6h/RuC"3dSAd!ft$(GiU(F3,seMPO`SP.]c%I*-)@o(H-Q%9"a_Y72N6(I
%P5D=RBeGY^8k[J,Z_Dp:K1\O(Rh[AhTS^1Cjs0W]PVsIMBh8NF-uCkn+AC)qmS?t)9'=S`Lq.1JkUPg&AB_UF3T)$-8pZR6R1j9j
%KIhqBN`_FS+S&2K`7tQO:t!92X8],n@Cif'c.%0^4dB7,::\=aPb%H`nLSiN]PPf;YL#BSlLq@9BVDu8r?n>"dJ"%@Q]!o^G9Z=>
%Qr]Y4(Ua92<)5GEF&Dg17)`P+hmo]WI4(ae;n^L^eG^+YSRVsgEHF5u"#VG(1pRia>%HLSBTc,9&2H*2FFGK,VfZc"nkM]=FNV;)
%d(IiT,b8BU1,A<?OJGh:^^N2>8$b>0DQ%XXZ+`Y#of8&Ro+ij.#qtW@%;'*b)<`E"*;%bB8DBQKlW(Yq4O#\P"FT6&Q+q$F#uN0.
%S*:.t(3rLC!g2M.>-#8.[Hh^r;JU,XH(O*;K%qdB"haq5h7,N"kK0FNBmOq6hrg?*>dEEhT/\&-+HU,]d/-K:/6p=WS,FWlXj\N:
%%O=VqhFFa&8!?<%,hoj__b'0aF(RC)D`agH!qM8db2Z:X<,*"2"]j#(RTmA0=@-G;,S2OWBifC:009%2f#RbD/R(kNL9.2:cG&Vp
%p2R_<<bnKr7BMOIZ*^nhbEn2\Zdc-Y0<0ME$dG%,cYB5E>#$YdS`b3@/\Ou/Bi_75"hHBP?*[RC,A$sEn\$?Ba<HlcKi`Wu@qXe;
%X^$+9DV"b6)eRWk23K^U7Pg?2Bfab\HgMj"0P&Z(hok2Mn5Mq38r!`s_P$WV$$"s/j7@G:nRnh8r_TGKaGKi%jnd^&ejA\9Dfah(
%XBRce5I.-JX`d]\hqq%[gX=>8Bl.YQKht,)]3Pp5YR.Wbbrq;Q2t:"i2*6D0pu=E+=Y,Wo%/97$"]Jl+@,fYLbUjc.OsqI\9%E@,
%705r]MXuW(d!),VKN3OqDKMmaEn=*?U_^KljiQ,5Bos:d[g_,g?,mc2'!#H$f`gsA!jR-C4X/fOA:^;Q;c?6K()*4i[>\KS<&0kQ
%ra:"Hi3hS)ng]-n\_o1FPaRM`FoJJ,'cmY7"aEcr*P;^0KRLeA[l<K`YH\Xbh_)J5aWn>?&mtr;9WDqO95"^Z;gV/.Y]`a8PPdNY
%=^^7LA9W%;H)!:3*Jq)Ga[)5WJf_'VnFK=?VaZ?$$N@]8m/l0%ZHPY&bg%uUmq.ofk.GC"g`0t?-^1QkZ`j1KUNE$,>8*;fR:L_c
%It>&j(R4jZVU4DW;G__ec/;<&8cj?GXtAhG/uMd"k24G^f%.f@is4Nm-$M<B82f%\N+ZM#*Gp1t]!d=&aNk*oa]AZc0+3+"q2ED>
%"h\o"Q@:?F?]dI!`;2K6Y/n5PEjt<DfnCS1Km[Crqu!<)^0rAOa(6$W&/eNo+p$1^7fb6"L?;!/EJF'Y1rG^PQC3dmbqU3nXb(2.
%j0H&0GP>tk$VTU3l/fCob[kLrW;R?8gI/M^[]`K[)_gL]HaDk%q];to<KS]AG=t??_oT=LkdTRMhE:``N4f%b&f?+bKK't3p2d-<
%Gb+-XX%,*M2m0QjrG)_#:-Ie`=AGheTMF+9VMUG"pk8h<qg&$b"44%m6oX=FJ/5k&a2)ZoEo&Oh]WS)Fo"G=E(-HCe(-etI;3#^2
%K[;Ysk5-@.X@1c=2guIae0G'%/'C=.RP5jF(VHJ`8LZ4Ic'-iECC?.+Zq/sWJE=-4[^'\h+Im#HcI5EZ_66W<O0"*>a9*!^e@E-3
%qEup'0$(TG*>u5sE%m@Hg&<2%B\q>8]-KK_(8E!pC32"%m_3a+4IY@4)s[B<+,jjS,`->[?YBI.[b2o]'r@B&-p@I%ifr+d7hU08
%KlQ$/:01#9I[jRU1G?W&.j^(?SsPQ8AX']5\[M-g>IJ&E7]ML79>3R4.IF'Qau;K<o=^Wb)s?XDP-fSNOS(O$c49V`B3cEL$eVdb
%3YTo1Sl0S$\EIa2T(Y)3/Mo^N4a3cI6l+7sB8G5+F<M4POb+_o,f-$sr0DJ59+DB]B&WXqD>,s]HDF7.[eFa0Y^a]"J@;?MFqd<P
%'/Q9+:>1?i\hVMh)@LYAm3j1!%CVHiGL)hieA0fZErm!Bg?LIa!nl[H8=7ZZ<ZVP[O9EX\6p,-i%NZZ[4HKg`_o&U4";m/T"E^HP
%8DjV&ih=#2jPiJ=X36g5XZG+KOVkOO-J_u<+bn81d(O"Vi"<T7]RB>gZo+=p?^;8qp3C/82TUe`UDmU12j%t4Zk@=I<!3%UjMO[P
%WL]]5B_KAGF:L5Anj6(u3X;4sHT5a8)K8(/r\j'+iJp*l>e+tLaH4t+T:amqq[sT*V!_sW^,;Fb3I10g/)RUr,fk4J#7j.;i7?K[
%1N&aAWh%cWR@=oEfZ8P"4Uo&JLHW_`Ie*"l+Hs@V\PAUXG[s54a@U`K2fSBQ2B_B,hRrWFG'!+Kd#B_cWV!FTGn9>f;Z\GZp/.8s
%=?"Q5_[3!*Wh2n2Rl:YPp#\E/8pU^#8(pHUU%C(%`chtP$)Jr>8:+/6jAO^Vp\8^?IlfBI5Y3JsHaf",bglU$k7$#7:]cG$l0%>5
%*&:t-nK&m)p`Ps<M*f5R8)Q\;jCIf9kdjB45U#k!PsbTU/*Ri@>1%_F?-_(hj>(d8Vd[<l21=d)GgaW8G&2?Bh4qPN-dN&j<sa^]
%N[@.c\qu;BN[@.ceg;k=3LUL*kp@lP3LUL*fd;Z8;N<(la`g`OUQhM[;=_4^BU!No+\LrF3_DE$&EOa#.#`s[N[@.ccLjXq.7Y&G
%jAI*W8i`=O,meZ^74An).!*a02(.a@HXCL1eCr"$C?p5C/U$_]][bU-8mAkbUOT>HDo[QK7?%/H[_>hs3oTKRmW7C"e8RA<WS"/*
%4.-)?!ml5#qqWGboVYseXk#H[s'9K&r?8*&s!7@]I[YFP<ihO[lgR83keZlC*uRs;--rFuYhQ(PX`h0MHg0+MNH4pbe1uS\+!+\T
%(/i=)>5AOtYG<p--Ktho_kUA?M>DlMI2_uM8o<P-omb!\pa6$-;IHRt=]:Y$(eN:4D8T8n(J.I<pgQn%TokI([5(e@s1A7LJ*k(]
%?SIE<UgtosR(@X+;O&t]GW,8N@V6,RRalLAX!kQLqAfB"2tX1dl7VG=Kdj$l2,.:D(p=k]'C3AmrG`^0*&G"0gZYLik?$D6kO7M5
%p#>F@eVar"Q'k?Ps1f^BURc]<)QsM`8*@;l%/%%?\tTK8/].WKRZ/"4$m!!F3l=BC1e"`i'm2lDF9B;AQ>FHG<DcK.+CB68meM3(
%L]T#&@I#D\ROYP=G?2jWOX9sE/7rN#UejBiUe06tOt.hR8sbF4AITSTU7"VSd0qc<<JBn)l,!o5Qj1Gb'q:07W>l0XC;169O5\]R
%XknPC]#-)RggDmn/F&U3>$1qX_*G<7:5RC$ZkV=i+[idkK0W+5[hqM1$,f*>S#6uATWZBt/I"o\Lh<XkKc%1QVC5X5L"4XORfHGe
%@\q]_<0]>:ffFaV0IBgr1Mi6T'h_G=0ib!f'Z6.A7("SpKs6H7C=qBPn=SfZ8s)!5VajmrD=>7cPKd7\9ar4Wej`7V&5-"PC<Wbj
%RhVem[R,jSP,;'3WlkNS8eN/EAk4iId0,u.$tpLo.Ag6a?n`@e5ZC+Z>R7C/aJuG2AFM=@'!A9t[2#64PSJf\e]>$_WikT^OJ0d<
%nUVTX!mt[-)'oip"RLcI!G\qL>"CPNK0UtZ`u42G(^GcYVTgUU5[u,EWk,<p@YQ5O"<ptaKkMqo"es:!FG!Y*5RgmqW(cg`'hP<G
%'u2+^1t/01e^c071K<3JaBSq6249b.D2UYY9="mlYq4V;W`qBbW2KnNL?0!k)[\)"`'kf3Tkb&\Yo^<SD'D7j:bn0q[B-420rU7G
%&I:"Q"*gO4F@3CJV)1nJ]e-3%+0!U1/@?sf9?YHn6P^V&5SQBbB8RU(3"i6L$%StUI>0>(aL7"*1/\jQRj4A2*[-[jY)We(7Ek@\
%#W*7R"(97R+-7$Ir\b2]gJI)F,[7)F>;MhT.tk#>&6!\rP+h+ST^-F>Y[A/S!M)"tbD&TH_%Pt-R%iRa,",9GQ=\X@WUaemUiMP_
%>M!Fd@1\og^sFXeKs6H3Bj0A&QDIa@VJO/U4T,:ll&$o"$E-`Y'li0%*^0,D;-eIoJ:qa.!i>sjpYZ^15Z\)i"+\NO[Of:6Z?Ekr
%(OebE0NQ_8RE@`<?P$\h16kt-9o!-0$rrHB=^9BG<69Xl[:LOqJ/[Xo!$bTF5%ud+!(WHiSg!E9JgM$Z&Tj>]Ybruc@M;d/#`b:/
%DHUS0C4UIMJlK!3M?V0G$5-mTDWrd,Mf-MB]Yt:^AIp?X5j$7Q`Ypd07p/A0>r%<n-Kl/cUdMQ*I\D'XQ;$145s6Y0X_=FiUKWTi
%(7c]65"T>tZrpL"e`+ZT2-Nl+fME#"&IL6%R6jlUf0E3V)P\pAW'=8D&k)t+>g*K#)%Vhji&]aLfGZ1s1FZ#;LmkHfU@j$e$VHWW
%BJH7.A8Wr;MGSFapHjCKCtC_QkYPjFUahrR3fLe!m@b>*N%,SoS>i4OKE<p9r947!l56Jk/6(15Kr?=:li82@Ni!c"E&L^%!!H5a
%!oXA"1UsLhP*^1I!!4F@&."`1Zm'6f=X?=),o(PZm\k"X6&60[n1bZiYV[&.(.]+.M0d-qXq="%)MH0sGlU]M=Z+``i%eFBW,kTH
%M^^V1.dIgB##_f.=/s4C4[g7jiA];*L1/c2R&!B^.2tr\J:PnEQupn/ZqcB+_6V3=!?/a3UmPs2m/eU<PTp_^I[*0K2Amst>^lgm
%>/[)>R8a?GBdnoF61Qq%8p,YBOF_/CBN%H3!&6%U+Z4-O^`";m9VaC:!f_O^E0]+2$5e56I\q"0NFY9V9TLqEkY.Ni7TX0DI,LMC
%"NQ\*1Z\h<*Nb.TD4.Z7DNbg!<A$CiJ,tHP0cG8s&1f]sg^oD.Ztn*S6&>f3L5Bo3'=:,tXZ_]fP#Xi5Wb#*EPpPKSJ=)MF49JU2
%3.6G1AN$fe;8uF++r%gT7%&RQTdnR5,Edi4dh2V9G0<]q4iUshjI30EQP1g'b,GI(%p;uu6X>FTIJSI:<bsO)=9@3VWY'o7;?8(1
%/PO,;SG?qg-,NPQ-:O,p89E6::!s<c:i0s]Rc)N^MAf]BYg=q!b-Ao#<O3#/g!inbImC:66G`Sfs(%id!f4_@$RVZ<<nPohP<^7d
%U'ggnl!cC*>Ku)#&P7OOgJD/$MpW6KY-]BMU4i.iM=r>8&g^>s,#fm4(R^f,%?%KE/nqab`Q53\L/A)P)Dg,FkcfrEC/WX2A2IF?
%oXGHd\3=TSGp"4WSVdo=0G%q*4t(bNaRIiWUf3"<2kMmrL?8UG$X6Qn:g)ub`.ql%#gA$h;&.odaGa&j%cYb8Ee(JJ-DkpC0#0E"
%(a/`9<gia0d:ZD"WW@)V'I)cU6B)uq@0?Q3:)/Zfn(PFK8YcNGEf!'jKaUU3q[AYg_5:).)DG`+N+!HGgdJu2>/r<;;Dh007<%rK
%6/+/Wae5lbIRMbKQk37olnCjR92sCZT]f8p-3LY"Vg<WN19*_ZeV:L@c1(!s(Wc9KNKTfV5[9o_7$?4i3Vq6[mi]jYI0pN+;eTEa
%$4oW^AZn;*EO&9i:jiZ^c'D'iTA%)[Q>*o+'Gh+,R\e_i5.*]Ig4l7J!<?@OHe#*TimmT66S4r\Ji^;jObh=-W`&miR\gDVeA`>l
%A-hH7+M`N9=.KChP!%G4I:u%][4*LaM6nOA;ZIG?g=<&#!C&sa[&FFAg6>TJ5d!gQ;](++Zmkp<R7)&f.;E:c1q5lkTrX>+-rc_1
%_.8q.:]Y5j<ZFu82?kL=6Vs^>/+6?6J9kA'2*mqibTq?h-*3i`>nBN"_WoUhE/SF0O>mR^kX`"IMa/!A$RIaCqMmm2!bC.#eYbs8
%2U`\,5./d\@50=5:QaWGVML$l7D;S4h5a<XqlmR:eYb$XEIHQYM0VCZ_XKhBRU1Cl!i\@PLa8IA4p?`cS#08Ziq,)oRj,&XOs+L;
%)kBg//k&0C/20SZWJpsU2$IQKgh8L"UJ,MGh/JT-XJO$Y9=6%JXt%V$AI:h59.[frM@lTA9bB)\MEkS]8!sF@fu,XhPUVcd.G9;.
%[9;_<UJ,OX[>q1@FX`\.;\T4hAp]dlOM7hN?DGXW+I5S%+'5<`KIBd=1CfKr;f#(7F?u<=`&;/01<![(Ot8"[*5'KX*3)[5U=uX6
%<Mh1p/1+o+1:8jJCs.Dc7>=cY`N)[Lk52^3e4-XoYQZV8lUZD,;46Ea/$^T>"2;/O9i.\e!UEJS.T7;(D@B($.I$n#[KU5WPGjB*
%<MfaqOj.-JMBku_-e"puYaNbqBN*t-FLkb#.e4EVV`h+0W)F7j^hsRG(pj56^bF1BlUW-2Msa^d#ZcWBF>YooABNAY\foI1,S3Tk
%$4C8,.)?LiR0lrX\t[okU8F;iapIhdKZ(e8"?;B+'\s(r=phG])`EUgK"47+8VY(`Omic%B[AM)=.um/KNSY?9I^kq7L1ih+<$Y)
%#uo<<5S_qaU,,\$b\?YU6^@f78H:O!W8NaRX9V'pZc#`sV]UmN-UN=i]MW-<P*fI.Gb>>\&3+`c%9959eP^)@(+!CBJO3lG^8]IW
%&mZKM24\Ch)jf/q2*@Q\&GW]N\./*4JS6rqJC)l[&BeSr,R;D7%EM;>"k,Bj*["!DeHI-b\#>JmK#XYf@a:\n<LI7r5g>I6=2PW+
%cLuFshm>cW$d?8fMB%FERK*bQC/5`T7u58L?"3an*?(ps73^cTFQVu5W[WrBa[Og+LUtd\[3;$@U;cc4Te!K?b%3]8R-1EQ=@h,2
%knIR6RI:Ui/;<;($j>S/4p)jNJ/T/rINT&LdK'Y'&r9<$*C*;-])]c)"j4&_1!n-",p9K"N=ap?'lBH,U&i3,-82&T)J]QRP_iKB
%lJqr!E%RGu1a[eUL>!8nY,Q?^p,<PWWA5L+L&4o()e^pe6!/o>XBFChQE#47@f'59LSuY5>oX[OV!]*]kZ<aR_3lGHM=BGZ5R9),
%*Fob<Tpd$m&tghgQmZ?/@]1HNj+3:\AG$ed?#CiBM-'!JR]6`?Z;tR,0-N%Od9%6U;^)6GMWPO&Ol`l$&2f#PZA8(O%cG`;j:J=@
%(qgP7+qWN&1)nb)N0+BA\pB1;XTuY0>6$Dr5Wc>)=&'<_?_#I\13#XVNdr#pQirX/L_oli:ih2\M'ZA,I6^ct$=-=u@KB&>>R3`!
%F_[_&ZR#,`%,7T+>DFYh@P!tJe'JBJ7$=CVO;FpgLh%5n):[BedEthuK^=@i;atp&Tu"qQ&9&Q<RYF-<(L>Q>p*G\9:INHK"ft<)
%BJVD@OO0q7Uj+^T1X=XY&PnSj_-a(Lk$oP!LouN+T3+7f6fTV,(p&#3?oEbAYT[C&S/Wj*'Z!X[3[7ui+lXdS#)l=%)c"e&(K2^B
%mLh@c.p[`rLoe41aW`L?VC;TBlF9-WC0l]i/T\/?k(YlseU%c2D-$ll8Q@KYW!ZfbM7>m0$TnuNkh=]J4W)+Q#Jn@$s-A9rs..jB
%D``.fX12)>+mg-=3!daS"!i4L'LJ25^r%Q9Kr@E!@._Ga^(gf$3WTlZO?d>%C%PJ7-jWX#,)u\u;W!oCFWrS,C8(#d+GsW+#]BYc
%";kC@&/J4h5f.m+P^l#oV'Ob:=<''s8?hG5"KO!8+UY%U-qlEj9;i1/R%d&s"TC`<JqoB-fNIDJJ],h\F2f4k!^X7@W5/Is#GQf=
%j&@9hfg([un52/1TMa8YBj\k914X%^(c')R/VCN%#7Ee"ZKPudKFi`EgmL&*&.GksZ3*4^BZ1WNDG:9'`\H%7n;N,;#XkQe1^&VS
%$8O<j)Pr@(;LgC)Fd2tRA2Z>+=[ZX7bU,#C.[2"$mK&,:&)_jKJ>AT.4c9`tT\FYn@S7D^#3ld2K^96@MB&QdCjo,XWlta8GGqI?
%k1&G/,!ME-kb+f$'9o#%'FARp9>D4ofMP%Y,%[_h7jg_dDQWJ0ctFTGeo6_ri\:_4";:p/@_0>W%hKtJN9!uti^m;aODJ2^5Q]>,
%#!k79+@K/MLe0X!RHd-@_DiTfkb^WhMFE:.kgKikKZ$t]6UF(j5h.V]0bOORLkOmtJY;:/A[GZXeZ"AC8UqFV%=f9./OnN#%ts`<
%]HRUG[a'3[9p)rPVaoa?o87Wt1A,pH_37S:=e$^%2!V4OW'JP_U,-9BP4<X_/E.?dWaTr9A>mPn>#pb;O3ICS>t"tf&ci)\Ld3_0
%/<fZd'p)`E'r)3"$<e*%KG@?(Rs<`1EYsI%D;\qe)CS."G+qE%!!YRn^_I)O'=`U&)(CUn+e^QM_BDRolZ'U+X@&':+rK`JEGVCN
%PDMT@"Lh'(])Vu2K5kRb0onCQ('Vca;pg[NJPc^*hP:D`#7q/qKa:(E/6>WP=t3_>"Gg]i&YbWsX[n.15\/[+,S2eY=[`W;&d$"R
%,S8'SoKj^a66MR@=Y9iD#CqQ2B\m40iGXSVe@[r-OH:q%%%V*8(C)TjZeRW4!4#HU9Lp"/dmS!Q6rOO2UMQ_]L@&9RA#u89HJ9!\
%Zc-Ff;4n=2"\4K4Z3s(-JXqc3afm4lBiNttS:U6q.C5]m$r:gTnUf_4KNK];?fVJ66GTk#P#5/#SMGaj:8B$AS3rL)!kCd3YDKlC
%#a%i@b"p3H(_9^cgSJA?6p2)j;I+mg&e5p)RR2*&K=oQgP$rTmZ-YLF8i?u@`=l`l:qFW5#FUg!W)3S1cj_rYH''6^U.@\iaOEah
%'e,4hs1e`4.g3Vd'?!o_IiF@%*R6sDVT8g!+@ItAJRe`^/u7_X/-JS&/^U,IRZhkbBiIO-c,Vmqd^cFb"Ksk8-"dRMH*SLJ;0BH;
%j!gkH9GBH\ag,OPoI,87&BDc`8VOG0W@0q7B8TH'gqeY5N?81*(cB`ib_&0uO9O-D(s,V1V/^qlbi8\SMJS4S*;G)dVEr]=*ce)E
%+t&9S^nD8JpU;sd1l/sJ,?G1[Bf#l\+@N$HGgof\q8dD82,A`@Z0:g2,sRBi8Y'lVKl@DtVr%dlGH&[CR"V:J@[hI>M.+X/X<-&O
%nrtnOak)]4RsY,Ea_nh*>aD4dhP!l"oZRm@=kO3$,*7rs<C@UWb'S)b>Tg'KjpcWefNB-_\)ahS"(FYf<]R)C7(^Vl4m>]eJZ]gm
%6B:LIJRQ_9@WQ-=@1d(Z3gQl]EC:P-XDp`B7$]"sQp>1oZW#"Yd6h&HmNfqc.Q)o?UFsE&.u]$IPS%:q(7h4O-mb;m2]g(G5c/Q*
%.8t:_V&Sqmf?--31<E!6;9?,\XAdpGHsqn;@[b,b&Z/f[!)5XNh[gnC-4ItU"lQX3BF$uVdIjs4nA#I<LlEPZ@B)#.J<5sh#a&s\
%ob!q&\\hTJb?i3k$'NTrV4+1sZ%\",a8HtZiT@LaE&DI\!uqg?J-$0QTg7'l/HHE@3^)OPX@aVr>`+.[ef"j,&1rJ4-[&*WXUkZ9
%X0rh=TkX'aa6s"b9I*=MKO/'=$:-Y16"W/_@4;t&W5Q?bi>AAPV@s8Kdtef,a>"H`W148]Tuni:"el1"bbE-e<='`2Z9f\XV7.#p
%e?dMPco%4,,6efJ[/[nO2sK!@8^bNE"8%)a9*<[pNUS6A3DrE]&<MtV8-!oSZp(le&l_"\cVOcE^#E2=h;cZuM5[F\:l!3fq-rkJ
%2`E\)2-2"?=e>:h1<h`jiJkoTi>[j$*gL.@Jb/q_<LQ=2BZ6ZSDrA(r%&<;]fL\T^:b,YB,*8hrCNq?"I<=uM.V'Y&8[;hi:Z<5q
%#YsT2@C"FXhE$`#A-ra-j;1i:6!m1V!]cpsK;.*Aa+/`V-k9rdSK3#R=pr,,\JKI()#WASFJ:Im;-$C9A^+ZCOmBjm1ik:4ZEio#
%M*r@d5e<:J5@=bD7_8^qbXZmI0N'8gJDGN7%Q66lOmG(1Gt7#PbT./UN*`m:lGu#H0YWo):E%QS_G''_E66tnrTW+k/,Qp>E.&m'
%C@I2eX"4="<$dI?F-H5c#+#A4\&+^rY^4Fi_#9%@^[)-eTpB%KD+cPRhS^;;.oRTUel9(`VS[[Nbp?!rnJ$6T6+;Lcq5b?$K[G:b
%a_8aMg47e4=%6Eth$<6<`;id*EiEUF/.IN@6bmH&kM]9dYW/[_;n<ZfHEV;!(OsWPAgQeSU<Bm[E)f1NK'h^HN_?0Z);n#koqiKN
%!J&6_Z3K7kF?DS,k(Roen`.Uhk;+_rG$E5'7b84:lpC9\-o"PQEWW&(e$q#9#5*mA8)W+EW`]pTm>"QTj<s,fZZ\[R"XnH6n)*%[
%QpK/jHJ'ZV+D'=pBXo7JjnM'#hma7!Gl-:1T9&Z04U+>[+ODCS80;]lX1ELP^0>3b2g>1k#iIC"]-K)sEV`j3YX`7<_FPdV_ebMn
%"uIdPVpoi!\oTGf]1=G=R+'1EACr..'$0,g'd4#3[@tj&:0Tp[T$dcjL_cU?Jb4a2\SPT`ODabYk]ZP&/s,EiK^gS9W.m%ZN5pqH
%2%/'m]<@sL$Ano"(!*]]V,&f*/N//BUaOQH`t_+6"P(41ESfY;TjhW9ZLWr4XhOJE"b'[H)e@UR*<Yi?RWU)cQZX1tM"IF$QFS)*
%ern(&*1(5O.RScJ;FS^["3K`NqR;O8>8]3kbp"$F@LFG:>+A?N7<1t#VSO1"RT99[d"Rf5BA*8bpHEa/,=^=1f#=/s_t_[gb_dkQ
%_AGV2ask*1#>SK-,DHdeRBcoY6;RJ+dW)1>QNkEV;saHL6:Y`M]e?EX2MD:7#ln=O3CK.%o2TUsTH15mMONSQJl^h;(TMbeg("EH
%7`UhXCIZp(bF4r0F]jS282/aqLn<M520%I7"'pfGINVXa)@(H=7#om`'Qtp0q;>p3cLa2sEb3CR.>nV6;P[._Re*NK)$unc;0lO!
%_rX$umAWXY97F>0RlGn:+]5nZY)0W_k>JrJH!3_aCW5K<'X]R=)YmrL2L7s&)R`e##Zkqa)hT=F)0G@XQ8S.fLPDW>3jfu:0^&E,
%#pZKLj!qJm%+kc`JB*+/mp?KV[P)sIVS7S>^c_uQmp,A8a!pM$W5t`)]qW4;S([,$Sh?7L^ZEi*8ZZ:MS(%/nE<N%AfnL/R1=Th`
%/$R'S/7J;n=*+n(:dY+oc'rc+'!2RE"]AmlX9s7]H@>"k8&WJl,8jF\N&];t3iDO6\=LX!!ELqtD;b_ZA6dqaIS4Zhd^q_`,[iih
%ZAms7Yn!GuZf0[Y0hX<%kB.Z'&q![;Ne[*,?-:['ootisB35M.O@'4n4fga@+T<eSN@(_VF.bBdg+B;E50"M>T"RbnAZQo_9?LG'
%=k,HsdKE_X*Gii6Ome\3@u%*3#'JW]Z!78JPdQJ'lrMH?3FK0#'4k9$)0]f/ODXFJAgK7*m!![0`p[L$!uRnQ=Te+2ZP"%k)k)a.
%^'opDOoDu[O*=Ijm']dJLb0L"`W&:a1,o2T))LeiNs^76nNI.G^P:h`gDW+0n/0"<_Q4I&K+K_0cZp-R91OFK1*=l@\tJs'oX):f
%qtFO?>i9>;I">75f#,&;kBr3hC-YgMqAq-2F"u2A%MKn='jhE0!^SjoQ\Y_T&pk9'#VqQpatt;K3H!;FciAp\JMg`V8@`@*Zt6D^
%5;*\&S<":)^"sUm[YGSK\VD5rqte0;n4e^@"IiMu<aIVB't$UTCMlqoM1jmah0KMd>?)M'^&0+q11$?V2\q5]+ORtu-Y`^lC)k0<
%KLH]Mb[R5Kmdd[Tpr`t/rld\k!=s8GpLT["X]S&&S4n/,c9[r8']]Qbs3sJS2?agL\`8AtLtq_VE$DFBGZ'TJ>OOq&c.*VC-HCZk
%dT])j<L(!>I,Lf_dtg68*jKk@U=FS<,3ep?+FN)5[,tsE7.Rr-r2PTj"iUc<><m+';?4IijX&Ta($Rk7!SsshNmlM]UsAk!9+U#!
%ejFfc/@-?pXq_,=DFrIl1cRZ*bQ^F%593-&P1tCGOWK1T?S;H9OR)nW$DrjXPB%KKcPP<FI>f[,P40;M69=.(lP$Uf3tFqGaPBXq
%2@p!a^EbYOlTY#37,-"m-1q1b8E^5KIbG6cT9`Ik\cNi3Va][L%Vgco(19lEFc`@68SgE?[SKCFW[Ni'PG8m*^:1eHo$ekT\&V'u
%\iVDbAXV#6V\WuHA=Vb\APSVR9_?+EX"*qX]c=G]/9Dt8h6<^PX@GK,&edpd31$8'.<8e(QhH0=dg%IMBp&*KL>u@PHa:H99=mLY
%TL`%d"&U6^9&/d*PT*T.ZH(DjojI0]@nRp;0Y_d[B_JVXJU<'LBdjWF'p:cF)?YcK1G/^-\1*rF''EQkq5rEDLiYd5]ALr.c0kPA
%^7l<)W:%0u4`G$6^V?sBf_$Ej_R9>e;l[`?hr!`(@/.)tG%fm5d^ah!RSA;cc/o.WkK?^.+El\^)[Og^ShHud4seJ&0aXY2.l@0j
%+AB3G=DgkVi>jKoE9Ypf_HhJo.a==I<5kZ+!na3J+Cq1Q:HAqINob]>,i@u:JQ'_SpC1YVeoOeXV)s]W#:I5Lmf?Y<-P_C,WXh]2
%-m>5H3E3M''E%t"m5I7Z/nHB6__q=!%s+;E=Y,#d=kKl[-8/a%bNYHaFsbmk\Rpu?)=",iY)lM[Vi=d_12-W/fp!@'I'\pPaD-3Q
%0bZg@KUJ@:fX5D9?Hu\iG9I*UEu%tkNM%&Y$*h<-$;nN?Cs6o1+'uug<*j88AsXRCI'XbPI'__p&69^]]s"rU+HQ8p:Z0bH>9>,O
%g2.(46CtBDAb]-*ZmRuoFjh$g+3>%"m9*T%ZmsO;e?Q&Z@j;tblfp(kgF(?0=:Zu/4G9hp+m?-LG&f\f6[Be)dCIb'_B@%ONj\M<
%gfA7$fnT=:_5Pk>.H[srE8a&p,@A7(86;QhDUL@/dm$aH!D";$a<".IrJFOd&\RB0n*1kDAWL<_Ld8HU*\PE_77J7DiK1q/MMo8Q
%LG%oWG*jIVW@*H'!.eR7Da`r$o!d!3f<`?qi00haY!_)<$B8T-cr]&E1,/8KhR^o@YcctT7!cF'i\rp3laUaR+e8mj_2(WD[*-lV
%HC*rtS4BB"An^/e4FRW?Nm2Ib5=+?Y&K-#05C1V2fUNF*"l!@M"$7AQ8Ye=T'@i=R#W@['\Be94lg]3tHfWYgcPJKR2)/!gX!oDc
%Lot2feaY@g+gF>$Ao38,4qYZ:T+%aOMK<#99n`&Rb9fP&?]jn7/%ETMAnU=ebc4m2fYh^=pl/P4gN3`3M7AT]HOF/CMU<.,5Rs;b
%Wb=O@UK2"HN:=W7T<EV\9#1&?8iHjUJ6`&]*g///K_qUY=P>BQKR]*C@mqV(>Zr9OHtW\M?8dNac2sD[2F[WO-eL.IaI$d:m"Ic?
%5\b=)+L_\#XO[)d(Ub)#CoAV`&3i^VN_$l]71KS:\J/I[Da6\&r?[Q>imtIS;a,6F2umQ"Icr\@1lYSMmh$E-)0g3Y="&0eNHh)U
%JAOg-Tsq$R8OrU-AYiaO'9e/.ali_6KFWk#?n3+`+.CX$03t:J$V1!TWgmUaY7+dn47fiHo\@5Dh&>G\%Lu&B>fB3aMeX-u2th?<
%ZT'WS!k'?;%_fWu29B!GAoF!KOQ&U+\-r^I74#H4Ejpo;+j1eT^uHktWmomB':k&bm?^?0Y<Ua>^E$W<Hq'`KG4^Oig;QpuEVe`e
%!u$u$ENC[CVh#Op-SUqK6hal0`mM^plHZC`39lQl"R]G$nOetniOhj(.hTP8`HAXcJQ^7j!D,rQcHKJA!V#f34mW:-8(Smt()[h&
%(Z[AOJDhsP(?9P:Z:oJ`_4RjOX&^.rf2Vj,1P"82Xa1+9^]'&3hgUR7_LK1<p&6Htf8u@)F6k^.s88@NWsUc5/V+$<:-EHPAV8<"
%s/04/N>stjS8=-1^\j,n>MCqd=:q-5I/ZA$m#Y`/&\s+f-N!"`'Z('LCHoUQ#FJq/7_$r,1gnqk5Jk^8s$dVJO#ll^RIC-]=.2q,
%"[YiSnH[s6D\\ODi3s@n[g]`Bjk&la"HV=;7V;-CpVD?mXB/@gTH)2%dBa@QPn/sGFs8lp[Tm>H,Z4f15.l#>LTCKod=FjZAP=.=
%/@L'r="_q@I3V)aJE<M`$BBlPJ9X3W$KD/+gE-h8*YO&1AgDuaP6bIk%4,ASp]P%^@\I?[^i-Y5U12]f(Y-qNkQM)n0T6Xe=27(>
%H^A/oUsV=A'tBt)JoOe`(5"tMK^"l<;.+se.;ui=!gt/9KN_9Q$7k$RRJd,]=f:13E)&!f3DQA_,H/o+n`/+kjL--Pi.-Lli1LBo
%>$EPNB9MXNmZ$5siaIgX0JYlrf9*9c7S9K/7)PeD69]Ld.MJ>=_7',bdQm?:og7Op;/^rF$h`^H:^nH-T,c`.?e?tWi%-p^a;oBO
%74J:[]EnqHQ[-pu#]/IHDI1D$n,EH1Pt(^Hb\BUpKB?6f#>`7RGLr&OWtHr-qHb:Ea0`O5i/0q`gKnReH29_.8"9@822_`(5:KVk
%"0#dAa80F6a%Jno=m).?7EL<J=5B/DY)ad!j9[/f#"&>.H:+^]!7R`oUqYA;#3IJYJ2$7ji4%7Mqt:9!=CKjJQmJ#UMKJ07_A?fE
%)]sSBdJTQdlS=["!-Z,<*>X;RS^SpLU]U(;9,Sr:AVtoiO(pBek8P!t#V53Z(8@g'WG<L_B@(%7+O6HX3U)'W"[NC.:EIV#W!AcZ
%,.6[l*6>Ock!1nYI\FQ?FMdkI)'!2)GlE>+>&DkFJ4(s?)D".Y;g].^H?73KG6=gi*Df0G-NDM%(DI!-I'OK\J]uWp&Y/I/4CXcH
%@a7SD^$@hhJUE8$_u]b@i0+$eo?urY_/Oa+_3B<5_7QmH$l7`bLfL[Y'oV0B<%k4FqH.leH;:9[2:D5VrO,b4NnpNST^%Q&]YH!l
%8$.0a>Z%UM%YP=V;O#uZ9<uEp<NOf8C(,4f!Y6e/TMYn41!;>KjE2>g+ah_':Tc3?U(#c_!uWhrlkMhVMkT%gp&!F&jt`J9D.u[5
%59<`^a8'S<e\TWQ'1K(V99L&]pZpu25"*?UV'*I"fcnple=u.%_F=10\]IbP=&3^@^7R^7BJs7LnrWC&dWC"E+RAF3Q?LG5p]+8$
%dE(=-rTagN`iZBcgd#Cj5Sg/,1olEZp>?c#7JF+*0[NrF:%)aDOtZ-Y)2S\@dDTs7%L/4\j>]hO1euUQU!9<B[-,[3gG[:a"m:o(
%P1(AVmEr9VYtSZ9"2b<CDQj7@JJ+iB7oJ61d+CZnKr";I8099SP;4L:8IM!pP7mB$%/0.V>q@=Rn)NJ+X6.(3KSd#+e1V3h'&0de
%(s'?gfOAAX#E`TFQu]E&%Ad!63d)B>K6h-QBXk'<;$RN_HER.4duBm_`<"Ct[uEf6OR=:=+crb1Km_e!=mCqsha#=9Fc#4`LsRmd
%k!O9M(hkc.11,URe9tWbTP7=aOE*",n%=D[g@$LIQ$da?Qs]nDf6hMT7RdRZT9j,rLa%GG-8!NRGYkQ2b.2+n.6`R8\G]<P%T7mY
%FhfoQT3+SX,q`g=JYoa#-^C>MEg]^+JrEmhZ;W1o&pdi#\n[8)JL\I,cC\5tie;A.;>.Y]"o3t=RdHHgF>6$,em\;P,a8>)[IQ3V
%Q)oMtH_oKNm8uj&L'Ct[6V^hHb,klM==g?dB7OV1Jk^50+pNQ\`0/AehUFfQdg*Sc6uq`B4>mRXc4M.Z1^5(=aMT/TP9_Aqr`Usk
%FN.nAYHa"A[8p/A9):A.RXquI9b[u8Hc6)O1HV+0/5:5EaK/&?jM%2=!<5Wk\rW@L8X?[iDCMRfe(QIAi$s-]WK%19!2k34a]Wr#
%>L/'I6hsn.WOLtmPfZ&^0VTe6Shd(AQj4KF/TZFrM_=d/ZE,PdRL=a;mQ;bt\9K:!)%@5eb,^IAkHkd*^NlK&j>`:$*4Atc!A_QN
%&%VqC!Z#*4mrUkIZ4a@9\18t3hK9dF(*F'd$!1Qpk'BTWqE?g/J=].<O4<Jr\<,po'mG(,:GFq/@$7oB/@s6*E@p(b5dA=_KNf$M
%a)P7lhgm%o2_3qSiFD81rMk/^ULhF#LpgLP.9g[m[D#"9i09-g%?SRK(m#?PaA7I-#_X]Cb$oQu)4G2l3m@(>DYHgT!j-,p@5"`U
%,N''r)]<nlOBDnE!4lco\U"BTb*On=pA8Iae$%E6X5($Lj;G,A'HT[=ndJT23YR`j(l5>0bT:.VY?Ek@`-o=WBC7iq>]UU!LqPnU
%!mB#ImgG)[kOg+>VOT;50(jZ'$[KA]CGL.KGi6ed!)f=%#`uB]?"o\u@kp1YVU9O`;^<MDSGQ;:QCsNr'K5nb=i4duHiSVd2jiVT
%EC)ec;"LR>:jsG(49s36_sX(T?S'7,'@KF<.kf1KkT\,]kF2#oOSIBF;)g>n+WXlF3eRKn9,l)BCiN-;@Q`6b?0Hia/+g[D\Em(L
%/O+t7=n5RO6rk\"bB,[=I?F;9G6!YO[UOBcH^a+5(QIsRSEd)sA3f/pG'h)oG6:.oRf!:AMUj5_O1]d;P@'_rI3Q5HjlfoV#W?!a
%q0Qc1GMbhu]?Q/X8BTq!EZ8B,2!kOH=-o62K>8YuZSVCIfYJEtRX4h\LA")Kc!`,rm3I(]PRc>Qp*<E#B[fg;d:aE>NG2WJY2dnU
%oX&sYc^%]J)]BWfP1uA8O%o)'%?1QR4^P$TE-(c..;qH%7AK;&NnB&cTH%js;L=L%F_NeKPEBLH[G.n=%d\,UXg$I[I3-QQ*W$Me
%K:3<i,Iptc<-H2/r:C;CFOfPt+N7t)72Z*Q[hm^A^Zn;=SAgVC70!SY[cs<T*!.7L%qD]ji>[1Pd0U'VJ7oJu_RK^?%%>k)V;"L0
%J8a3>@!u]-hH27H5S).(k;<uQ#,oJ#9RZ3gATZ,\37nPA=!E2G`d+g0'T[Ps`JgY"B;QoLiKVC`aLou!CN7`(C`B+WXJl[^0AB_R
%/jYdD%$73_SNJ2,3>euAqa?sT[h,A+FrOSl!tQ]F;"[:LD'G=3E<_9k`i`2G4G$66T^L/^kf/h'q*:<Ys&CubKUdXN!EM@*A]+fH
%)3f-_=Gh!V'RDlfFl[4,I$Q9^=tG6+?!&BTfXeL#n#rP+JM=>(6T6XEa7JFk)Gh9H>;]EC%kVY3E1Z>$U8t@uaU#>pR:POUlWEJA
%i#'Sn2q)2i"*1=98`O=-<uCV95*-"F,-23i2O@GcM7cDunCn=%^N5mi2`<OUXADl`0pRU>F;_XLS:udX9@b\<80Gb^"bd*u`._91
%dhX[m&HE<$hhAap,e=(!6pGCnF/4k"^;+bS0N0><c6!&'H3hpsE?Td6V\/.*9_kFGUZUAs]l50U4KfnseB&d'F9050V]huqc'&3-
%J[PfK&Dl+*-XtAVe@D)+LK!a"PB-R0XWX9HIN]j&i0FIUGEg?+,N>");iS"US\,2qSF2S0J^e!:2?qTHRpOlFJNqI<_0s/>A$$^<
%*N?[e(GMnn>(LJ4=f_0_em^g/Xn`Qtc]SYQ;mVXq`!=%2SO-qP-3V_nWKA"e:D%1i42:.r`p0srn]?NT:6/)@%bYLI9q3i5b'h+W
%JRYNk7%>Fe+fmYtDNkCsTq."aW*YgqoaDF53ZZD6B[_jJ0X_ja!Np,I;`1QpiGR::q_Wnt09]5HguUW9p03CZ5KgT/gJ7>PXD2g\
%66"%EC$r)nP@7,6g5O+QiR;%ug#BoT2Omh1h1[(1k5#QP.Xe#Oh.^(1Mp-'5V=Fa#b]VaM4#%J!0f*Ks](MP\_h@]&E&4^4M]`]^
%egU<"chdDo_S:PKjO_X_@:11IU8@N+22l-h6GH.Bf6<?C#Te7N8gf9!lW6f;9oc6B<A3^n`l]9Y-:GdGh#'P/]_cUn)X&jH\UV"h
%T\[j4+il>Ts.hR:$WO/J,3XOk\H#%E[K.QGZ`Y):/>PfJ7i*@?G6,Rn$R45FM'PNh'268f5%*,fG#)^f6ZF>o2UY!$I]oe:4S&mc
%Q<Q"A=$#J=<:t%qp"#*Ibn;[?gDGIr#1t(?)+0ZHc7Y+K3Ask]Te!GorO`7sauP4!4=!(I3=8%$Pa/)lU0fg=>%gN_YjoP!gMkPm
%&Qg+X/V&0>4]GaXM4/"t!!q=^VXZSO5QFNU\H!)%%$36Ki1b#-\d20'4o<pYA(jn+PH1f`'H(%+C_;N-KCK&"3eUa%%fk"0O3VJ3
%<ho[#X59Q3*o,e.@i@+b!)YC(<:Fs3P>(^4)VcHRW*l-7dDKm.&H`IIeq(>FhhQ)+Qt)pdVW4,DI8.Be4^F-u2WBE]nNftFABt_*
%cE:gE<nB-T+`!bO@<.]+6\fJHNVqX(5Gh!%kZ%V90ebJqqU\eC"NmA<A+uEch[W/:hTJ8"g6#CFO:P&IZXf-?ZJ4(6J^Fu6I1q!Q
%9dBFE%YODoAO`9WpI-tjC-kkP/A^46ZeEpX)7'fRk?$/(;pR9:o?hF*>m"3VJe^ubRMQSLX"(IK\K2;Q7(P5*B_$#RAqTVqG#T`@
%fi&?<)%LF+0"=C_aW1@!MFN8IIY".7f+o-8<T*(ZaV58Efd[[t(E-Sc>=#N9@P:DS,A?fW.7<@<3XMQcL-Z*<Z2q9%?:^QnXSW(3
%@Fs+pMB5RR]nUKoqqT(S,=SdgJ2"t+K8(G4\PDqI=kBm><SWE$)$F@q'2cAZU^;PWZLE^XrC/D(K(.M+JW#^_NbPS$(.A([[oU=b
%=bW?1#T/,E'T%D]eP&Ws;s`um&W]FJgAOK1#a-RgpBq+?@kfHm#patoTLR"ZT#?AJ=9>_6EtW7=Yq5<dMb,=PJ>f)gZ6,,8Oo<)u
%i>9@+2=L.BMjA?H.<BYb`KkNIq6Hfa1<5J&E1!B<jgL%BAj>)5p90QIg_E0^UJ"XfC1`a!*J:IC3F%W^L`OVO::g1_;!R/&'FVPk
%#j^.Ea_Z(2&bfi2d#A682P6&Q>d9X\M"6PXI3>J`]GUrT6&@+<$o:Tj1DV9Eq2)%T<*;\ubb0shT!"mY9FlT=T"nSWdPMhM`0H$j
%a$E?*#$E4n2bJ3Z*03dj"0aK@B,jua2ZO#u%aajn`j;"$,LIB=+S4Q:6?S-UW[Tlr[_Cmk#`2:e@YhQFUJCnE)Y_T2#!G.V'6iF4
%L5metSQYSq`g0XTHL1mqpN=^Kl`u(rSOD+#QF]uFN@Ytb!e\&ldUHR0f2+!'/J0__^1G$D\=r,:Q_I!d.:ekOIE<k6j&/ZTHDNJn
%3oRhT89NS-0J;10DLLWEcQIBd,5%8iFgZ)iC*/RYHS9?c21c+S,D&8toqP:5)XaO3UlKSm`7F&Hk*_Mj;VI!C/8T-E&)[ffYKIeQ
%/Ij*S+MDh%\&+_fn9hg/&)G;io6&_2jkBT/\``eE)q2mq2(ge75),*W#p-t__PYDOK+Q;`lSc!Z@8Q6dl%a3$egO7=-k<YUdrQ_,
%FY5@jl0R:kJQD0uq8m2FpFt#lQu"mEUBLq2I=Dh?mDJJQ5\BJC@&-R:bXgA#"Ahd<&K42_PLhZ6M&+P;A^;5*:QT2>J1"ChIp=67
%3M.NkHG(s+D3$/kEXb,jp[rgJi0t(Y#WAMgXh4oX95;p=QJJ.%",U2Zh_/+Qm.3Ian'p5fq#up_J>CR&IMuAbZEL)5&=03<SNt=W
%(jI2$U?+>+""a+/Q33'okRb1'bQBQ8kI%H^<ee\%IKMTc^._1A,UI6=<\hli/Ut@uY2t*sMX_YS2o5iE/7_lJL(AeU\V#=f+.0.e
%Cc\f0;Ed[+`_*AJ(Gbr.]q9sRWn;\mcABJ+?6BuJXqnPq8@SSI5-'gAFps"W9iUXjO#G[e\%da\ERDLEI5hcSgtMC/V-Roc5s])h
%kC1c<=Z?#%RLXj%o^=5%2Grn1%E&A_"743_8bSp2QX4S=NnXXDY2!Ltk'_ZP=aUl,<l$+`/=%)H@nggga1C$SF!.!lY<Q3sHS)_[
%HjYV9q57"299Tp<MmPtB3'Qj&=Ye."n6<NNip=<CZ;k\keSBo=-O]GI4D3dQI2TB[p`rrB%^'TJ(13qk\b_t$\H8roUA:=/!_a[1
%n9rE6Ga:*GT%#^Jq1W*s`Ig*,XtEcl`t!f[#aK)m(gAj&nfcGc#f(H5,1_(iU?VKn7Ja_Yb1"hiVt0^f[*gh<1?NQd@#EB.T>7N<
%i(8V;JM7T<#SY[+170s49q8AdCcr3b"i?HI!1nsX;K\L`n,nbZ64M#o[ne-!Ee#k:)*04I^_.No%jS6m!K\VBW#3uG16>[9AS\+'
%":12XABn(sP_X@\LWdR8\%uL:%SmMSecYI_/bLLr6[[FD2#_Asjqr+gen>Er`-*gZHm<F8^FnQW8Q(o1#%SDYT)"JDoYlo"@c0KO
%V;(-)/*spu$A:dMW_a1e+lG3JC-F8ir"=Oh)&&64d=&A1HX`V.Q<*H<me0a8-(Zns8p[K0"M51_la$EQjZ$TJ.C8j/5-Y1UIQmB`
%!n1MteHCPR[>Es[YonBDn:TXo-W4S?^DYn"HYh-KNQmc+L+ir(<-*ON&@_]:L`6H/\t?/rJ]l%qhq3%0M`5BY9jp:RXQV@dl1gdG
%&q9Aj@LMj'M[rBf`LM[!/Nbg3Zh=8dR3uD?79]g;^9<_"!2Sqb&$K+U2Lm#EMpnliBN%2CZ:MDq4F2,M]Y`aTXtA_Mjr<!]"UGK[
%;\uDsQ%PW3/Vdpo09qrhNWa.WQjU6rDWPUm!7g3NT_@->c:bO.,AI`^OXJP1E%0e:HaiT%0O"4]%"j,\R./D9L'hoVDGci;qLMo-
%NW=g>4JG3F@VYOti/K[S]G<+VF,aCP;gDF+q-Y?!o^Z^EWY7J0U")@QbCQl5"D&n?c:1q!/(D98A8<5LMDhddK(Fsm[]7_te3g'Z
%S[NdSM_OqMr?RlunVrbFYg/<B,l>OsQ=ie)L/2P]_1P[_$=WN@W[I5g9A69e4g:SN%:q(M'M-c66\-HiYsd\+Ip=mC[FpV0bk?:r
%&E:"HF'OfcQS!.ceeF"]OlUDQ+2KL7kr4Nl<EtKgfk6cXYubu+64;GSQ3JgK<`]'m3*VkiP#q[k%7ap'ml0U.=H's<bKPb6rL]$+
%f`N,Cca>WgD2,DS@r7JSV"HQS,rM6Q*TT`EhG'VGcq=^E?q[^9Y9[/%3A,q9kf\/(N6^?551qC#^h>hU6]Io7G84&9)EE$/qiXV9
%<a\&ap,5?Vq(2h,7D#OY5[Q:;%(0da[%m&>&pcC!VQ@g&BE)0lE+SR:FH@X/f,kS"gFg#8W$a&:I3*dni5M]rT?gk46>"0PQf&m^
%@<I3EV#?I7jgl9dFe/tt>p2A]1\+GX9:R[:4@63bNhHGWNUnYfoH/b2X4E+C#e_)<_&"4Qdar%ZQhQ\GJ*hCHSQ"*nFmtr#-(">A
%GKpbCa2.KNl-hf(LM7:R3r%""e=5(+(SFOIEUX-PO*hpp?Uu/a(PoI)l1XKJ@`_[.9*\d$hZa))FX$.Z^4stFDrf8klarQ'7P:Q:
%Hd\q.=P\VmQ<@A(Q[@ml*Y9,^iVkl)`##oG#'?ct$b;F&6fH-T-F\CO`j$ee[F<eT^L!8gHcQ<4*0<8p,2Kq%I?L*pD@MV3LBX"j
%is/5^_/;QV?<Sq;2L$3-hk2<PV/K/q`H48PQe?&h;0S@j-#V6p38!@'\+[pL[rSkd-G3?0EqAN9#EP(<Dn-UkZ"IP']MI#E]G6>"
%Z5_%<PM1"Z\FB3e:kp3Q[d/oQDT=oC#Iqoj!Ig,6mnX_W#:qc5RgsS5=%oZpG1?!BK932hWf-F5Y&qt7M6,ePi+Y,2_;ej?l01r4
%TO/=7Hr<s,;Pk"CSk*Ur`T@eNhj*SG#e9gZ1"9e\LdN]WFl+sf0M.gW/i+'Z>$sCsD(gch^m(+)fRmd\2,:IiAii,'^'m^sC-/&0
%4-&=n6F7..Z]rH5QYA[>*^'8p_E7J*70beQYB84X<_((e8[/ipPOLM_lgd%r#I:F#)g!*YD\<':NWAQ<'K\b#F\BFkk8_98k9=XR
%iapAD.6MTm>8`_f2gqWSBmgMj9k%Hf6_1/VCa#7N=[.?.%$.dE@_%bDCLPPnWL_4c/kXO]<iPsg<1CkCAkIhV5t((VX\%`]H.n%_
%FN2D+E$-5Eg&YuYZe"8*h"L[3O#.6D*U4d1NK<mR5CETup']s4C0#3Sh3=c3";_CM,0Xin=iT8JWT<QV[k#e1GEGX>8oA-G]/U=)
%U$;.('8^=e9pUM1pal0V,ZmP.]X5=\i`gYC.1<bVd&H;G\,H:!(Kss>'G]rGqNMdJHqKpDfC=sq40/%Bm]sMg0H[Q#Wd\-sMm+Yp
%.Fi"TWJnUB0N8S+4tb\tSLkR25l,*#$!J]DL10Up<Mt)5qUJO"oo^!n2q9LZ8>GLOZQf8S8Ikp*=XC:%Oc=fp-Bt%AB'00!N/*X$
%[[WenI1MK'!O@&!;TlQc8l;A-+`4*tGgBHa!bC,b!qk1cH@096d"sU28:Q2=\tQ"'V^8^pCn>/tnnYBEP*9#!RgU_sg1sj.O-08i
%kVpr,5`p=Lh.Sspep&Cp[eI#ZP;[-c,q]pHA@#9mD>m9RK_#%/H:$Lq:fGX5cX=ILOXW@?Wk&SgMV_fDRX"h6(b_5eXhW>Fg76@f
%<iRqai[%]'Fqe=XU'EIOnES#q1=6+N5m"&8_J0ef;HG0=Y4,F3LDKHS[DFc:j0DnB[)\ror9j.aeQd$R$7djE#(A@nr:P3Ane2KO
%T[B4a(TS`6'8,/[]Ib]nc#5Inh:$BES@lB#[PoZ_g$oVlW99@K]%U1+r7$u8s(8mG&ci5]p=P<>#PSK`3uK(7AEe'gBig\r\RrDk
%(;6&8O0*9$^t<Z#.Qrm,Qk.PZ^5%JnaTXbnhpS8Ql!YI9BX?dH,,gV_iD1=,+P[/<g1QLu0bj1>,@`Bb@b,&A#Rrh?:LU;<g"rK3
%\+[&ojp_oU]FaN]eEr=?i'4FNJupK4c]JSg#M5C]3SQ-*0afb:V^q[:7',!O^jZWB_]QgQ6>jP!lIZ;dm*^;.&eWWu\P#!sX4F_g
%+&0hh2rYe<b<%APHDF'Ac9&Y1T'#f8n)u5U8Og8W&]g;!-Ul)mFKia4i<Wj5nR?2DM`EeUV1Dl_haj'q%\$7[^)V@p]rq%u=%s?R
%aG3M&R"V3@/F%]%H>\8J0NI0ufspf51(`H[s7fqbVj8TPBnCmKRWBBWK.J[o>&oR/aToWHWa_*?s-pe#-$5bdrmcMijZi_Lr:o6T
%*r'@Xm'hKEhuA:JV(_l6hu*!ds+j0\I(r.V$Z^Wt06p:2kL>i>3g0B+06#Bkh)E_j(7&@N&"(;1C=>F6"tUFt)-D5,WM$Ir(.;0)
%S9agJ62bb50Rm(TIqA#.#'7m_2&45ToQ2OKl4C0E6+N-<&LAPPG=]6=Q(7u#T8i2,E-#$%)Oa4>?"DagE*4-G=@(-IjK^[Y6uZct
%T4c4u`c,S0:AKm']DS4E\0/S]=q<m1TSe/K-#WVSI%TK^%<k,7`J`0&n`M]^15(+o@f>*9DPu:gj=3:9!(;`FAD_c5WJ5'+d[-8_
%>jCtQm19!,r%_]UZK]+pcE-Z?K<IpDTu\(Pc]OY2>[fR/i6NTZIPe&0rL)^B[A;%AF%_oC:'R2&*T+N/&2L,AXQ\YB`Y:D&R#)_:
%VG+H(?S\M&k!%%FN%$S/+n7d-9UXAsW'eQ)U#m7;k)g>mILLm1/J/)<XTb#HWH=;2:a';^l:,[/9>hBm+*!,S+EYLR&`YgMiJp>8
%!L=H+&HbFdU(7i'0RJ4K']Ae@,3I\QJ$GM0IO#@UOrfg-#(4\h=biBD=#@4:6lAm0^;'O]MAaU)?dSFqmE+$4oVhar@9UXDn>P4d
%fNIBeh>BY0DnG>O?g,E-ltm9SFR504F9/=adin33j1iF*i;^OiLZ%&tgOm8n#QN=PSK[fs$[B*CG_'[X5ig4jQ`B$k5ZjE?k^,QK
%],(Muk7P5Z?pJAQkpjP?f)oJA;FfID!^,;N@eXp\N?X.im/b%L]=9Dm9ES_8mO4\1KX%^nV;*ing-==5!,OH_VL'uXC9FuM5\fu%
%U?qtH(-Yl<%tLmcfP5d&6DEk`#*61tD\+eGLoBO!bO6*Q/_Qmk^P5TcT:*6B7%4!!YhVI`cY?!@;ZMCo+2%dOiV.<;!LD::EE(52
%[lj`4G,_NF!=>enM=,!V9ggd_Zot(.'($=kWZ7QMr1k#Q(O+U9J1P,MN%<!eF,V,ZIIY_N'9eAU#:5mHHr)?(=RqBK&(l1iBqNoR
%opD?bEU/5d*aK6cApf6n=b?rd]A1HCrk%j>Yt/-6jB+q?IBZf-Y"a;F8[gn9bLWYWYJhNa%ph#AAJJQmJi9[u`JMf%ckEB[SuiN0
%+B)[)oQaDj-??_^8d%<i/9Mrl+V`D(q+lZ<9TSaSX>hq?ih)fD+usr]J<f(/jXN;p&Q"fDd>FS-eZKIM799R6/k3@?*rmkXBlP"H
%%ptCgFM-L%X6(IiD8+';D=`1*TkqFJ*Gk]2V!>d`]Cu=lY2i<$+QptMhpM0@TVLhh#n=1I4?!W9n(/ZCq=c#,MZ<O5.,VDHp8IPh
%M%XY-2Vk+8^aANtJRHej'S>-s'tk%LKH;]Up:R#aM)W^MNHitK7PWUW0JVT/I.6Lg)hYOW.>%FU[:592L`1&Cdlu@;St?[9dt@,@
%lF40UeU.7.HLLu95'XXFD"KjJo3-8E!nWUc[fWm69<+u[KmO\V!q$.Er?\cC<Sa4lUZK>.FM$W85XpI2Q3T\C??a_J(D':O%a\Jl
%N[NAE[sm[rDF/<$bIn6>Fp%[Y#Lr1d/%QddLs%b1$W=)3/V9S_$aSC/9qE6s4SX@,-(IsM-EI,SoK5)upH0R=H$<-1''R!5F1LOd
%K'0NBYWb8Lp*0q1B;`;gkBlnb@$j3=<Z=tG!SmHOcN>:fo+#'/?;:]3>n?38>BMbZJ:XMWW+kM1#6='0n#OAEdImPFCR#&cg)^7\
%.0P&l\nq-%;Q+=/?1\bcXp;aIYgP9BB6efG=4[NsW\:op*WTu\fl:VT\.YsV*WY`mZb%7i]Y%V/$M-O&h]5lKK.<%bpDmNMBKM^?
%45':Wa=+5p?-(SJ?D&L&Lq)lAP&6B1K?gV)"I!%Vh+IB9eqKja!KlYnT@*=^@#I2gK:t:s;5(&X!QgF.@kHCU&7c+6BR<!tiZn:;
%Ls5UEpr7YaKj0nOBf1jgF+B5ES7m8baUY/-D%FPrIMCNXODT_:-e]W']>T@4@ft.YO]?6/aJZ)1?M=8*kDltUA9dD8dEd@2Y*=tW
%#9R,G4CK7s<?FK#m/[b6*BO'=E$]ZD_+TXrE[@a9pAg$G59G:aYccg6_Zd;rE$&;4%tKleZJ-Ek6?pWi-qo9ud-,iG6DEqb$Y8,s
%5!GtQY='1P?]Vo+*,3l%F#Yr0HCF/mn=,>/*9X`(WiV_km/\Z'V[=b$e+'FFhDkBRd'S/c.WQ.j)3)/Rp41W7'D^&LJ?k-IF/&%&
%H%_Y]Zot')PFUEF%fe@'G-sJp/?A3Cg!"?b=P`\d$cBj*D%A&=G]ntQ#@&aAeZ02RZ-%gmWfhSFBR=\@]C!EBA?6+[1f\X'!?W,A
%b#FMYD%AV)iDR3T4G1WV/s4IXp\a$LA3SR(Z]G)<qFU6X2iM5'K?E,Uqq\T9drS#l!\T%5qbQi?^s)\G^=s^Yb@9IRR>VTfm/^;;
%#i3sH&'1NpQ`[Xj10hZ&7ZrCbc+EEFGMqK;"LR#6HI*R@/P\%Y:3Z=n=D;KM5Us8@:p4RmWR4-4m!GBZarrgl8@"HM&tKPt53M4R
%dJ6%aG,gYhXW,Y^JYX'Hkdnp,7cT,dZF:_o&;aEn9HOshFMWe1..3i"JWT"<XZc([`/P:6(kp<%8IF!/hA;lZY>JR8@<<rE2a.cZ
%g^1gId7>cFDfOY:,!AQ\48lG&IF7aR2>X>Em\SZI,@@Dq&\N7.52aY#lT6^40?!GmAT)cV;!blf`m+g"^>YKpU>ANng#[%Rc(ehA
%ebO`9g@o/Ks"c1hCj\LA%'dD_+&F/ZmcrQ+GSS4l6lIF36_1sBAL1#TDL;FPL;TeV!C2BZYJpf4arQ1[R9'kAXTc0Q+)p*I$;T-]
%.:MD-Z-?j*h2]2S`%Lee@,D'sK`mK_:*@+hS6/=iRGEN]JIZq</1J3q!Ct6VaHG7'GfWSi7"P9%ogfI\\qn@5mVeG9"9gSfEEYAK
%*cQ"O]0)-3Ip%+7>97a@.6<KT#F'p)0"U-F73P*:ZofJ#?#Go=/IrPk4>hqbS]7^*YgN#,8\=D8'J0hr8FgM@TS2@"SX9SM)$tHM
%5"9U=--6f<*=lJ318[*^In]J(NB'U2>((KTG_&TBS]*=0dIBJ)MKbGe'nNK[^K[&0bT;o$7Jkd.J>lIU/TS`2@aTg1`u@G>&,/h,
%2WRKI3a3XZJb!Ar=8l70;/QdgI9#^_8';"sI;+k7ai3Vj*1[\)r9)[XdM4!$DLW<_&"%$rgcU.Q^R/Gpg&aH[)]/(ZkW3O8fp*U^
%FEF`U%Tj#V-WB`$>qDPl*=l6^,((T^nUS#3)7(,"%tNHQl8sl?'DSkJ8Uo8bg_cg>!L'"bqg_CuiseEPeqG+Z_-%%1DMU5bPEJ3U
%QN_/"Y.uA'oMM\pOnA'W6[,BL8m(d9Y4tDZ4SfHXRCoS^`N$:?`&>W&@_=@jULq,QZDF<<lS6alrghuO:,dpq@h-U9^CfGIH>.Xl
%#r8P44UFYp6BnW#&uO"=Fg,SpX57c2FZOb5WWXLj@MIY]bgZE5eE/,,GE5Dl'8bQJ<Q45M&rZ33B/]gBlFH#R!N^6b]?J$=g0(^C
%&$Qa>Z/JDkjt(W6rWK6iHJ&REF?3gOPj3u+la!8`3hF:>mI]XsW.nO4UuD%<9BW7)F;&&1*7@^K**G)u,4.5N`0Af?hW.)u1AA:I
%FWf@Zb4F)#CB>G:VAQW/rmV"#+SE4_1<FecS#oSUUe^?1KYF0j)4?_gXQeYQAtONem6P^&d=rD?e&u6hX@1We^K).pP1G[?\9=@L
%9M]3$jqDhl6"i>Q0Vn7Aq8!T#%Up,.RkiTuZS:gRZ,)q)LDX7RdI,or3_/7g2Ic)uJ1Z;JJ^/]Lg_[7J>#^WL*FE&^*ucc?*//1p
%e3.\EblZ^fj_2'^L'QM]Cd*c+#Mf&cNJ=3j/N6/k_7Ud67P4E!GJKbm[75('q]iEpU>Nel6goI/Uhk/a*VMQ+Vq,ALd<s.?nVpIZ
%an)h%iQd/_8qQDb:Gh52G#rl;nO1q5N>ZG3[LqV'g-nF3<l9R7d*_>j1%`l^?upEH4F$*dCj>H_Re?2PNFYOa?bb:^-lO-\O[So\
%?_cSrc\j=L/qCXq<!oT5/qp(t-Y8pUhYRAh*T47sb(Ji>Qb<9Pi-G5"p?Mmks(KIar1cP"n2\AG+o_WAI`NU\Q,(o;^skja4lRnH
%N!m\cMB:n.DUksam(#/e:C@Wu;l'uV4iMP'<7VFb@1%k6+#/9?@eSFYfZ!SP[fn*#cK/q$b!fo3M&W6%8IdI?`=%hAaj3^fFuFHm
%Gn#7K:8(si?BXl9=Gn=]f)f_fiuJCcAbE<r<+eOY65:.Q,$7m?QKgd`QchuHQ>UCD@q?)UQFIuQ=,,V*ap>Mc"h-,8obgKAVjmn<
%=M#DLJtrFa#hZ?+`J2VST^!/^#i5I"NHNkA#(8@V'I@4.JJ#f'3^8_?qVCSL%3"i7B2Q>D6A$+.b:6^n4)4kfYA<^\O]q8A.TLrI
%PK_*[F:k5!^G/fN@\Xk[R*-C5;q7*LglE(&cZ!e=Hb<TFF5hjR>lCk)TFU:CYV'MLVbbiI;8'jZpD(2a=Q>RP[SYDP<gCk(F,M?H
%3$lI;Uou8d_bL[(<K)T6=0_$j^JunMV)iuG]*5N#-7`_iY#;qQ3`I;hoMIoeXPN$>CA>$WRAsTM]()@``?6]%Z<deOgs7p>jDn%b
%nKI#_GTjFmpZb#3W6'#o=\c\FpcRr+!Vqd>*CDpJ6XlCXIkA;a[1.V^acWEicu4jH7b@nF<M<M\OA+fJlmG>V'2(boEH&Kp=,fu"
%,t5O;l+!d2EPkCG/1/LS1,T1Un5[KI`BcM!Y=Vg+@jMun&q!jH/*hm2\rYsn#tbnDA=.-<lrXFEC(s=_7,;m6;t'#r.Ei5GDp\lc
%4h=GC#k'8rD8sY[-JB7-r'%iVEJ<H%(W*r4$?`4%971i_Rb95>:aDg!=B/[=0C.fYW\>Ti[cAlh*SC)ii<<r*aNeJ"_N1]c6B&Jk
%&S"*5oQ_NV2inR%,(bI/Fd[$R9ZR,!X^K:Lro'SCHD1']<gmE14!6Z=!pNGPNHi&)`aWh*5qZ04n/.Am!MoCs5LFCS"08R+`V4'3
%kiIeClsF&*,58CDC9ST[MnF)r;#REgLAUY176[oV_k4'74YkjVDS!&jl"U\#G?d^tTP@S1o@56mKMBDmPDZ&]Fb4r)g(.3@,K3PJ
%#<8;Wl5etNNI:\IdhI<$5nEm75O#Y,s0FrTf1J5AOaQe>fC@i"?ebJXaCkE.B:P^gAc_"eEa:mR=,C_8l3gLQl^2]O@nM)kF9Lo#
%lYtUT:iN2=/V7:AQ*tcH<lBPD$j"9gK>sNfq:S"]+`V#&UTQ0O!Np/lY01./dO`t#FP!*4%L=;8?2RdJ)>^O9g],UWE"n"CN/"u.
%m(cZK4BOtG*Vl2EbD8S:&(!uY^2O%@a?`Lp]CK77L*JK$)[O`<E=5/>06CN/\'VY`LZ!1LYBNtDiK,3jIPBt!5"9c\jBmFE&,C@.
%MRU;baWiI\J<9<h$tLhD5CEU4IhQ7YV!aCi7%dukU&X8UDaY%%JdlRc)9Y5:W#M.m6s.J8L^WYQA=4<c%*ToYr$[lj"k$iU&`WfR
%.'J=7JcsI;'k\5LrX!,KYeXbXO:U0fc<7?oSfPGXSg5QGl[;cbj;:p_l@03_c:M\,Y:mh^/Y-uKJB+-[Le_aI'1l@,BUk=-=g+`E
%Fq,cSdLG4"UND\YL>Joql*)h70DZRhJ>2=(H`-qVLWZe$!4@<+1WjqiL#Hpt$jZNCnc<0'qF+s<bq4S">QA:rh)/P)fXcH)CET3L
%c2N!V)!$(/pup0G`GXkS`0,K:_7?af$jPUbLdePI'l2o"e6#V,oWd]4jICaP7D<-4Y&6<A/b!)e#A?kX&-`;VDLrg?e5&as<RB[^
%c07d!c+d2bQ/>h1SU.UY"00M'GqPJ`"q9sCKs68579k9)1gU!h5^>3][#?AKo]a!qddtW%K8--e?EY;pnTe)$MSUA/Yl4LmI7(]Y
%%PeHX$pR::+Goo>)*]6bW&N[4Sb]kCaZ5HrMut'o.Lc+W;+>[m+-id%k^O*F83<E_dF._f1^ndE&/^,pLBDO7iLgZ'(sY#?J\]:3
%kmV*?H>,:WXYPl_`e^;REm/;!Sla29H'K6-I$49gotk+G4g&274ndgho)jW[2]6'6Cf85MGu6D!e0]RE\ii&$ikgf7Y?87I@3&ac
%/78`E9#*!>*Zj+^C/[CI[<W:dag:3?0J]I5pT#RmY,oh!W&,rI,]CUWXpCMF)>Je-IQ_F#h>,'p!b5V7AJ<Ar9k-tkJEMJ0hA7"Z
%"s2)VYYZl%]l'or`+)c&4=X9gfY'"9a6*]EMS'L!7SVphbKLdg;,`aHhJ[KMRg''Q_`9ehL@6M[_isC5]`ii50@0$:Ta*XZQIA?L
%M[?^=q]EV7f!,Vu9*"H&<)85Y8=@kh;oNrkHpE3g-q!TLNsisQAr56%\8*4'$qX<<E<s%S>sX50FkGW9j;bkqR:5&SZBqh<5V<eP
%0Z"dPhDosdfd^06(DOg-Z10lN0*:Tij)r[87E[5XBPDtf-eh2]VZVkXeo!(%[d=<UD2N?*!$3cb_K.0ebOm03W=K@<Kl91G?'K=k
%p=@4`,i4m;^k*[qh178N#a7Lq-4uQP@?WIu8-aqlL+Hb"9CNZVWglj%f2(Hs'\\=\%$3K96M*T%iOpGE[1@B^NVi.DbL?uWj+7fS
%gR(H@E"e`iEkK-Uil:)-2'P'XWc@9mfsH=ON/:)cI-sr$D3?_50m[;AbY;Um+.eBYL09id"T@o_EI\4UR?dq#V&kh&b1)<9c][3t
%Fnh^L&kegi\EGj#qSj]WH+9'S`L&8`VIl?+d8iZbjiV"4Oiq$1X=nU@o:srZKo;[tLf]e?,+Y(V=48*+a:1Oo+$eVSjAN<V%Y@tn
%QmL9FFBW_t"j+[kHsqp,h-L4O[6amn2!-*dfSpOM90Rp&I4eYG*G?q:M81+"1$0FgOEN'Rp][ss!"j;g"2^^C^5ub9"/YMA)CP,*
%"qot.mSd`@E*`Dn,Eo9=p-K=F-0Sa8U%sIH(u,<J2p#VH`iX$&Zo<sgT`A4l0=/G('o'n[4>EfoMs;Q6g4!`'mnBQA\Sp&1`s[uF
%-L0AQiD"&[dTB49lB&Np(q`G]dh:CF]oS`d0+2Vl8P.X!A!gs'<L[/,/3jAGdZmHV_g1k#P25!S@c*?O!^bT+hFQ>%OA:n;/s4-i
%3[TG3lq%r:<bGBjCBuH@T;/M/8Igue=frGS.;E]+DY=&2a>f?8IQ)m=\D45q<N`43p6Q\T+U_EtW4;UX:,j'A[/N\Y6ShN)f]t<b
%H6RkHnp;qt'i>DU7CX*fBI[KYWVb2^%e8p[M6Ma!qaPAP0\M+aV<%;p[l<f@db(#KL\?"=/-)F(.//!4l]>#^qg<*H1hQlO'a3Z#
%&_']Ip(8)=E!d<lh)<CrYH&?1:gj-eVJakOXV/]g/i%!>,=!8rWt]Fq-#&l#K-:A,+]on*AG?[#3Zj3#4hjUN*s`g\J&I<No1`qD
%4=Y&d4Pn/>kOHP/R$sW80.O7l+*8o'3tIM&d#Ab?Ki]NO?5&^_]WtIjo-r_>Mk[+_X5T<9G'brd4mM"(]TJS0C.@Atjp+,#CO$bs
%:$#ogH?oEJnmuu,8=CZD/7p9-XL[3b2L9N3.SCN=c\Yh?iW8GNRRaYF/O1fCAkKJ6LIf_>F!f#o:?`.CXfttGXNMH*aX7h*HPW;&
%ZK.^k:2BQK;7j$r\[U5*9C8@I'>d$#3+nZi=3h>b*;4"XKphSpqc%+d!F$aD]'0G2)AZWb,;VL."fAdahq)]G4EY/]_F-fK[?ZZ!
%8XqRAQCfT$OPQ%Sau.FQ(AWESO+s'BIO+.5-1RD?6_a=X(IktFG>)]M!3\4AKgkkMoC"]_XGqk'#t4AsT4.NsfW?B/DjS[X,bq&%
%#nX-9k*XiD77mJhn?GaR8_KJ9&q4%W[B*B#\N+!=6-(SYhn@M)5k>t_qB^f7,@1tC67P\ri?%=G2;EQA]CVGOD2>$!mKBn>Clgl0
%!`<b9!4/#7g6r(He*2DM*l%!Kk<u6N8ag%P+N[+_L^*!+pnZ;bci@*EhY*_gG##JI1OL,IlYt$,AU[.6l*S91@siI.ZE7OQdAjl#
%-8aSE]NG9rhM='p2%8UQPQdeW.\6q%0-V\GS.L@`8rdf?@B\t1CrZPW9If%AS'PWZl@Rr3qa_!G'tmCq>e]@o03I\4dO@^]SZF1#
%`M_X;Y8`lJLI2q"LtAFRUUDb.(dS^5.e4>W.*'_X3)TJ&2:]Qs)DO=rS-W=PpdTfG:XH*"fO@3n$cEKtQ!d]:OYeYR-]_/5W,A"C
%^#W9Ug@]$>#aeb"HG4RR"#5;?YTZ01]Cl=<"O@ZOe&iOrZ#:&7)'b5FVqM>8H#r^6mhO5DE#)a!e2Vn!4j[#bFNe^Ad'om-1Np&"
%f/Q4e8[rS`7-'aints+:D_J>q)=D]Vj5)TB&tR)`Rd`i@<[,bmqCl:+-A,*',<m:qlVUo<A>iDu-lTsMUT38SA4%9D-nMh"8Zcu-
%+-EBQ,8-$jC0.8=OB+p>Y)ns_('="FQ%c\"6_9#h]Qb,H2d1[F0jX'A\HeGa\?<m1JV]`lNP:Mj[S7)OEioPUORg6_qk0s-XMm"1
%nU]1NNX:"TdF<Dna,DB)QMqB\@C@KjYoCrt%lON1?_>Ua%)[QL/`jK"FYPe9dbC8k\LWmuhIDs-IXef>P*cnqh1j*)m[H!QX)dSm
%CZV-YXR?gd'\Ml\TE(WJoaiMJ"%2?ib(O<Z,d"+8hEh',Wbq6gWU0l_WU>o`qoM=&i/;3RaLps6!aD=PdN,Tj>dN-F_pB$47)NUJ
%,2SmW^,[h3+loW0E9g0=-C-RM53;.Y&sma+6ILC?1YqM)QC,6AhqM1t('Mg^kWi'Fep[6[+3%U5<Sjq<0L,,B]D$3]fuWF1T01ea
%;gVdsD8N]]1pPN]jFb(-57"D5nZIYO7V^0OA<.1Lkr<*#>MKD1TG#L]BC)a\OP9%p'3H+Wo-4/>`glMj0'd#8,sQN*HQ)kT!kSda
%'.Mf5#E?PbP#\kK&HKGG:qrZ`5KH!jAd&U/kNim0W>RVU!6jEuUB[#]2Vks"g'e(oI0k"8h^:Kb-o+'1gkP2iGo8h<XElj:[</E+
%J*V7HgSa(o!)i$/n`Bt<U7J%t?XhEOH"rJ_Q+oP3l3#m:L0,,j'"Y3D"sb6)ZisK(2pD=6MOHCq)t@Hfpr3:cC?jqOeu(K6kV2dV
%A+6637IIENr;?O^o:t4,8.rG#Wh/+Z="d4!P,MG?CV(2h_.rj2HV/!iY-LI30n"gn^in6ep?ffFZk[4Uch&2G)bl<R-p1@^RG0IL
%GcB!+0Mj&i;(l@kEmh0UWn:EBo2S\>03qRr'.fa9_F0mGb?Dn7ZMA<9IH>n1@nKh4n#J!eLSP3ancU`7OC^]M$.*8Akucln6&#!X
%jN>,eH'),-JC/n`3(uMJ7`R2ib0eg?Q$+r"o0>e@oRY8(ckDC<H=7-B76!>ZWMD4WA]T5@C8N1pdk"Ok"0;BE!+tF*e9htXEhU^5
%)'FoJV^Dhg!6LRuNA*?N2d7+.-R/@hb#XSS_Ea!^@MM'.nl);;SS^$ZbKrhB`o6!MhEq-,)p=1fkf.do\uLbh"s1p9J(mZr4C:#%
%j_p3qTC<mM\pKcPORd%o@Dm+_3frO[Q9J/X.&6MZk\s-0&Et0R\G>)"bUU?sfp/@ob/apc'Iff@$fD0Y]j<,V=Op]J^Tm&%S2(/X
%6Lb720`n.r043-3Rh#,P-'[s].>Qg_d]DR^q$(eA-qOhZ2jW?q&kKHY/'`Ij/p`jOn=JC<K_'C,o#ECZQi'XOUIGi0ID=bmR0GZ^
%*BW:.2gE8Cmb<3sr`LF7IlQNHrr!?4IDW27clWbq8'h1B,"DU/BMnJATIobk14+Q\A0Nes,?g=&-n>da;DX-k=K9Aq%`M-[,J"6'
%h6(t+-p]2q8$!I;*KVM9$OAPKc_rLIW_;I+0XdR__]#CA3K]t^7%'bGKW9CebH_N1XsZZ'^=W7f%B=bW=lm>WTkEbamk;n.NG_)D
%&/U7,R4bHt8[IIS2rUNJb+>+*M(#\>mU4F$f(=rJ\g&!B&<=!74j]"6g`I1AP5C`05fufiLpu1#MjV^_jWekgcUC6HmeM_gconL$
%Yiq\Wo.i&AIT5gal]&_uHXO[QHgnk^YAXgRhkZ&sYfZ"'nfhg"W($MaF),Yg^fALk>HKOFH[!)g?`Wr%bp_Du[l-$bl8*@El`PfG
%)7-q7a_'CIMq3g,]=S:6V9iKkCG2%Bb2fa+eQjt?XZ]WHm&sEJ"uYqH[>LHsr1'+QDSkohQ(3?;YO/1L@5UP(m%LoP89B;h;]ggJ
%&C&$"Roh8:2,9UK/XB*+juQXlFq/%9irG-Jd5M?7npZ&+/FHpdToFE+&HTGW.&&!]L[S?f9qF&<D%]<;k,.b_]Xd2M@QaCT73(N_
%g*9jEF25L@Qt/E2Gj4n@@(AG)@*:_.i84&=K?#no@NB8oH*t:U)Ja(d51\P]SJ-"MkkAk9Y@[E34ekGQ+JVAVOD?%BF:W7ZDXp.t
%q',r'8[GL>&n=0uI8OX4MK1>[$I6go:3Ad8Z/#/l#4oN`7IbZ8oCXj\^Q8^:I=^Z:]cZ?LdGp3JG4QQ<6Td5N$#\FpnVPq3Rg9cU
%+\M(`AW&(iPIaE]^0]Hg]!#MhfAn?#pq&PNnm#@@h9I#lqSEdp$:#a@%Mf5@=Zl&-!-sH\=A]'uR2%3!Bn`JT'e7A\&DuU]:O6&m
%UsO1i3OepuPo-0`%ZNrY^1A*HM\&^l'PhR",=MX9NFQ8&"<f!Y9=nG%nq[t`pdqbM([BMKn5FHXN_!#t.Nd\Ad7:YPkH@6AJW/6V
%H>NS%&"TDg5T$*'6:Hb#<-uQ@!b=aU'e;m%l*R:-2g==M+/,D3Djt%_&/If1Yr\YM8;)l75_b0];1>8[6U9;*m>)K'fYndbHNRZl
%j9QL^d-3sPTq]K2NV=nH$%sU,,?0n`->&$jP$F=U5*Om%lFmi3HI-n,MK12(h$<7$8&mYgPZ(\q#F/akO5Thi'Ep:kb&Kh,P%U"'
%Z6Mf[=4LVdBk6-bZ"PC\[*)]n7#I.kjXbVO-kOq?N=\o=MA\$[7u@A<fn%#S/B]ZO,"7'e,6&6(b#LE*pbCFR03`RT:f/>uquA2&
%QX^Ue<"r")MJ.)IKn0Y?o'I#<.`"q,QrFEr\^(-\'n%5;.f'2a.`t8dgh;@uEX4M:mncjkPVqGE<0WQ%>CD0^nrjdp\3i\VR9#AF
%;':0OKSiZ:Ob8]k;+q-`'9T#Z0WFZ(']l.]:Ih3/k?^2ur.@m`lE[MKrSk<Q85\rH<$XtkDD;ohU1.=sP=DA3Q=CLVb%8C&Os<E+
%E]@8nW$p77(MSP['$7jb*r:l_:sg(m7G$'?,>saZAF\S&(/*Z;EJ0KS(j^*jX=1i&7RKgqU.LdnnW#a3C^MXm<)"m,2)P2H3B\o!
%)mQ,&eBK5^g15r&%n$)HH00-Be@J>U!?tWfXem*h8fjh)%q@\HHUX1)2*uA0_'<!Fqei?_C/=jP/MqW/J&-<Q:,GJB-pZ=#Mc`h!
%D"kVP7>WFIEQ<r7*N6ub<3&W$7\hG_F="t\'JJ9U.2B+^7#G9b.^B=JCA3`'("hS*<cV6ATrg=UPR*aO*O2=A]45%/b80+$`%"W5
%+;$.#!ZAW>HB]>>So9QidFZ/N.scT*,7"f@lr[*sXEtD\csq,+\eQ_fjN^7HB?Z(Hk8Z"p.@UfD6jtIEZMb@b8l,gma(8if5CP&,
%8#.P9MhUaI;A@2hDIB+cH$%V]TI9t&)rO/\.)g9eXV`KZOke2)NYJ<dmerLpXtGQOLOaE+$ZQc@U>-+Kea'MS3Y8!Z5jmlmoEZ2.
%@VO&\_;5epMFu4eRTRuE&k%)^RV16$M+CJF=uSN@Pl!\Qf8(+e_MZ5C.Jc@T;Y1-iFed"oKt?"R$.M%7PTu`Z$e9]]:FpArbXbS[
%fAfC30O\j/Pi"(hfL;HHEB6D(Lf-8`%+[/-R_2j-%VjGAQBc=mM,G&-QIhrRd$24q7*/uR.q1ogS!#gi&LC*9!9tCuZG!]**@.Xb
%lW?ptWc"sb\Um4p:h!qH,=n'^X34*=]Afmo=2]oDG:`?"%3<[!j#A5PoEDND)Z[j,-q9FJrSaM<`/#%b1Bq>WM%iI,dXE14Fa&cm
%0hRX@2F=&,YSsIYDjqM37uSk4'Nr\nVK2tN.i=@0N_0m.$?2CY]I-H5FGLc2+DM:-`/(_doElS7S/U62,Pi(0)#jjS"XlIMH'oq$
%S-C&J\IA:JLhhG9's-ru:qdqq$=lqkK1#`H`A&jr/6[u'Vo(oR4StiDXd0B/0%UtLU-t;*S4A&R&LP**,BaDG\X2mZ!j?m"5hKR+
%ijAd=0XJ[.#hC;*Fkb%PnXb%Lk3s06/XqRX39/EYk]DK[`Jn,R%W3N<*DP]$j(k/H9TEJDmNYD)hcGkp4!Hh0VkrJ1mb/KIHUK.B
%_PYq&eH7nN6kA#?pqR!e@A7\%Z$\fI89CZ%=Q%@?,YCV^Q(oDB4R@\:Oc`&a[He)2-.cG2hl/=8OBucPP<RIOals)a"DBgZaA2=%
%*<DV(V.2(s6)"?.'47*jY^J^8/(<h_7dK]e^d^_gC@'cQoT'hdJj$js0l.QZe/G"um2/]P[n18UO!lH_B'2Q%,C4n'FO)3$3'[c#
%lXV(;`L1G#8\[Ub3B.U;>EP8gYS?,C*)'((s-`Vl.GRFL.//]\hf';Bk^0:WNSW_X=6/(beuClq=PG2M$*[cL+b:6]:*!Q5A:IrW
%S5#@sPSQQ/K]k_u;kP^]7u2%:,"*mOX-8)N>A.e:@RRb0<(AO]_q'QHq*jd#2^8'1GDmrZXOsi1AL/V7&mMU5aZmCi7(Gm$RoACf
%G`W\1T3JBW_^2bn_78=Lo+s]eglLKL%)!o!`hI>"S`0<`O=1]2\uAmKk+a!FTUp"#,(ElUSID2Z-"^1>jphtdFHEGdEd<i"34InQ
%6UVG"B2q_6p50F/`Qgu,k[s"6&:LNVN"GqolO%KF=P.$E7dg%IT0QDD#?#B=Si2?W21Y''^A:%](=X+9BX>+Ib9=LAk]G1>#6BS-
%eq2;V@d!f6LsECP*'teNR$5AILkQ_lfWZkrJ:MOZ3j;,)-inakmRSt(+,UXARB_bX;1c>!&Y_NkW.T1_+N:%N&KqL#7tL.h#pf(\
%1du*`I*dZCiVT^_WlTQPdYb+@VS.q5/rKN-1m]JW2'[?[5C;bJ]GuT!g!?q@_[=#S/>YUdD4iJ@'_ps(S$B'ZrM['\Kp5i**JeM#
%*[GlnC*I*KQUqpuUSYWJl.q27n8*&1;/[[04jHK^WZ)c5KLYi_^Vg'1LjhPO%Vo4;,!06gD4b=YJHq8;LM,2Lm[HD\Wpt+JTjh!q
%nE;HUp$-;[8hfT:9#KsFZgW'CPS<!cqV`@qXR$VU&)Xe@,cbb4XTN-n<&Ul@rO'8**?m@T$gDlfbM%.,pH,G[bm%1p.V/dAatVIL
%!J2Y5CMlIC=g82h<5KE=!B$T>N-shY>D:X>,okY);'kkio8U`F6MJ9i<>Pjhdr1>C>YPkZIn1&/_?>_;'Z2r$cu@Jj<]Y0FD_<1?
%,#nY3AXi/odD9\<ZpVpiV?7FFOTeUCbEA]'7-\ZENu@O]Z&J`'1pruu>Qllu3Mb5AW%!TR2"Pbqb?'UXW8p^E_psm_VJU<ehV!a1
%2OF\s!mBVPJhj_GWCDW=KDil_f9\%],<koYme'4Ujk-J,$.fqsOrXO:0%kpAZ+Vc!ToYTlT7WqDr&sUEP0JBLX5*t-N3/CsoWff`
%>&@>)48H]-V\J;'[]qm=1_"NN*BnllZ$MFq(Q!l0DdAtm08%+$1nc8T]gT:lr1d8JRUX.Qm^Bo5;Yo]]gN596"2Y3#NYYd30tSnq
%<jiln?$<9=4eLWAQQ2k!+uU:2;uCXB\TD!K7k;0bGON6g?VVA8h2Q;,A_e4H5)b,2lls2KY[f`bYbrt^X2S]&\)2dWBeP-.HTuW4
%!bH7R]CA&s`.e^/HM9.spRO-aKOAd/Q`s'SE(:YRLOGq7OjV.GYDAb9-Ds$'k)I#W+d1:E4sciY.@m@fHceC)fU_Tg;7SXCW2VZJ
%jf.HYl4,gZh^@&].B+aDHK\bG\+JY.'ia_/ZoFK@!>[mVKr-$,*_:E1pGrlXBV7i(X@'VETjo/e<^'WB^qHk8Ng5g@'\=<,I-\6`
%^HCHN?bH,S>k>H)p&Y0;Is:qk^\d'kqX+%WjUZk;fDk[JIeuA/rZD./5QC!Bs2Y04LHkb"n,D:<IfKHGiQL]ipr@m^kMQ=2+9(`l
%:LF+[:Oi/;J,[JQrSbparU9d]T7PptFi/-IqsXN>J,c"QqgSXhOgiU~>
%AI9_PrivateDataEnd
